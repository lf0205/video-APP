(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name) && name !== 'onPush';\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          if (methodName === '$emit') {\n            handlerCtx.$emit.apply(handlerCtx,\n            processEventArgs(\n            _this.$vm,\n            event,\n            eventArray[1],\n            eventArray[2],\n            isCustom,\n            methodName));\n\n            return;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n      // vm 上也挂载 globalData\n      this.$vm.globalData = this.globalData;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n  // 将 methods 中的方法挂在 getApp() 中\n  var methods = vm.$options.methods;\n  if (methods) {\n    Object.keys(methods).forEach(function (name) {\n      appOptions[name] = methods[name];\n    });\n  }\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属\n  var parentVm = $children.find(function (childVm) {return childVm.$scope._$vueId === vuePid;});\n  if (parentVm) {\n    return parentVm;\n  }\n  // 反向递归查找\n  for (var i = $children.length - 1; i >= 0; i--) {\n    parentVm = findVmByVueId($children[i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var options = {\n    multipleSlots: true,\n    addGlobalClass: true };\n\n\n  var componentOptions = {\n    options: options,\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 14:
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n");

/***/ }),

/***/ 15:
/*!**********************************************************************!*\
  !*** C:/Users/Administrator/Desktop/video-APP/task/common/common.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _cryptoJs = _interopRequireDefault(__webpack_require__(/*! @/common/crypto-js/crypto-js.js */ 17));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _index = _interopRequireDefault(__webpack_require__(/*! @/common/luch-request/index.js */ 18));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var USER_CONFIG = 'user';var USER_TOKEN_CONFIG = 'user_token';var USER_EXPIRE_CONFIG = 'token_expire';var SYSTEM_CONFIG = 'system'; // 封装的model显示模态弹窗(提示框信息),类似于html的alert\nvar modal = function modal(content) {var title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';var success = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;var fail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;var complete = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;if (!title && title !== null) {title = '提示';}uni.showModal({ title: title, content: content, showCancel: fail, success: success, fail: typeof fail === \"function\" ? fail : null, complete: complete });}; // 封装的msg状态提示信息\nvar msg = function msg(title) {var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1500;var mask = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;var icon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'none'; //统一提示方便全局修改\n  if (Boolean(title) === false) {return;}uni.showToast({ title: title, duration: duration, mask: mask, icon: icon });}; // 获取用户的登录状态\nvar getUserToken = function getUserToken() {try {var user_token = uni.getStorageSync(USER_TOKEN_CONFIG);var token_expire = uni.getStorageSync(USER_EXPIRE_CONFIG) || 0;if (user_token && token_expire && token_expire > Date.parse(new Date()) / 1000) {return user_token;}} catch (e) {}return '';}; // 设置用户的登录信息\nvar login = function login(data) {try {// 在本地缓存中获取数据修改原始的内容\n    uni.setStorageSync(USER_CONFIG, data);uni.setStorageSync(USER_TOKEN_CONFIG, data.user_token);uni.setStorageSync(USER_EXPIRE_CONFIG, data.expire); //data.expire-用户数据到期\n  } catch (e) {return false;}return true;}; /**\r\n                                             *\r\n                                             * @param params\r\n                                             * @param value\r\n                                             * @param name\r\n                                             * @param refresh   true 情况并更新 false 更新保留原数据\r\n                                             * @returns {boolean}\r\n                                             */ // 更改指定配置文件中指定配置键的值\nvar setConfig = function setConfig(params) {var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : USER_CONFIG;var refresh = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;try {var data = '';if (false === refresh) {//uni.getStorageSync(name) 在本地缓存中同步获取指定 name 的值并保存\n      data = uni.getStorageSync(name);} // 判断并保存\n    if (typeof params == 'object') {if (data == '') {data = params;} else {data = {};for (var i in params) {data[i] = params[i];}}} else {data[params] = value;} // 将 data 存储在本地缓存中指定的 name 中，会覆盖掉原来该 name 对应的内容，这是一个同步接口\n    uni.setStorageSync(name, data);} catch (e) {return false;}return true;}; // 获取用户的登录信息\nvar getConfig = function getConfig() {var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : USER_CONFIG;try {var data = uni.getStorageSync(name);if (key == '') {return data;}return data[key] || '';} catch (e) {return '';}}; /**\r\n                                                                                                                                                                                                                                                                                                                                           * 退出公会\r\n                                                                                                                                                                                                                                                                                                                                           * @returns {boolean}\r\n                                                                                                                                                                                                                                                                                                                                           */var logoutGuild = function logoutGuild() {try {setConfig({ 'guild_id': 0 });} catch (e) {return false;}uni.redirectTo({ url: '/pages/home' });}; // 退出登录\nvar logout = function logout() {try {// uni.removeStorageSync()-在本地缓存中移除指定的用户\n    uni.removeStorageSync(USER_CONFIG);uni.removeStorageSync(USER_TOKEN_CONFIG);uni.removeStorageSync(USER_EXPIRE_CONFIG);} catch (e) {return false;}setTimeout(function () {// 获取当前页面栈\n    var page = getCurrentPages(); // console.log(page);\n    if (page[page.length - 1].route !== 'pages/login/login') {msg(\"请先登录\");uni.redirectTo({ url: '/pages/login/login' });}}, 1000);}; // 手机号\nvar isPhone = function isPhone(phone) {var reg = /^[1][0-9]{10}$/;if (!reg.test(phone)) {return false;} else {return true;}}; // 身份证\nvar isCard = function isCard(card) {var reg = /^[1-9]{1}[0-9]{14}$|^[1-9]{1}[0-9]{16}([0-9]|[xX])$/;if (reg.test(card)) {return true;} else {return false;}}; // 返回错误信息\nvar cacheError = function cacheError(err) {var errMsg;if (err && err.response) {switch (err.response.status) {case 400:err.message = '请求参数错误';break;case 401:err.message = '未授权,请登录';break;case 403:err.message = '跨域拒绝访问';break;case 404:err.message = \"\\u8BF7\\u6C42\\u5730\\u5740\\u51FA\\u9519: \".concat(err.response.config.url);break;case 408:err.message = '请求超时';break;case 500:err.message = '服务器内部错误';break;case 501:err.message = '服务未实现';break;case 502:err.message = '网关错误';break;case 503:err.message = '服务不可用';break;case 504:err.message = '网关超时';break;case 505:err.message = 'HTTP版本不受支持';break;default:break;}errMsg = err.message;} else {errMsg = \"请求失败，请稍后再试！\";}return errMsg;}; // \nvar getJSON = function getJSON(str) {if (typeof str == 'string') {try {var obj = JSON.parse(str);if (typeof obj == 'object' && obj) {return obj;} else {return false;}} catch (e) {return false;}} else if (typeof str == 'Object') {return str;}return false;}; //引入前端加密\n// 执行加密操作\nvar aes = function aes(string, operation) {var iv = 'MIGfMA0GCSqGSIb3';iv = _cryptoJs.default.enc.Utf8.parse(iv.substring(0, 16));var key = _cryptoJs.default.enc.Utf8.parse(_cryptoJs.default.MD5(iv).toString().substring(0, 16));if (operation) {return _cryptoJs.default.AES.decrypt(string, key, { iv: iv, padding: _cryptoJs.default.pad.Pkcs7 }).toString(_cryptoJs.default.enc.Utf8);}return _cryptoJs.default.AES.encrypt(string, key, { iv: iv, mode: _cryptoJs.default.mode.CBC, padding: _cryptoJs.default.pad.Pkcs7 }).toString();};var thenBefore = function thenBefore(res) {if (res.data.code == undefined) {msg(\"请求错误，请稍后再试！\");return;}if (res.data.code == 1001) {logout();return;}if (res.data.code > 0) {msg(res.data.msg);}}; /**\r\npost('config/index', {name: \"dagd\"}, function(r){console.log(r)})\r\n引入封装的网络请求\n/**\r\n * 文件上传\r\n */var upload = function upload(data, success, error) {var user_token = getUserToken();uni.showLoading({ title: '上传中' });_index.default.upload('handle/upload', { filePath: data, name: 'file', formData: { user_token: user_token } }).then(function (res) {uni.hideLoading();thenBefore(res);if (typeof success == 'function') {success(res.data);}}).catch(function (err) {uni.hideLoading();var errMsg = cacheError(err);msg(errMsg);if (typeof error == 'function') {error(errMsg, err);}});};var post = function post(url) {var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var success = arguments.length > 2 ? arguments[2] : undefined;var error = arguments.length > 3 ? arguments[3] : undefined;var user_token = getUserToken();data = _objectSpread({}, data, { user_token: user_token });return _index.default.post(url, data).then(function (res) {thenBefore(res);if (typeof success == 'function') {\n      success(res.data);\n      // console.log(res.data)\n    }\n  }).catch(function (err) {\n    console.log(__f__(err, \" at common\\\\common.js:317\"));\n    var errMsg = cacheError(err);\n    msg(errMsg);\n    if (typeof error == 'function') {\n      error(errMsg, err);\n    }\n  });\n};\n\nvar payment = function payment(orderInfo, _success, fail) {var provider = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'alipay';\n  return uni.requestPayment({\n    provider: provider,\n    orderInfo: orderInfo,\n    success: function success(res) {\n      if (typeof _success == 'function') {\n        _success(res);\n      }\n    },\n    fail: function fail(err) {\n      if (typeof err == 'function') {\n        err(err);\n      }\n    } });\n\n};\n\nvar initUser = function initUser() {var func = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  if (getUserToken()) {\n    post('user/info', {}, function (res) {\n      if (res.code === 0) {\n        login(res.data);\n        if (typeof func == 'function') {\n          func();\n        }\n      }\n    });\n  }\n};\n\nvar initSystem = function initSystem() {var func = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  post('config/system', {}, function (res) {\n    if (res.code === 0) {\n      setConfig(res.data, '', SYSTEM_CONFIG, true);\n      if (typeof func == 'function') {\n        func();\n      }\n    }\n  });\n};\n\nvar initUpgrade = function initUpgrade() {var func = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var req = {\n    \"appid\": plus.runtime.appid,\n    \"version\": plus.runtime.version };\n\n\n  post('config/upgrade', req, function (res) {\n    if (res.code == 0) {\n      if (res.data) {\n        uni.showModal({\n          title: \"更新提示\",\n          content: res.data.content,\n          success: function success(r) {\n            if (res.data.enforce == 1) {\n              plus.runtime.openURL(res.data.url);\n            } else {\n              if (r.confirm) {\n                plus.runtime.openURL(res.data.url);\n              }\n            }\n          } });\n\n      }\n      if (typeof func == 'function') {\n        func(res);\n      }\n    }\n  });\n\n};\n\nvar previewImage = function previewImage() {var paths = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  uni.previewImage({\n    urls: paths,\n    longPressActions: {\n      itemList: ['保存图片'],\n      success: function success(data) {\n        uni.getImageInfo({\n          src: paths[data.index],\n          success: function success(image) {\n            uni.saveImageToPhotosAlbum({\n              filePath: image.path,\n              success: function success() {\n                msg('保存成功');\n              } });\n\n          } });\n\n      } } });\n\n\n};\n\nvar uploadImage = function uploadImage() {var _success2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['compressed'];var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ['album'];\n  uni.chooseImage({\n    count: count,\n    sizeType: size, //可以指定是原图还是压缩图，默认二者都有\n    sourceType: source, //从相册选择\n    success: function success(res) {\n      var limit = res.tempFilePaths.length > count ? count : res.tempFilePaths.length;\n      for (var i = 0; i < limit; i++) {\n        upload(res.tempFilePaths[i], function (data) {\n          if (data.code === 0) {\n            if (typeof _success2 == 'function') {\n              _success2(data.data.path);\n            }\n          }\n        });\n      }\n      msg('上传成功');\n    } });\n\n};\n\nvar isUrl = function isUrl(url) {\n  if (url != \"\") {\n    var reg = /(http|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&:/~\\+#]*[\\w\\-\\@?^=%&/~\\+#])?/;\n    if (reg.test(url)) {\n      return true;\n    }\n  }\n  return false;\n};var _default =\n\n{\n  USER_CONFIG: USER_CONFIG,\n  USER_TOKEN_CONFIG: USER_TOKEN_CONFIG,\n  USER_EXPIRE_CONFIG: USER_EXPIRE_CONFIG,\n  SYSTEM_CONFIG: SYSTEM_CONFIG,\n  msg: msg,\n  modal: modal,\n  getUserToken: getUserToken,\n  isPhone: isPhone,\n  login: login,\n  logoutGuild: logoutGuild,\n  logout: logout,\n  getConfig: getConfig,\n  setConfig: setConfig,\n  aes: aes,\n  post: post,\n  upload: upload,\n  getJSON: getJSON,\n  isCard: isCard,\n  payment: payment,\n  initUpgrade: initUpgrade,\n  initUser: initUser,\n  initSystem: initSystem,\n  previewImage: previewImage,\n  uploadImage: uploadImage,\n  isUrl: isUrl };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 16)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),

/***/ 16:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction formatLog() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n\n    return v;\n  });\n  var msg = '';\n\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n\n  return msg;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJmb3JtYXRMb2ciLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIm1zZ3MiLCJtYXAiLCJ0eXBlIiwidG9Mb3dlckNhc2UiLCJKU09OIiwic3RyaW5naWZ5IiwiZSIsInVuZGVmaW5lZCIsInZUeXBlIiwidG9VcHBlckNhc2UiLCJTdHJpbmciLCJtc2ciLCJsYXN0TXNnIiwicG9wIiwiam9pbiIsImluZGV4T2YiXSwibWFwcGluZ3MiOiIwRkFBQSxTQUFTQSxLQUFULENBQWdCQyxDQUFoQixFQUFtQjtBQUNqQixNQUFJQyxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCTCxDQUEvQixDQUFSO0FBQ0EsU0FBT0MsQ0FBQyxDQUFDSyxTQUFGLENBQVksQ0FBWixFQUFlTCxDQUFDLENBQUNNLE1BQUYsR0FBVyxDQUExQixDQUFQO0FBQ0Q7O0FBRWMsU0FBU0MsU0FBVCxHQUFzQjtBQUNuQyxPQUFLLElBQUlDLElBQUksR0FBR0MsU0FBUyxDQUFDSCxNQUFyQixFQUE2QkksSUFBSSxHQUFHLElBQUlDLEtBQUosQ0FBVUgsSUFBVixDQUFwQyxFQUFxREksSUFBSSxHQUFHLENBQWpFLEVBQW9FQSxJQUFJLEdBQUdKLElBQTNFLEVBQWlGSSxJQUFJLEVBQXJGLEVBQXlGO0FBQ3ZGRixRQUFJLENBQUNFLElBQUQsQ0FBSixHQUFhSCxTQUFTLENBQUNHLElBQUQsQ0FBdEI7QUFDRDs7QUFFRCxNQUFJQyxJQUFJLEdBQUdILElBQUksQ0FBQ0ksR0FBTCxDQUFTLFVBQVVmLENBQVYsRUFBYTtBQUMvQixRQUFJZ0IsSUFBSSxHQUFHZCxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkwsQ0FBL0IsQ0FBWDs7QUFFQSxRQUFJZ0IsSUFBSSxDQUFDQyxXQUFMLE9BQXVCLGlCQUEzQixFQUE4QztBQUM1QyxVQUFJO0FBQ0ZqQixTQUFDLEdBQUcscUJBQXFCa0IsSUFBSSxDQUFDQyxTQUFMLENBQWVuQixDQUFmLENBQXJCLEdBQXlDLGdCQUE3QztBQUNELE9BRkQsQ0FFRSxPQUFPb0IsQ0FBUCxFQUFVO0FBQ1ZwQixTQUFDLEdBQUcsaUJBQUo7QUFDRDtBQUNGLEtBTkQsTUFNTztBQUNMLFVBQUlBLENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQ2RBLFNBQUMsR0FBRyxZQUFKO0FBQ0QsT0FGRCxNQUVPLElBQUlBLENBQUMsS0FBS3FCLFNBQVYsRUFBcUI7QUFDMUJyQixTQUFDLEdBQUcsaUJBQUo7QUFDRCxPQUZNLE1BRUE7QUFDTCxZQUFJc0IsS0FBSyxHQUFHdkIsS0FBSyxDQUFDQyxDQUFELENBQUwsQ0FBU3VCLFdBQVQsRUFBWjs7QUFFQSxZQUFJRCxLQUFLLEtBQUssUUFBVixJQUFzQkEsS0FBSyxLQUFLLFNBQXBDLEVBQStDO0FBQzdDdEIsV0FBQyxHQUFHLGNBQWNzQixLQUFkLEdBQXNCLEtBQXRCLEdBQThCdEIsQ0FBOUIsR0FBa0MsU0FBbEMsR0FBOENzQixLQUE5QyxHQUFzRCxLQUExRDtBQUNELFNBRkQsTUFFTztBQUNMdEIsV0FBQyxHQUFHd0IsTUFBTSxDQUFDeEIsQ0FBRCxDQUFWO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQU9BLENBQVA7QUFDRCxHQTFCVSxDQUFYO0FBMkJBLE1BQUl5QixHQUFHLEdBQUcsRUFBVjs7QUFFQSxNQUFJWCxJQUFJLENBQUNQLE1BQUwsR0FBYyxDQUFsQixFQUFxQjtBQUNuQixRQUFJbUIsT0FBTyxHQUFHWixJQUFJLENBQUNhLEdBQUwsRUFBZDtBQUNBRixPQUFHLEdBQUdYLElBQUksQ0FBQ2MsSUFBTCxDQUFVLGFBQVYsQ0FBTjs7QUFFQSxRQUFJRixPQUFPLENBQUNHLE9BQVIsQ0FBZ0IsTUFBaEIsTUFBNEIsQ0FBaEMsRUFBbUM7QUFDakNKLFNBQUcsSUFBSUMsT0FBUDtBQUNELEtBRkQsTUFFTztBQUNMRCxTQUFHLElBQUksZ0JBQWdCQyxPQUF2QjtBQUNEO0FBQ0YsR0FURCxNQVNPO0FBQ0xELE9BQUcsR0FBR1gsSUFBSSxDQUFDLENBQUQsQ0FBVjtBQUNEOztBQUVELFNBQU9XLEdBQVA7QUFDRCIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XHJcbiAgdmFyIHMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuICByZXR1cm4gcy5zdWJzdHJpbmcoOCwgcy5sZW5ndGggLSAxKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2cgKCkge1xyXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xyXG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XVxyXG4gIH1cclxuXHJcbiAgdmFyIG1zZ3MgPSBhcmdzLm1hcChmdW5jdGlvbiAodikge1xyXG4gICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuXHJcbiAgICBpZiAodHlwZS50b0xvd2VyQ2FzZSgpID09PSAnW29iamVjdCBvYmplY3RdJykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHYgPSAnLS0tQkVHSU46SlNPTi0tLScgKyBKU09OLnN0cmluZ2lmeSh2KSArICctLS1FTkQ6SlNPTi0tLSdcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHYgPSAnW29iamVjdCBvYmplY3RdJ1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHYgPSAnLS0tTlVMTC0tLSdcclxuICAgICAgfSBlbHNlIGlmICh2ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2ID0gJy0tLVVOREVGSU5FRC0tLSdcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgdlR5cGUgPSB0eXBvZih2KS50b1VwcGVyQ2FzZSgpXHJcblxyXG4gICAgICAgIGlmICh2VHlwZSA9PT0gJ05VTUJFUicgfHwgdlR5cGUgPT09ICdCT09MRUFOJykge1xyXG4gICAgICAgICAgdiA9ICctLS1CRUdJTjonICsgdlR5cGUgKyAnLS0tJyArIHYgKyAnLS0tRU5EOicgKyB2VHlwZSArICctLS0nXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHYgPSBTdHJpbmcodilcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdlxyXG4gIH0pXHJcbiAgdmFyIG1zZyA9ICcnXHJcblxyXG4gIGlmIChtc2dzLmxlbmd0aCA+IDEpIHtcclxuICAgIHZhciBsYXN0TXNnID0gbXNncy5wb3AoKVxyXG4gICAgbXNnID0gbXNncy5qb2luKCctLS1DT01NQS0tLScpXHJcblxyXG4gICAgaWYgKGxhc3RNc2cuaW5kZXhPZignIGF0ICcpID09PSAwKSB7XHJcbiAgICAgIG1zZyArPSBsYXN0TXNnXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtc2cgKz0gJy0tLUNPTU1BLS0tJyArIGxhc3RNc2dcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgbXNnID0gbXNnc1swXVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG1zZ1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 17:
/*!***********************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/video-APP/task/common/crypto-js/crypto-js.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";(function (root, factory) {\n  if (true) {\n    // CommonJS\n    module.exports = exports = factory();\n  } else\n  {}\n})(void 0, function () {\n\n  /**\n                         * CryptoJS core components.\n                         */\n  var CryptoJS = CryptoJS || function (Math, undefined) {\n    /*\n                                                          * Local polyfil of Object.create\n                                                          */\n    var create = Object.create || function () {\n      function F() {};\n\n      return function (obj) {\n        var subtype;\n\n        F.prototype = obj;\n\n        subtype = new F();\n\n        F.prototype = null;\n\n        return subtype;\n      };\n    }();\n\n    /**\n          * CryptoJS namespace.\n          */\n    var C = {};\n\n    /**\n                 * Library namespace.\n                 */\n    var C_lib = C.lib = {};\n\n    /**\n                             * Base object for prototypal inheritance.\n                             */\n    var Base = C_lib.Base = function () {\n\n\n      return {\n        /**\n                * Creates a new object that inherits from this object.\n                *\n                * @param {Object} overrides Properties to copy into the new object.\n                *\n                * @return {Object} The new object.\n                *\n                * @static\n                *\n                * @example\n                *\n                *     var MyType = CryptoJS.lib.Base.extend({\n                *         field: 'value',\n                *\n                *         method: function () {\n                *         }\n                *     });\n                */\n        extend: function extend(overrides) {\n          // Spawn\n          var subtype = create(this);\n\n          // Augment\n          if (overrides) {\n            subtype.mixIn(overrides);\n          }\n\n          // Create default initializer\n          if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n            subtype.init = function () {\n              subtype.$super.init.apply(this, arguments);\n            };\n          }\n\n          // Initializer's prototype is the subtype object\n          subtype.init.prototype = subtype;\n\n          // Reference supertype\n          subtype.$super = this;\n\n          return subtype;\n        },\n\n        /**\n            * Extends this object and runs the init method.\n            * Arguments to create() will be passed to init().\n            *\n            * @return {Object} The new object.\n            *\n            * @static\n            *\n            * @example\n            *\n            *     var instance = MyType.create();\n            */\n        create: function create() {\n          var instance = this.extend();\n          instance.init.apply(instance, arguments);\n\n          return instance;\n        },\n\n        /**\n            * Initializes a newly created object.\n            * Override this method to add some logic when your objects are created.\n            *\n            * @example\n            *\n            *     var MyType = CryptoJS.lib.Base.extend({\n            *         init: function () {\n            *             // ...\n            *         }\n            *     });\n            */\n        init: function init() {\n        },\n\n        /**\n            * Copies properties into this object.\n            *\n            * @param {Object} properties The properties to mix in.\n            *\n            * @example\n            *\n            *     MyType.mixIn({\n            *         field: 'value'\n            *     });\n            */\n        mixIn: function mixIn(properties) {\n          for (var propertyName in properties) {\n            if (properties.hasOwnProperty(propertyName)) {\n              this[propertyName] = properties[propertyName];\n            }\n          }\n\n          // IE won't copy toString using the loop above\n          if (properties.hasOwnProperty('toString')) {\n            this.toString = properties.toString;\n          }\n        },\n\n        /**\n            * Creates a copy of this object.\n            *\n            * @return {Object} The clone.\n            *\n            * @example\n            *\n            *     var clone = instance.clone();\n            */\n        clone: function clone() {\n          return this.init.prototype.extend(this);\n        } };\n\n    }();\n\n    /**\n          * An array of 32-bit words.\n          *\n          * @property {Array} words The array of 32-bit words.\n          * @property {number} sigBytes The number of significant bytes in this word array.\n          */\n    var WordArray = C_lib.WordArray = Base.extend({\n      /**\n                                                     * Initializes a newly created word array.\n                                                     *\n                                                     * @param {Array} words (Optional) An array of 32-bit words.\n                                                     * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n                                                     *\n                                                     * @example\n                                                     *\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create();\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n                                                     */\n      init: function init(words, sigBytes) {\n        words = this.words = words || [];\n\n        if (sigBytes != undefined) {\n          this.sigBytes = sigBytes;\n        } else {\n          this.sigBytes = words.length * 4;\n        }\n      },\n\n      /**\n          * Converts this word array to a string.\n          *\n          * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n          *\n          * @return {string} The stringified word array.\n          *\n          * @example\n          *\n          *     var string = wordArray + '';\n          *     var string = wordArray.toString();\n          *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n          */\n      toString: function toString(encoder) {\n        return (encoder || Hex).stringify(this);\n      },\n\n      /**\n          * Concatenates a word array to this word array.\n          *\n          * @param {WordArray} wordArray The word array to append.\n          *\n          * @return {WordArray} This word array.\n          *\n          * @example\n          *\n          *     wordArray1.concat(wordArray2);\n          */\n      concat: function concat(wordArray) {\n        // Shortcuts\n        var thisWords = this.words;\n        var thatWords = wordArray.words;\n        var thisSigBytes = this.sigBytes;\n        var thatSigBytes = wordArray.sigBytes;\n\n        // Clamp excess bits\n        this.clamp();\n\n        // Concat\n        if (thisSigBytes % 4) {\n          // Copy one byte at a time\n          for (var i = 0; i < thatSigBytes; i++) {\n            var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n            thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n          }\n        } else {\n          // Copy one word at a time\n          for (var i = 0; i < thatSigBytes; i += 4) {\n            thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];\n          }\n        }\n        this.sigBytes += thatSigBytes;\n\n        // Chainable\n        return this;\n      },\n\n      /**\n          * Removes insignificant bits.\n          *\n          * @example\n          *\n          *     wordArray.clamp();\n          */\n      clamp: function clamp() {\n        // Shortcuts\n        var words = this.words;\n        var sigBytes = this.sigBytes;\n\n        // Clamp\n        words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n        words.length = Math.ceil(sigBytes / 4);\n      },\n\n      /**\n          * Creates a copy of this word array.\n          *\n          * @return {WordArray} The clone.\n          *\n          * @example\n          *\n          *     var clone = wordArray.clone();\n          */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n        clone.words = this.words.slice(0);\n\n        return clone;\n      },\n\n      /**\n          * Creates a word array filled with random bytes.\n          *\n          * @param {number} nBytes The number of random bytes to generate.\n          *\n          * @return {WordArray} The random word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.lib.WordArray.random(16);\n          */\n      random: function random(nBytes) {\n        var words = [];\n\n        var r = function r(m_w) {\n          var m_w = m_w;\n          var m_z = 0x3ade68b1;\n          var mask = 0xffffffff;\n\n          return function () {\n            m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;\n            m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;\n            var result = (m_z << 0x10) + m_w & mask;\n            result /= 0x100000000;\n            result += 0.5;\n            return result * (Math.random() > .5 ? 1 : -1);\n          };\n        };\n\n        for (var i = 0, rcache; i < nBytes; i += 4) {\n          var _r = r((rcache || Math.random()) * 0x100000000);\n\n          rcache = _r() * 0x3ade67b7;\n          words.push(_r() * 0x100000000 | 0);\n        }\n\n        return new WordArray.init(words, nBytes);\n      } });\n\n\n    /**\n             * Encoder namespace.\n             */\n    var C_enc = C.enc = {};\n\n    /**\n                             * Hex encoding strategy.\n                             */\n    var Hex = C_enc.Hex = {\n      /**\n                             * Converts a word array to a hex string.\n                             *\n                             * @param {WordArray} wordArray The word array.\n                             *\n                             * @return {string} The hex string.\n                             *\n                             * @static\n                             *\n                             * @example\n                             *\n                             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n                             */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var hexChars = [];\n        for (var i = 0; i < sigBytes; i++) {\n          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          hexChars.push((bite >>> 4).toString(16));\n          hexChars.push((bite & 0x0f).toString(16));\n        }\n\n        return hexChars.join('');\n      },\n\n      /**\n          * Converts a hex string to a word array.\n          *\n          * @param {string} hexStr The hex string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n          */\n      parse: function parse(hexStr) {\n        // Shortcut\n        var hexStrLength = hexStr.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < hexStrLength; i += 2) {\n          words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;\n        }\n\n        return new WordArray.init(words, hexStrLength / 2);\n      } };\n\n\n    /**\n            * Latin1 encoding strategy.\n            */\n    var Latin1 = C_enc.Latin1 = {\n      /**\n                                   * Converts a word array to a Latin1 string.\n                                   *\n                                   * @param {WordArray} wordArray The word array.\n                                   *\n                                   * @return {string} The Latin1 string.\n                                   *\n                                   * @static\n                                   *\n                                   * @example\n                                   *\n                                   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n                                   */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var latin1Chars = [];\n        for (var i = 0; i < sigBytes; i++) {\n          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          latin1Chars.push(String.fromCharCode(bite));\n        }\n\n        return latin1Chars.join('');\n      },\n\n      /**\n          * Converts a Latin1 string to a word array.\n          *\n          * @param {string} latin1Str The Latin1 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n          */\n      parse: function parse(latin1Str) {\n        // Shortcut\n        var latin1StrLength = latin1Str.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < latin1StrLength; i++) {\n          words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n        }\n\n        return new WordArray.init(words, latin1StrLength);\n      } };\n\n\n    /**\n            * UTF-8 encoding strategy.\n            */\n    var Utf8 = C_enc.Utf8 = {\n      /**\n                               * Converts a word array to a UTF-8 string.\n                               *\n                               * @param {WordArray} wordArray The word array.\n                               *\n                               * @return {string} The UTF-8 string.\n                               *\n                               * @static\n                               *\n                               * @example\n                               *\n                               *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n                               */\n      stringify: function stringify(wordArray) {\n        try {\n          return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n        } catch (e) {\n          throw new Error('Malformed UTF-8 data');\n        }\n      },\n\n      /**\n          * Converts a UTF-8 string to a word array.\n          *\n          * @param {string} utf8Str The UTF-8 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n          */\n      parse: function parse(utf8Str) {\n        return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n      } };\n\n\n    /**\n            * Abstract buffered block algorithm template.\n            *\n            * The property blockSize must be implemented in a concrete subtype.\n            *\n            * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n            */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n      /**\n                                                                               * Resets this block algorithm's data buffer to its initial state.\n                                                                               *\n                                                                               * @example\n                                                                               *\n                                                                               *     bufferedBlockAlgorithm.reset();\n                                                                               */\n      reset: function reset() {\n        // Initial values\n        this._data = new WordArray.init();\n        this._nDataBytes = 0;\n      },\n\n      /**\n          * Adds new data to this block algorithm's buffer.\n          *\n          * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n          *\n          * @example\n          *\n          *     bufferedBlockAlgorithm._append('data');\n          *     bufferedBlockAlgorithm._append(wordArray);\n          */\n      _append: function _append(data) {\n        // Convert string to WordArray, else assume WordArray already\n        if (typeof data == 'string') {\n          data = Utf8.parse(data);\n        }\n\n        // Append\n        this._data.concat(data);\n        this._nDataBytes += data.sigBytes;\n      },\n\n      /**\n          * Processes available data blocks.\n          *\n          * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n          *\n          * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n          *\n          * @return {WordArray} The processed data.\n          *\n          * @example\n          *\n          *     var processedData = bufferedBlockAlgorithm._process();\n          *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n          */\n      _process: function _process(doFlush) {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n        var dataSigBytes = data.sigBytes;\n        var blockSize = this.blockSize;\n        var blockSizeBytes = blockSize * 4;\n\n        // Count blocks ready\n        var nBlocksReady = dataSigBytes / blockSizeBytes;\n        if (doFlush) {\n          // Round up to include partial blocks\n          nBlocksReady = Math.ceil(nBlocksReady);\n        } else {\n          // Round down to include only full blocks,\n          // less the number of blocks that must remain in the buffer\n          nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n        }\n\n        // Count words ready\n        var nWordsReady = nBlocksReady * blockSize;\n\n        // Count bytes ready\n        var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n        // Process blocks\n        if (nWordsReady) {\n          for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n            // Perform concrete-algorithm logic\n            this._doProcessBlock(dataWords, offset);\n          }\n\n          // Remove processed words\n          var processedWords = dataWords.splice(0, nWordsReady);\n          data.sigBytes -= nBytesReady;\n        }\n\n        // Return processed words\n        return new WordArray.init(processedWords, nBytesReady);\n      },\n\n      /**\n          * Creates a copy of this object.\n          *\n          * @return {Object} The clone.\n          *\n          * @example\n          *\n          *     var clone = bufferedBlockAlgorithm.clone();\n          */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n        clone._data = this._data.clone();\n\n        return clone;\n      },\n\n      _minBufferSize: 0 });\n\n\n    /**\n                             * Abstract hasher template.\n                             *\n                             * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n                             */\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n      /**\n                                                                 * Configuration options.\n                                                                 */\n      cfg: Base.extend(),\n\n      /**\n                           * Initializes a newly created hasher.\n                           *\n                           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n                           *\n                           * @example\n                           *\n                           *     var hasher = CryptoJS.algo.SHA256.create();\n                           */\n      init: function init(cfg) {\n        // Apply config defaults\n        this.cfg = this.cfg.extend(cfg);\n\n        // Set initial values\n        this.reset();\n      },\n\n      /**\n          * Resets this hasher to its initial state.\n          *\n          * @example\n          *\n          *     hasher.reset();\n          */\n      reset: function reset() {\n        // Reset data buffer\n        BufferedBlockAlgorithm.reset.call(this);\n\n        // Perform concrete-hasher logic\n        this._doReset();\n      },\n\n      /**\n          * Updates this hasher with a message.\n          *\n          * @param {WordArray|string} messageUpdate The message to append.\n          *\n          * @return {Hasher} This hasher.\n          *\n          * @example\n          *\n          *     hasher.update('message');\n          *     hasher.update(wordArray);\n          */\n      update: function update(messageUpdate) {\n        // Append\n        this._append(messageUpdate);\n\n        // Update the hash\n        this._process();\n\n        // Chainable\n        return this;\n      },\n\n      /**\n          * Finalizes the hash computation.\n          * Note that the finalize operation is effectively a destructive, read-once operation.\n          *\n          * @param {WordArray|string} messageUpdate (Optional) A final message update.\n          *\n          * @return {WordArray} The hash.\n          *\n          * @example\n          *\n          *     var hash = hasher.finalize();\n          *     var hash = hasher.finalize('message');\n          *     var hash = hasher.finalize(wordArray);\n          */\n      finalize: function finalize(messageUpdate) {\n        // Final message update\n        if (messageUpdate) {\n          this._append(messageUpdate);\n        }\n\n        // Perform concrete-hasher logic\n        var hash = this._doFinalize();\n\n        return hash;\n      },\n\n      blockSize: 512 / 32,\n\n      /**\n                            * Creates a shortcut function to a hasher's object interface.\n                            *\n                            * @param {Hasher} hasher The hasher to create a helper for.\n                            *\n                            * @return {Function} The shortcut function.\n                            *\n                            * @static\n                            *\n                            * @example\n                            *\n                            *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n                            */\n      _createHelper: function _createHelper(hasher) {\n        return function (message, cfg) {\n          return new hasher.init(cfg).finalize(message);\n        };\n      },\n\n      /**\n          * Creates a shortcut function to the HMAC's object interface.\n          *\n          * @param {Hasher} hasher The hasher to use in this HMAC helper.\n          *\n          * @return {Function} The shortcut function.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n          */\n      _createHmacHelper: function _createHmacHelper(hasher) {\n        return function (message, key) {\n          return new C_algo.HMAC.init(hasher, key).finalize(message);\n        };\n      } });\n\n\n    /**\n             * Algorithm namespace.\n             */\n    var C_algo = C.algo = {};\n\n    return C;\n  }(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n                        * Base64 encoding strategy.\n                        */\n    var Base64 = C_enc.Base64 = {\n      /**\n                                   * Converts a word array to a Base64 string.\n                                   *\n                                   * @param {WordArray} wordArray The word array.\n                                   *\n                                   * @return {string} The Base64 string.\n                                   *\n                                   * @static\n                                   *\n                                   * @example\n                                   *\n                                   *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n                                   */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n        var map = this._map;\n\n        // Clamp excess bits\n        wordArray.clamp();\n\n        // Convert\n        var base64Chars = [];\n        for (var i = 0; i < sigBytes; i += 3) {\n          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n\n          var triplet = byte1 << 16 | byte2 << 8 | byte3;\n\n          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {\n            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n          }\n        }\n\n        // Add padding\n        var paddingChar = map.charAt(64);\n        if (paddingChar) {\n          while (base64Chars.length % 4) {\n            base64Chars.push(paddingChar);\n          }\n        }\n\n        return base64Chars.join('');\n      },\n\n      /**\n          * Converts a Base64 string to a word array.\n          *\n          * @param {string} base64Str The Base64 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n          */\n      parse: function parse(base64Str) {\n        // Shortcuts\n        var base64StrLength = base64Str.length;\n        var map = this._map;\n        var reverseMap = this._reverseMap;\n\n        if (!reverseMap) {\n          reverseMap = this._reverseMap = [];\n          for (var j = 0; j < map.length; j++) {\n            reverseMap[map.charCodeAt(j)] = j;\n          }\n        }\n\n        // Ignore padding\n        var paddingChar = map.charAt(64);\n        if (paddingChar) {\n          var paddingIndex = base64Str.indexOf(paddingChar);\n          if (paddingIndex !== -1) {\n            base64StrLength = paddingIndex;\n          }\n        }\n\n        // Convert\n        return parseLoop(base64Str, base64StrLength, reverseMap);\n\n      },\n\n      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=' };\n\n\n    function parseLoop(base64Str, base64StrLength, reverseMap) {\n      var words = [];\n      var nBytes = 0;\n      for (var i = 0; i < base64StrLength; i++) {\n        if (i % 4) {\n          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n          words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;\n          nBytes++;\n        }\n      }\n      return WordArray.create(words, nBytes);\n    }\n  })();\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Constants table\n    var T = [];\n\n    // Compute constants\n    (function () {\n      for (var i = 0; i < 64; i++) {\n        T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;\n      }\n    })();\n\n    /**\n           * MD5 hash algorithm.\n           */\n    var MD5 = C_algo.MD5 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init([\n        0x67452301, 0xefcdab89,\n        0x98badcfe, 0x10325476]);\n\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Swap endian\n        for (var i = 0; i < 16; i++) {\n          // Shortcuts\n          var offset_i = offset + i;\n          var M_offset_i = M[offset_i];\n\n          M[offset_i] =\n          (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff |\n          (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;\n\n        }\n\n        // Shortcuts\n        var H = this._hash.words;\n\n        var M_offset_0 = M[offset + 0];\n        var M_offset_1 = M[offset + 1];\n        var M_offset_2 = M[offset + 2];\n        var M_offset_3 = M[offset + 3];\n        var M_offset_4 = M[offset + 4];\n        var M_offset_5 = M[offset + 5];\n        var M_offset_6 = M[offset + 6];\n        var M_offset_7 = M[offset + 7];\n        var M_offset_8 = M[offset + 8];\n        var M_offset_9 = M[offset + 9];\n        var M_offset_10 = M[offset + 10];\n        var M_offset_11 = M[offset + 11];\n        var M_offset_12 = M[offset + 12];\n        var M_offset_13 = M[offset + 13];\n        var M_offset_14 = M[offset + 14];\n        var M_offset_15 = M[offset + 15];\n\n        // Working varialbes\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n\n        // Computation\n        a = FF(a, b, c, d, M_offset_0, 7, T[0]);\n        d = FF(d, a, b, c, M_offset_1, 12, T[1]);\n        c = FF(c, d, a, b, M_offset_2, 17, T[2]);\n        b = FF(b, c, d, a, M_offset_3, 22, T[3]);\n        a = FF(a, b, c, d, M_offset_4, 7, T[4]);\n        d = FF(d, a, b, c, M_offset_5, 12, T[5]);\n        c = FF(c, d, a, b, M_offset_6, 17, T[6]);\n        b = FF(b, c, d, a, M_offset_7, 22, T[7]);\n        a = FF(a, b, c, d, M_offset_8, 7, T[8]);\n        d = FF(d, a, b, c, M_offset_9, 12, T[9]);\n        c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n        b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n        a = FF(a, b, c, d, M_offset_12, 7, T[12]);\n        d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n        c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n        b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n        a = GG(a, b, c, d, M_offset_1, 5, T[16]);\n        d = GG(d, a, b, c, M_offset_6, 9, T[17]);\n        c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n        b = GG(b, c, d, a, M_offset_0, 20, T[19]);\n        a = GG(a, b, c, d, M_offset_5, 5, T[20]);\n        d = GG(d, a, b, c, M_offset_10, 9, T[21]);\n        c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n        b = GG(b, c, d, a, M_offset_4, 20, T[23]);\n        a = GG(a, b, c, d, M_offset_9, 5, T[24]);\n        d = GG(d, a, b, c, M_offset_14, 9, T[25]);\n        c = GG(c, d, a, b, M_offset_3, 14, T[26]);\n        b = GG(b, c, d, a, M_offset_8, 20, T[27]);\n        a = GG(a, b, c, d, M_offset_13, 5, T[28]);\n        d = GG(d, a, b, c, M_offset_2, 9, T[29]);\n        c = GG(c, d, a, b, M_offset_7, 14, T[30]);\n        b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n        a = HH(a, b, c, d, M_offset_5, 4, T[32]);\n        d = HH(d, a, b, c, M_offset_8, 11, T[33]);\n        c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n        b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n        a = HH(a, b, c, d, M_offset_1, 4, T[36]);\n        d = HH(d, a, b, c, M_offset_4, 11, T[37]);\n        c = HH(c, d, a, b, M_offset_7, 16, T[38]);\n        b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n        a = HH(a, b, c, d, M_offset_13, 4, T[40]);\n        d = HH(d, a, b, c, M_offset_0, 11, T[41]);\n        c = HH(c, d, a, b, M_offset_3, 16, T[42]);\n        b = HH(b, c, d, a, M_offset_6, 23, T[43]);\n        a = HH(a, b, c, d, M_offset_9, 4, T[44]);\n        d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n        c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n        b = HH(b, c, d, a, M_offset_2, 23, T[47]);\n\n        a = II(a, b, c, d, M_offset_0, 6, T[48]);\n        d = II(d, a, b, c, M_offset_7, 10, T[49]);\n        c = II(c, d, a, b, M_offset_14, 15, T[50]);\n        b = II(b, c, d, a, M_offset_5, 21, T[51]);\n        a = II(a, b, c, d, M_offset_12, 6, T[52]);\n        d = II(d, a, b, c, M_offset_3, 10, T[53]);\n        c = II(c, d, a, b, M_offset_10, 15, T[54]);\n        b = II(b, c, d, a, M_offset_1, 21, T[55]);\n        a = II(a, b, c, d, M_offset_8, 6, T[56]);\n        d = II(d, a, b, c, M_offset_15, 10, T[57]);\n        c = II(c, d, a, b, M_offset_6, 15, T[58]);\n        b = II(b, c, d, a, M_offset_13, 21, T[59]);\n        a = II(a, b, c, d, M_offset_4, 6, T[60]);\n        d = II(d, a, b, c, M_offset_11, 10, T[61]);\n        c = II(c, d, a, b, M_offset_2, 15, T[62]);\n        b = II(b, c, d, a, M_offset_9, 21, T[63]);\n\n        // Intermediate hash value\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n\n        var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n        var nBitsTotalL = nBitsTotal;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] =\n        (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff |\n        (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;\n\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] =\n        (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff |\n        (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;\n\n\n        data.sigBytes = (dataWords.length + 1) * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Shortcuts\n        var hash = this._hash;\n        var H = hash.words;\n\n        // Swap endian\n        for (var i = 0; i < 4; i++) {\n          // Shortcut\n          var H_i = H[i];\n\n          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff |\n          (H_i << 24 | H_i >>> 8) & 0xff00ff00;\n        }\n\n        // Return final computed hash\n        return hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n    function FF(a, b, c, d, x, s, t) {\n      var n = a + (b & c | ~b & d) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    function GG(a, b, c, d, x, s, t) {\n      var n = a + (b & d | c & ~d) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    function HH(a, b, c, d, x, s, t) {\n      var n = a + (b ^ c ^ d) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    function II(a, b, c, d, x, s, t) {\n      var n = a + (c ^ (b | ~d)) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    /**\n       * Shortcut function to the hasher's object interface.\n       *\n       * @param {WordArray|string} message The message to hash.\n       *\n       * @return {WordArray} The hash.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var hash = CryptoJS.MD5('message');\n       *     var hash = CryptoJS.MD5(wordArray);\n       */\n    C.MD5 = Hasher._createHelper(MD5);\n\n    /**\n                                        * Shortcut function to the HMAC's object interface.\n                                        *\n                                        * @param {WordArray|string} message The message to hash.\n                                        * @param {WordArray|string} key The secret key.\n                                        *\n                                        * @return {WordArray} The HMAC.\n                                        *\n                                        * @static\n                                        *\n                                        * @example\n                                        *\n                                        *     var hmac = CryptoJS.HmacMD5(message, key);\n                                        */\n    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Reusable object\n    var W = [];\n\n    /**\n                 * SHA-1 hash algorithm.\n                 */\n    var SHA1 = C_algo.SHA1 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init([\n        0x67452301, 0xefcdab89,\n        0x98badcfe, 0x10325476,\n        0xc3d2e1f0]);\n\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var H = this._hash.words;\n\n        // Working variables\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n        var e = H[4];\n\n        // Computation\n        for (var i = 0; i < 80; i++) {\n          if (i < 16) {\n            W[i] = M[offset + i] | 0;\n          } else {\n            var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n            W[i] = n << 1 | n >>> 31;\n          }\n\n          var t = (a << 5 | a >>> 27) + e + W[i];\n          if (i < 20) {\n            t += (b & c | ~b & d) + 0x5a827999;\n          } else if (i < 40) {\n            t += (b ^ c ^ d) + 0x6ed9eba1;\n          } else if (i < 60) {\n            t += (b & c | b & d | c & d) - 0x70e44324;\n          } else /* if (i < 80) */{\n              t += (b ^ c ^ d) - 0x359d3e2a;\n            }\n\n          e = d;\n          d = c;\n          c = b << 30 | b >>> 2;\n          b = a;\n          a = t;\n        }\n\n        // Intermediate hash value\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n        H[4] = H[4] + e | 0;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Return final computed hash\n        return this._hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA1('message');\n             *     var hash = CryptoJS.SHA1(wordArray);\n             */\n    C.SHA1 = Hasher._createHelper(SHA1);\n\n    /**\n                                          * Shortcut function to the HMAC's object interface.\n                                          *\n                                          * @param {WordArray|string} message The message to hash.\n                                          * @param {WordArray|string} key The secret key.\n                                          *\n                                          * @return {WordArray} The HMAC.\n                                          *\n                                          * @static\n                                          *\n                                          * @example\n                                          *\n                                          *     var hmac = CryptoJS.HmacSHA1(message, key);\n                                          */\n    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n  })();\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Initialization and round constants tables\n    var H = [];\n    var K = [];\n\n    // Compute constants\n    (function () {\n      function isPrime(n) {\n        var sqrtN = Math.sqrt(n);\n        for (var factor = 2; factor <= sqrtN; factor++) {\n          if (!(n % factor)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function getFractionalBits(n) {\n        return (n - (n | 0)) * 0x100000000 | 0;\n      }\n\n      var n = 2;\n      var nPrime = 0;\n      while (nPrime < 64) {\n        if (isPrime(n)) {\n          if (nPrime < 8) {\n            H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n          }\n          K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n          nPrime++;\n        }\n\n        n++;\n      }\n    })();\n\n    // Reusable object\n    var W = [];\n\n    /**\n                 * SHA-256 hash algorithm.\n                 */\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init(H.slice(0));\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var H = this._hash.words;\n\n        // Working variables\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n        var e = H[4];\n        var f = H[5];\n        var g = H[6];\n        var h = H[7];\n\n        // Computation\n        for (var i = 0; i < 64; i++) {\n          if (i < 16) {\n            W[i] = M[offset + i] | 0;\n          } else {\n            var gamma0x = W[i - 15];\n            var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (\n            gamma0x << 14 | gamma0x >>> 18) ^\n            gamma0x >>> 3;\n\n            var gamma1x = W[i - 2];\n            var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (\n            gamma1x << 13 | gamma1x >>> 19) ^\n            gamma1x >>> 10;\n\n            W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n          }\n\n          var ch = e & f ^ ~e & g;\n          var maj = a & b ^ a & c ^ b & c;\n\n          var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n          var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n\n          var t1 = h + sigma1 + ch + K[i] + W[i];\n          var t2 = sigma0 + maj;\n\n          h = g;\n          g = f;\n          f = e;\n          e = d + t1 | 0;\n          d = c;\n          c = b;\n          b = a;\n          a = t1 + t2 | 0;\n        }\n\n        // Intermediate hash value\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n        H[4] = H[4] + e | 0;\n        H[5] = H[5] + f | 0;\n        H[6] = H[6] + g | 0;\n        H[7] = H[7] + h | 0;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Return final computed hash\n        return this._hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA256('message');\n             *     var hash = CryptoJS.SHA256(wordArray);\n             */\n    C.SHA256 = Hasher._createHelper(SHA256);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA256(message, key);\n                                              */\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n                        * UTF-16 BE encoding strategy.\n                        */\n    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n      /**\n                                                   * Converts a word array to a UTF-16 BE string.\n                                                   *\n                                                   * @param {WordArray} wordArray The word array.\n                                                   *\n                                                   * @return {string} The UTF-16 BE string.\n                                                   *\n                                                   * @static\n                                                   *\n                                                   * @example\n                                                   *\n                                                   *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n                                                   */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var utf16Chars = [];\n        for (var i = 0; i < sigBytes; i += 2) {\n          var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;\n          utf16Chars.push(String.fromCharCode(codePoint));\n        }\n\n        return utf16Chars.join('');\n      },\n\n      /**\n          * Converts a UTF-16 BE string to a word array.\n          *\n          * @param {string} utf16Str The UTF-16 BE string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n          */\n      parse: function parse(utf16Str) {\n        // Shortcut\n        var utf16StrLength = utf16Str.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < utf16StrLength; i++) {\n          words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;\n        }\n\n        return WordArray.create(words, utf16StrLength * 2);\n      } };\n\n\n    /**\n            * UTF-16 LE encoding strategy.\n            */\n    C_enc.Utf16LE = {\n      /**\n                       * Converts a word array to a UTF-16 LE string.\n                       *\n                       * @param {WordArray} wordArray The word array.\n                       *\n                       * @return {string} The UTF-16 LE string.\n                       *\n                       * @static\n                       *\n                       * @example\n                       *\n                       *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n                       */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var utf16Chars = [];\n        for (var i = 0; i < sigBytes; i += 2) {\n          var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);\n          utf16Chars.push(String.fromCharCode(codePoint));\n        }\n\n        return utf16Chars.join('');\n      },\n\n      /**\n          * Converts a UTF-16 LE string to a word array.\n          *\n          * @param {string} utf16Str The UTF-16 LE string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n          */\n      parse: function parse(utf16Str) {\n        // Shortcut\n        var utf16StrLength = utf16Str.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < utf16StrLength; i++) {\n          words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);\n        }\n\n        return WordArray.create(words, utf16StrLength * 2);\n      } };\n\n\n    function swapEndian(word) {\n      return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;\n    }\n  })();\n\n\n  (function () {\n    // Check if typed arrays are supported\n    if (typeof ArrayBuffer != 'function') {\n      return;\n    }\n\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n\n    // Reference original init\n    var superInit = WordArray.init;\n\n    // Augment WordArray.init to handle typed arrays\n    var subInit = WordArray.init = function (typedArray) {\n      // Convert buffers to uint8\n      if (typedArray instanceof ArrayBuffer) {\n        typedArray = new Uint8Array(typedArray);\n      }\n\n      // Convert other array views to uint8\n      if (\n      typedArray instanceof Int8Array ||\n      typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray ||\n      typedArray instanceof Int16Array ||\n      typedArray instanceof Uint16Array ||\n      typedArray instanceof Int32Array ||\n      typedArray instanceof Uint32Array ||\n      typedArray instanceof Float32Array ||\n      typedArray instanceof Float64Array)\n      {\n        typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n      }\n\n      // Handle Uint8Array\n      if (typedArray instanceof Uint8Array) {\n        // Shortcut\n        var typedArrayByteLength = typedArray.byteLength;\n\n        // Extract bytes\n        var words = [];\n        for (var i = 0; i < typedArrayByteLength; i++) {\n          words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;\n        }\n\n        // Initialize this word array\n        superInit.call(this, words, typedArrayByteLength);\n      } else {\n        // Else call normal init\n        superInit.apply(this, arguments);\n      }\n    };\n\n    subInit.prototype = WordArray;\n  })();\n\n\n  /** @preserve\n        (c) 2012 by Cédric Mesnil. All rights reserved.\n        \tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n        \t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n            - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n        \tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        */\n\n\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Constants table\n    var _zl = WordArray.create([\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);\n    var _zr = WordArray.create([\n    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);\n    var _sl = WordArray.create([\n    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);\n    var _sr = WordArray.create([\n    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);\n\n    var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);\n    var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);\n\n    /**\n                                                                                               * RIPEMD160 hash algorithm.\n                                                                                               */\n    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n\n        // Swap endian\n        for (var i = 0; i < 16; i++) {\n          // Shortcuts\n          var offset_i = offset + i;\n          var M_offset_i = M[offset_i];\n\n          // Swap\n          M[offset_i] =\n          (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff |\n          (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;\n\n        }\n        // Shortcut\n        var H = this._hash.words;\n        var hl = _hl.words;\n        var hr = _hr.words;\n        var zl = _zl.words;\n        var zr = _zr.words;\n        var sl = _sl.words;\n        var sr = _sr.words;\n\n        // Working variables\n        var al, bl, cl, dl, el;\n        var ar, br, cr, dr, er;\n\n        ar = al = H[0];\n        br = bl = H[1];\n        cr = cl = H[2];\n        dr = dl = H[3];\n        er = el = H[4];\n        // Computation\n        var t;\n        for (var i = 0; i < 80; i += 1) {\n          t = al + M[offset + zl[i]] | 0;\n          if (i < 16) {\n            t += f1(bl, cl, dl) + hl[0];\n          } else if (i < 32) {\n            t += f2(bl, cl, dl) + hl[1];\n          } else if (i < 48) {\n            t += f3(bl, cl, dl) + hl[2];\n          } else if (i < 64) {\n            t += f4(bl, cl, dl) + hl[3];\n          } else {// if (i<80) {\n            t += f5(bl, cl, dl) + hl[4];\n          }\n          t = t | 0;\n          t = rotl(t, sl[i]);\n          t = t + el | 0;\n          al = el;\n          el = dl;\n          dl = rotl(cl, 10);\n          cl = bl;\n          bl = t;\n\n          t = ar + M[offset + zr[i]] | 0;\n          if (i < 16) {\n            t += f5(br, cr, dr) + hr[0];\n          } else if (i < 32) {\n            t += f4(br, cr, dr) + hr[1];\n          } else if (i < 48) {\n            t += f3(br, cr, dr) + hr[2];\n          } else if (i < 64) {\n            t += f2(br, cr, dr) + hr[3];\n          } else {// if (i<80) {\n            t += f1(br, cr, dr) + hr[4];\n          }\n          t = t | 0;\n          t = rotl(t, sr[i]);\n          t = t + er | 0;\n          ar = er;\n          er = dr;\n          dr = rotl(cr, 10);\n          cr = br;\n          br = t;\n        }\n        // Intermediate hash value\n        t = H[1] + cl + dr | 0;\n        H[1] = H[2] + dl + er | 0;\n        H[2] = H[3] + el + ar | 0;\n        H[3] = H[4] + al + br | 0;\n        H[4] = H[0] + bl + cr | 0;\n        H[0] = t;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] =\n        (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff |\n        (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;\n\n        data.sigBytes = (dataWords.length + 1) * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Shortcuts\n        var hash = this._hash;\n        var H = hash.words;\n\n        // Swap endian\n        for (var i = 0; i < 5; i++) {\n          // Shortcut\n          var H_i = H[i];\n\n          // Swap\n          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff |\n          (H_i << 24 | H_i >>> 8) & 0xff00ff00;\n        }\n\n        // Return final computed hash\n        return hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n\n    function f1(x, y, z) {\n      return x ^ y ^ z;\n\n    }\n\n    function f2(x, y, z) {\n      return x & y | ~x & z;\n    }\n\n    function f3(x, y, z) {\n      return (x | ~y) ^ z;\n    }\n\n    function f4(x, y, z) {\n      return x & z | y & ~z;\n    }\n\n    function f5(x, y, z) {\n      return x ^ (y | ~z);\n\n    }\n\n    function rotl(x, n) {\n      return x << n | x >>> 32 - n;\n    }\n\n\n    /**\n       * Shortcut function to the hasher's object interface.\n       *\n       * @param {WordArray|string} message The message to hash.\n       *\n       * @return {WordArray} The hash.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var hash = CryptoJS.RIPEMD160('message');\n       *     var hash = CryptoJS.RIPEMD160(wordArray);\n       */\n    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);\n\n    /**\n                                                    * Shortcut function to the HMAC's object interface.\n                                                    *\n                                                    * @param {WordArray|string} message The message to hash.\n                                                    * @param {WordArray|string} key The secret key.\n                                                    *\n                                                    * @return {WordArray} The HMAC.\n                                                    *\n                                                    * @static\n                                                    *\n                                                    * @example\n                                                    *\n                                                    *     var hmac = CryptoJS.HmacRIPEMD160(message, key);\n                                                    */\n    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\n                          * HMAC algorithm.\n                          */\n    var HMAC = C_algo.HMAC = Base.extend({\n      /**\n                                            * Initializes a newly created HMAC.\n                                            *\n                                            * @param {Hasher} hasher The hash algorithm to use.\n                                            * @param {WordArray|string} key The secret key.\n                                            *\n                                            * @example\n                                            *\n                                            *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n                                            */\n      init: function init(hasher, key) {\n        // Init hasher\n        hasher = this._hasher = new hasher.init();\n\n        // Convert string to WordArray, else assume WordArray already\n        if (typeof key == 'string') {\n          key = Utf8.parse(key);\n        }\n\n        // Shortcuts\n        var hasherBlockSize = hasher.blockSize;\n        var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n        // Allow arbitrary length keys\n        if (key.sigBytes > hasherBlockSizeBytes) {\n          key = hasher.finalize(key);\n        }\n\n        // Clamp excess bits\n        key.clamp();\n\n        // Clone key for inner and outer pads\n        var oKey = this._oKey = key.clone();\n        var iKey = this._iKey = key.clone();\n\n        // Shortcuts\n        var oKeyWords = oKey.words;\n        var iKeyWords = iKey.words;\n\n        // XOR keys with pad constants\n        for (var i = 0; i < hasherBlockSize; i++) {\n          oKeyWords[i] ^= 0x5c5c5c5c;\n          iKeyWords[i] ^= 0x36363636;\n        }\n        oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n        // Set initial values\n        this.reset();\n      },\n\n      /**\n          * Resets this HMAC to its initial state.\n          *\n          * @example\n          *\n          *     hmacHasher.reset();\n          */\n      reset: function reset() {\n        // Shortcut\n        var hasher = this._hasher;\n\n        // Reset\n        hasher.reset();\n        hasher.update(this._iKey);\n      },\n\n      /**\n          * Updates this HMAC with a message.\n          *\n          * @param {WordArray|string} messageUpdate The message to append.\n          *\n          * @return {HMAC} This HMAC instance.\n          *\n          * @example\n          *\n          *     hmacHasher.update('message');\n          *     hmacHasher.update(wordArray);\n          */\n      update: function update(messageUpdate) {\n        this._hasher.update(messageUpdate);\n\n        // Chainable\n        return this;\n      },\n\n      /**\n          * Finalizes the HMAC computation.\n          * Note that the finalize operation is effectively a destructive, read-once operation.\n          *\n          * @param {WordArray|string} messageUpdate (Optional) A final message update.\n          *\n          * @return {WordArray} The HMAC.\n          *\n          * @example\n          *\n          *     var hmac = hmacHasher.finalize();\n          *     var hmac = hmacHasher.finalize('message');\n          *     var hmac = hmacHasher.finalize(wordArray);\n          */\n      finalize: function finalize(messageUpdate) {\n        // Shortcut\n        var hasher = this._hasher;\n\n        // Compute HMAC\n        var innerHash = hasher.finalize(messageUpdate);\n        hasher.reset();\n        var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n        return hmac;\n      } });\n\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var SHA1 = C_algo.SHA1;\n    var HMAC = C_algo.HMAC;\n\n    /**\n                             * Password-Based Key Derivation Function 2 algorithm.\n                             */\n    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n      /**\n                                                * Configuration options.\n                                                *\n                                                * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n                                                * @property {Hasher} hasher The hasher to use. Default: SHA1\n                                                * @property {number} iterations The number of iterations to perform. Default: 1\n                                                */\n      cfg: Base.extend({\n        keySize: 128 / 32,\n        hasher: SHA1,\n        iterations: 1 }),\n\n\n      /**\n                           * Initializes a newly created key derivation function.\n                           *\n                           * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n                           *\n                           * @example\n                           *\n                           *     var kdf = CryptoJS.algo.PBKDF2.create();\n                           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n                           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n                           */\n      init: function init(cfg) {\n        this.cfg = this.cfg.extend(cfg);\n      },\n\n      /**\n          * Computes the Password-Based Key Derivation Function 2.\n          *\n          * @param {WordArray|string} password The password.\n          * @param {WordArray|string} salt A salt.\n          *\n          * @return {WordArray} The derived key.\n          *\n          * @example\n          *\n          *     var key = kdf.compute(password, salt);\n          */\n      compute: function compute(password, salt) {\n        // Shortcut\n        var cfg = this.cfg;\n\n        // Init HMAC\n        var hmac = HMAC.create(cfg.hasher, password);\n\n        // Initial values\n        var derivedKey = WordArray.create();\n        var blockIndex = WordArray.create([0x00000001]);\n\n        // Shortcuts\n        var derivedKeyWords = derivedKey.words;\n        var blockIndexWords = blockIndex.words;\n        var keySize = cfg.keySize;\n        var iterations = cfg.iterations;\n\n        // Generate key\n        while (derivedKeyWords.length < keySize) {\n          var block = hmac.update(salt).finalize(blockIndex);\n          hmac.reset();\n\n          // Shortcuts\n          var blockWords = block.words;\n          var blockWordsLength = blockWords.length;\n\n          // Iterations\n          var intermediate = block;\n          for (var i = 1; i < iterations; i++) {\n            intermediate = hmac.finalize(intermediate);\n            hmac.reset();\n\n            // Shortcut\n            var intermediateWords = intermediate.words;\n\n            // XOR intermediate with block\n            for (var j = 0; j < blockWordsLength; j++) {\n              blockWords[j] ^= intermediateWords[j];\n            }\n          }\n\n          derivedKey.concat(block);\n          blockIndexWords[0]++;\n        }\n        derivedKey.sigBytes = keySize * 4;\n\n        return derivedKey;\n      } });\n\n\n    /**\n             * Computes the Password-Based Key Derivation Function 2.\n             *\n             * @param {WordArray|string} password The password.\n             * @param {WordArray|string} salt A salt.\n             * @param {Object} cfg (Optional) The configuration options to use for this computation.\n             *\n             * @return {WordArray} The derived key.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var key = CryptoJS.PBKDF2(password, salt);\n             *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n             *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n             */\n    C.PBKDF2 = function (password, salt, cfg) {\n      return PBKDF2.create(cfg).compute(password, salt);\n    };\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var MD5 = C_algo.MD5;\n\n    /**\n                           * This key derivation function is meant to conform with EVP_BytesToKey.\n                           * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n                           */\n    var EvpKDF = C_algo.EvpKDF = Base.extend({\n      /**\n                                                * Configuration options.\n                                                *\n                                                * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n                                                * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n                                                * @property {number} iterations The number of iterations to perform. Default: 1\n                                                */\n      cfg: Base.extend({\n        keySize: 128 / 32,\n        hasher: MD5,\n        iterations: 1 }),\n\n\n      /**\n                           * Initializes a newly created key derivation function.\n                           *\n                           * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n                           *\n                           * @example\n                           *\n                           *     var kdf = CryptoJS.algo.EvpKDF.create();\n                           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n                           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n                           */\n      init: function init(cfg) {\n        this.cfg = this.cfg.extend(cfg);\n      },\n\n      /**\n          * Derives a key from a password.\n          *\n          * @param {WordArray|string} password The password.\n          * @param {WordArray|string} salt A salt.\n          *\n          * @return {WordArray} The derived key.\n          *\n          * @example\n          *\n          *     var key = kdf.compute(password, salt);\n          */\n      compute: function compute(password, salt) {\n        // Shortcut\n        var cfg = this.cfg;\n\n        // Init hasher\n        var hasher = cfg.hasher.create();\n\n        // Initial values\n        var derivedKey = WordArray.create();\n\n        // Shortcuts\n        var derivedKeyWords = derivedKey.words;\n        var keySize = cfg.keySize;\n        var iterations = cfg.iterations;\n\n        // Generate key\n        while (derivedKeyWords.length < keySize) {\n          if (block) {\n            hasher.update(block);\n          }\n          var block = hasher.update(password).finalize(salt);\n          hasher.reset();\n\n          // Iterations\n          for (var i = 1; i < iterations; i++) {\n            block = hasher.finalize(block);\n            hasher.reset();\n          }\n\n          derivedKey.concat(block);\n        }\n        derivedKey.sigBytes = keySize * 4;\n\n        return derivedKey;\n      } });\n\n\n    /**\n             * Derives a key from a password.\n             *\n             * @param {WordArray|string} password The password.\n             * @param {WordArray|string} salt A salt.\n             * @param {Object} cfg (Optional) The configuration options to use for this computation.\n             *\n             * @return {WordArray} The derived key.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var key = CryptoJS.EvpKDF(password, salt);\n             *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n             *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n             */\n    C.EvpKDF = function (password, salt, cfg) {\n      return EvpKDF.create(cfg).compute(password, salt);\n    };\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var SHA256 = C_algo.SHA256;\n\n    /**\n                                 * SHA-224 hash algorithm.\n                                 */\n    var SHA224 = C_algo.SHA224 = SHA256.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init([\n        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);\n\n      },\n\n      _doFinalize: function _doFinalize() {\n        var hash = SHA256._doFinalize.call(this);\n\n        hash.sigBytes -= 4;\n\n        return hash;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA224('message');\n             *     var hash = CryptoJS.SHA224(wordArray);\n             */\n    C.SHA224 = SHA256._createHelper(SHA224);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA224(message, key);\n                                              */\n    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);\n  })();\n\n\n  (function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var X32WordArray = C_lib.WordArray;\n\n    /**\n                                         * x64 namespace.\n                                         */\n    var C_x64 = C.x64 = {};\n\n    /**\n                             * A 64-bit word.\n                             */\n    var X64Word = C_x64.Word = Base.extend({\n      /**\n                                              * Initializes a newly created 64-bit word.\n                                              *\n                                              * @param {number} high The high 32 bits.\n                                              * @param {number} low The low 32 bits.\n                                              *\n                                              * @example\n                                              *\n                                              *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n                                              */\n      init: function init(high, low) {\n        this.high = high;\n        this.low = low;\n      }\n\n      /**\n         * Bitwise NOTs this word.\n         *\n         * @return {X64Word} A new x64-Word object after negating.\n         *\n         * @example\n         *\n         *     var negated = x64Word.not();\n         */\n      // not: function () {\n      // var high = ~this.high;\n      // var low = ~this.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Bitwise ANDs this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to AND with this word.\n       *\n       * @return {X64Word} A new x64-Word object after ANDing.\n       *\n       * @example\n       *\n       *     var anded = x64Word.and(anotherX64Word);\n       */\n      // and: function (word) {\n      // var high = this.high & word.high;\n      // var low = this.low & word.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Bitwise ORs this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to OR with this word.\n       *\n       * @return {X64Word} A new x64-Word object after ORing.\n       *\n       * @example\n       *\n       *     var ored = x64Word.or(anotherX64Word);\n       */\n      // or: function (word) {\n      // var high = this.high | word.high;\n      // var low = this.low | word.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Bitwise XORs this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to XOR with this word.\n       *\n       * @return {X64Word} A new x64-Word object after XORing.\n       *\n       * @example\n       *\n       *     var xored = x64Word.xor(anotherX64Word);\n       */\n      // xor: function (word) {\n      // var high = this.high ^ word.high;\n      // var low = this.low ^ word.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Shifts this word n bits to the left.\n       *\n       * @param {number} n The number of bits to shift.\n       *\n       * @return {X64Word} A new x64-Word object after shifting.\n       *\n       * @example\n       *\n       *     var shifted = x64Word.shiftL(25);\n       */\n      // shiftL: function (n) {\n      // if (n < 32) {\n      // var high = (this.high << n) | (this.low >>> (32 - n));\n      // var low = this.low << n;\n      // } else {\n      // var high = this.low << (n - 32);\n      // var low = 0;\n      // }\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Shifts this word n bits to the right.\n       *\n       * @param {number} n The number of bits to shift.\n       *\n       * @return {X64Word} A new x64-Word object after shifting.\n       *\n       * @example\n       *\n       *     var shifted = x64Word.shiftR(7);\n       */\n      // shiftR: function (n) {\n      // if (n < 32) {\n      // var low = (this.low >>> n) | (this.high << (32 - n));\n      // var high = this.high >>> n;\n      // } else {\n      // var low = this.high >>> (n - 32);\n      // var high = 0;\n      // }\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Rotates this word n bits to the left.\n       *\n       * @param {number} n The number of bits to rotate.\n       *\n       * @return {X64Word} A new x64-Word object after rotating.\n       *\n       * @example\n       *\n       *     var rotated = x64Word.rotL(25);\n       */\n      // rotL: function (n) {\n      // return this.shiftL(n).or(this.shiftR(64 - n));\n      // },\n\n      /**\n       * Rotates this word n bits to the right.\n       *\n       * @param {number} n The number of bits to rotate.\n       *\n       * @return {X64Word} A new x64-Word object after rotating.\n       *\n       * @example\n       *\n       *     var rotated = x64Word.rotR(7);\n       */\n      // rotR: function (n) {\n      // return this.shiftR(n).or(this.shiftL(64 - n));\n      // },\n\n      /**\n       * Adds this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to add with this word.\n       *\n       * @return {X64Word} A new x64-Word object after adding.\n       *\n       * @example\n       *\n       *     var added = x64Word.add(anotherX64Word);\n       */\n      // add: function (word) {\n      // var low = (this.low + word.low) | 0;\n      // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n      // var high = (this.high + word.high + carry) | 0;\n\n      // return X64Word.create(high, low);\n      // }\n    });\n\n    /**\n         * An array of 64-bit words.\n         *\n         * @property {Array} words The array of CryptoJS.x64.Word objects.\n         * @property {number} sigBytes The number of significant bytes in this word array.\n         */\n    var X64WordArray = C_x64.WordArray = Base.extend({\n      /**\n                                                        * Initializes a newly created word array.\n                                                        *\n                                                        * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n                                                        * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n                                                        *\n                                                        * @example\n                                                        *\n                                                        *     var wordArray = CryptoJS.x64.WordArray.create();\n                                                        *\n                                                        *     var wordArray = CryptoJS.x64.WordArray.create([\n                                                        *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n                                                        *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n                                                        *     ]);\n                                                        *\n                                                        *     var wordArray = CryptoJS.x64.WordArray.create([\n                                                        *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n                                                        *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n                                                        *     ], 10);\n                                                        */\n      init: function init(words, sigBytes) {\n        words = this.words = words || [];\n\n        if (sigBytes != undefined) {\n          this.sigBytes = sigBytes;\n        } else {\n          this.sigBytes = words.length * 8;\n        }\n      },\n\n      /**\n          * Converts this 64-bit word array to a 32-bit word array.\n          *\n          * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n          *\n          * @example\n          *\n          *     var x32WordArray = x64WordArray.toX32();\n          */\n      toX32: function toX32() {\n        // Shortcuts\n        var x64Words = this.words;\n        var x64WordsLength = x64Words.length;\n\n        // Convert\n        var x32Words = [];\n        for (var i = 0; i < x64WordsLength; i++) {\n          var x64Word = x64Words[i];\n          x32Words.push(x64Word.high);\n          x32Words.push(x64Word.low);\n        }\n\n        return X32WordArray.create(x32Words, this.sigBytes);\n      },\n\n      /**\n          * Creates a copy of this word array.\n          *\n          * @return {X64WordArray} The clone.\n          *\n          * @example\n          *\n          *     var clone = x64WordArray.clone();\n          */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n\n        // Clone \"words\" array\n        var words = clone.words = this.words.slice(0);\n\n        // Clone each X64Word object\n        var wordsLength = words.length;\n        for (var i = 0; i < wordsLength; i++) {\n          words[i] = words[i].clone();\n        }\n\n        return clone;\n      } });\n\n  })();\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_x64 = C.x64;\n    var X64Word = C_x64.Word;\n    var C_algo = C.algo;\n\n    // Constants tables\n    var RHO_OFFSETS = [];\n    var PI_INDEXES = [];\n    var ROUND_CONSTANTS = [];\n\n    // Compute Constants\n    (function () {\n      // Compute rho offset constants\n      var x = 1,y = 0;\n      for (var t = 0; t < 24; t++) {\n        RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;\n\n        var newX = y % 5;\n        var newY = (2 * x + 3 * y) % 5;\n        x = newX;\n        y = newY;\n      }\n\n      // Compute pi index constants\n      for (var x = 0; x < 5; x++) {\n        for (var y = 0; y < 5; y++) {\n          PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;\n        }\n      }\n\n      // Compute round constants\n      var LFSR = 0x01;\n      for (var i = 0; i < 24; i++) {\n        var roundConstantMsw = 0;\n        var roundConstantLsw = 0;\n\n        for (var j = 0; j < 7; j++) {\n          if (LFSR & 0x01) {\n            var bitPosition = (1 << j) - 1;\n            if (bitPosition < 32) {\n              roundConstantLsw ^= 1 << bitPosition;\n            } else /* if (bitPosition >= 32) */{\n                roundConstantMsw ^= 1 << bitPosition - 32;\n              }\n          }\n\n          // Compute next LFSR\n          if (LFSR & 0x80) {\n            // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n            LFSR = LFSR << 1 ^ 0x71;\n          } else {\n            LFSR <<= 1;\n          }\n        }\n\n        ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n      }\n    })();\n\n    // Reusable objects for temporary values\n    var T = [];\n    (function () {\n      for (var i = 0; i < 25; i++) {\n        T[i] = X64Word.create();\n      }\n    })();\n\n    /**\n           * SHA-3 hash algorithm.\n           */\n    var SHA3 = C_algo.SHA3 = Hasher.extend({\n      /**\n                                              * Configuration options.\n                                              *\n                                              * @property {number} outputLength\n                                              *   The desired number of bits in the output hash.\n                                              *   Only values permitted are: 224, 256, 384, 512.\n                                              *   Default: 512\n                                              */\n      cfg: Hasher.cfg.extend({\n        outputLength: 512 }),\n\n\n      _doReset: function _doReset() {\n        var state = this._state = [];\n        for (var i = 0; i < 25; i++) {\n          state[i] = new X64Word.init();\n        }\n\n        this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcuts\n        var state = this._state;\n        var nBlockSizeLanes = this.blockSize / 2;\n\n        // Absorb\n        for (var i = 0; i < nBlockSizeLanes; i++) {\n          // Shortcuts\n          var M2i = M[offset + 2 * i];\n          var M2i1 = M[offset + 2 * i + 1];\n\n          // Swap endian\n          M2i =\n          (M2i << 8 | M2i >>> 24) & 0x00ff00ff |\n          (M2i << 24 | M2i >>> 8) & 0xff00ff00;\n\n          M2i1 =\n          (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff |\n          (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00;\n\n\n          // Absorb message into state\n          var lane = state[i];\n          lane.high ^= M2i1;\n          lane.low ^= M2i;\n        }\n\n        // Rounds\n        for (var round = 0; round < 24; round++) {\n          // Theta\n          for (var x = 0; x < 5; x++) {\n            // Mix column lanes\n            var tMsw = 0,tLsw = 0;\n            for (var y = 0; y < 5; y++) {\n              var lane = state[x + 5 * y];\n              tMsw ^= lane.high;\n              tLsw ^= lane.low;\n            }\n\n            // Temporary values\n            var Tx = T[x];\n            Tx.high = tMsw;\n            Tx.low = tLsw;\n          }\n          for (var x = 0; x < 5; x++) {\n            // Shortcuts\n            var Tx4 = T[(x + 4) % 5];\n            var Tx1 = T[(x + 1) % 5];\n            var Tx1Msw = Tx1.high;\n            var Tx1Lsw = Tx1.low;\n\n            // Mix surrounding columns\n            var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);\n            var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);\n            for (var y = 0; y < 5; y++) {\n              var lane = state[x + 5 * y];\n              lane.high ^= tMsw;\n              lane.low ^= tLsw;\n            }\n          }\n\n          // Rho Pi\n          for (var laneIndex = 1; laneIndex < 25; laneIndex++) {\n            // Shortcuts\n            var lane = state[laneIndex];\n            var laneMsw = lane.high;\n            var laneLsw = lane.low;\n            var rhoOffset = RHO_OFFSETS[laneIndex];\n\n            // Rotate lanes\n            if (rhoOffset < 32) {\n              var tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;\n              var tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;\n            } else /* if (rhoOffset >= 32) */{\n                var tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;\n                var tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;\n              }\n\n            // Transpose lanes\n            var TPiLane = T[PI_INDEXES[laneIndex]];\n            TPiLane.high = tMsw;\n            TPiLane.low = tLsw;\n          }\n\n          // Rho pi at x = y = 0\n          var T0 = T[0];\n          var state0 = state[0];\n          T0.high = state0.high;\n          T0.low = state0.low;\n\n          // Chi\n          for (var x = 0; x < 5; x++) {\n            for (var y = 0; y < 5; y++) {\n              // Shortcuts\n              var laneIndex = x + 5 * y;\n              var lane = state[laneIndex];\n              var TLane = T[laneIndex];\n              var Tx1Lane = T[(x + 1) % 5 + 5 * y];\n              var Tx2Lane = T[(x + 2) % 5 + 5 * y];\n\n              // Mix rows\n              lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;\n              lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;\n            }\n          }\n\n          // Iota\n          var lane = state[0];\n          var roundConstant = ROUND_CONSTANTS[round];\n          lane.high ^= roundConstant.high;\n          lane.low ^= roundConstant.low;;\n        }\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n        var blockSizeBits = this.blockSize * 32;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;\n        dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Shortcuts\n        var state = this._state;\n        var outputLengthBytes = this.cfg.outputLength / 8;\n        var outputLengthLanes = outputLengthBytes / 8;\n\n        // Squeeze\n        var hashWords = [];\n        for (var i = 0; i < outputLengthLanes; i++) {\n          // Shortcuts\n          var lane = state[i];\n          var laneMsw = lane.high;\n          var laneLsw = lane.low;\n\n          // Swap endian\n          laneMsw =\n          (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff |\n          (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;\n\n          laneLsw =\n          (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff |\n          (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00;\n\n\n          // Squeeze state to retrieve hash\n          hashWords.push(laneLsw);\n          hashWords.push(laneMsw);\n        }\n\n        // Return final computed hash\n        return new WordArray.init(hashWords, outputLengthBytes);\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n\n        var state = clone._state = this._state.slice(0);\n        for (var i = 0; i < 25; i++) {\n          state[i] = state[i].clone();\n        }\n\n        return clone;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA3('message');\n             *     var hash = CryptoJS.SHA3(wordArray);\n             */\n    C.SHA3 = Hasher._createHelper(SHA3);\n\n    /**\n                                          * Shortcut function to the HMAC's object interface.\n                                          *\n                                          * @param {WordArray|string} message The message to hash.\n                                          * @param {WordArray|string} key The secret key.\n                                          *\n                                          * @return {WordArray} The HMAC.\n                                          *\n                                          * @static\n                                          *\n                                          * @example\n                                          *\n                                          *     var hmac = CryptoJS.HmacSHA3(message, key);\n                                          */\n    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Hasher = C_lib.Hasher;\n    var C_x64 = C.x64;\n    var X64Word = C_x64.Word;\n    var X64WordArray = C_x64.WordArray;\n    var C_algo = C.algo;\n\n    function X64Word_create() {\n      return X64Word.create.apply(X64Word, arguments);\n    }\n\n    // Constants\n    var K = [\n    X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),\n    X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),\n    X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),\n    X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),\n    X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),\n    X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),\n    X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),\n    X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),\n    X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),\n    X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),\n    X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),\n    X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),\n    X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),\n    X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),\n    X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),\n    X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),\n    X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),\n    X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),\n    X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),\n    X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),\n    X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),\n    X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),\n    X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),\n    X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),\n    X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),\n    X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),\n    X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),\n    X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),\n    X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),\n    X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),\n    X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),\n    X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),\n    X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),\n    X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),\n    X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),\n    X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),\n    X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),\n    X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),\n    X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),\n    X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)];\n\n\n    // Reusable objects\n    var W = [];\n    (function () {\n      for (var i = 0; i < 80; i++) {\n        W[i] = X64Word_create();\n      }\n    })();\n\n    /**\n           * SHA-512 hash algorithm.\n           */\n    var SHA512 = C_algo.SHA512 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new X64WordArray.init([\n        new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),\n        new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),\n        new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),\n        new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);\n\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcuts\n        var H = this._hash.words;\n\n        var H0 = H[0];\n        var H1 = H[1];\n        var H2 = H[2];\n        var H3 = H[3];\n        var H4 = H[4];\n        var H5 = H[5];\n        var H6 = H[6];\n        var H7 = H[7];\n\n        var H0h = H0.high;\n        var H0l = H0.low;\n        var H1h = H1.high;\n        var H1l = H1.low;\n        var H2h = H2.high;\n        var H2l = H2.low;\n        var H3h = H3.high;\n        var H3l = H3.low;\n        var H4h = H4.high;\n        var H4l = H4.low;\n        var H5h = H5.high;\n        var H5l = H5.low;\n        var H6h = H6.high;\n        var H6l = H6.low;\n        var H7h = H7.high;\n        var H7l = H7.low;\n\n        // Working variables\n        var ah = H0h;\n        var al = H0l;\n        var bh = H1h;\n        var bl = H1l;\n        var ch = H2h;\n        var cl = H2l;\n        var dh = H3h;\n        var dl = H3l;\n        var eh = H4h;\n        var el = H4l;\n        var fh = H5h;\n        var fl = H5l;\n        var gh = H6h;\n        var gl = H6l;\n        var hh = H7h;\n        var hl = H7l;\n\n        // Rounds\n        for (var i = 0; i < 80; i++) {\n          // Shortcut\n          var Wi = W[i];\n\n          // Extend message\n          if (i < 16) {\n            var Wih = Wi.high = M[offset + i * 2] | 0;\n            var Wil = Wi.low = M[offset + i * 2 + 1] | 0;\n          } else {\n            // Gamma0\n            var gamma0x = W[i - 15];\n            var gamma0xh = gamma0x.high;\n            var gamma0xl = gamma0x.low;\n            var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;\n            var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);\n\n            // Gamma1\n            var gamma1x = W[i - 2];\n            var gamma1xh = gamma1x.high;\n            var gamma1xl = gamma1x.low;\n            var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;\n            var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);\n\n            // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n            var Wi7 = W[i - 7];\n            var Wi7h = Wi7.high;\n            var Wi7l = Wi7.low;\n\n            var Wi16 = W[i - 16];\n            var Wi16h = Wi16.high;\n            var Wi16l = Wi16.low;\n\n            var Wil = gamma0l + Wi7l;\n            var Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);\n            var Wil = Wil + gamma1l;\n            var Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);\n            var Wil = Wil + Wi16l;\n            var Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);\n\n            Wi.high = Wih;\n            Wi.low = Wil;\n          }\n\n          var chh = eh & fh ^ ~eh & gh;\n          var chl = el & fl ^ ~el & gl;\n          var majh = ah & bh ^ ah & ch ^ bh & ch;\n          var majl = al & bl ^ al & cl ^ bl & cl;\n\n          var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);\n          var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);\n          var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);\n          var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);\n\n          // t1 = h + sigma1 + ch + K[i] + W[i]\n          var Ki = K[i];\n          var Kih = Ki.high;\n          var Kil = Ki.low;\n\n          var t1l = hl + sigma1l;\n          var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);\n          var t1l = t1l + chl;\n          var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);\n          var t1l = t1l + Kil;\n          var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);\n          var t1l = t1l + Wil;\n          var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);\n\n          // t2 = sigma0 + maj\n          var t2l = sigma0l + majl;\n          var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);\n\n          // Update working variables\n          hh = gh;\n          hl = gl;\n          gh = fh;\n          gl = fl;\n          fh = eh;\n          fl = el;\n          el = dl + t1l | 0;\n          eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;\n          dh = ch;\n          dl = cl;\n          ch = bh;\n          cl = bl;\n          bh = ah;\n          bl = al;\n          al = t1l + t2l | 0;\n          ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;\n        }\n\n        // Intermediate hash value\n        H0l = H0.low = H0l + al;\n        H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);\n        H1l = H1.low = H1l + bl;\n        H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);\n        H2l = H2.low = H2l + cl;\n        H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);\n        H3l = H3.low = H3l + dl;\n        H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);\n        H4l = H4.low = H4l + el;\n        H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);\n        H5l = H5.low = H5l + fl;\n        H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);\n        H6l = H6.low = H6l + gl;\n        H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);\n        H7l = H7.low = H7l + hl;\n        H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Convert hash to 32-bit word array before returning\n        var hash = this._hash.toX32();\n\n        // Return final computed hash\n        return hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      },\n\n      blockSize: 1024 / 32 });\n\n\n    /**\n                                * Shortcut function to the hasher's object interface.\n                                *\n                                * @param {WordArray|string} message The message to hash.\n                                *\n                                * @return {WordArray} The hash.\n                                *\n                                * @static\n                                *\n                                * @example\n                                *\n                                *     var hash = CryptoJS.SHA512('message');\n                                *     var hash = CryptoJS.SHA512(wordArray);\n                                */\n    C.SHA512 = Hasher._createHelper(SHA512);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA512(message, key);\n                                              */\n    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_x64 = C.x64;\n    var X64Word = C_x64.Word;\n    var X64WordArray = C_x64.WordArray;\n    var C_algo = C.algo;\n    var SHA512 = C_algo.SHA512;\n\n    /**\n                                 * SHA-384 hash algorithm.\n                                 */\n    var SHA384 = C_algo.SHA384 = SHA512.extend({\n      _doReset: function _doReset() {\n        this._hash = new X64WordArray.init([\n        new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),\n        new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),\n        new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),\n        new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)]);\n\n      },\n\n      _doFinalize: function _doFinalize() {\n        var hash = SHA512._doFinalize.call(this);\n\n        hash.sigBytes -= 16;\n\n        return hash;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA384('message');\n             *     var hash = CryptoJS.SHA384(wordArray);\n             */\n    C.SHA384 = SHA512._createHelper(SHA384);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA384(message, key);\n                                              */\n    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);\n  })();\n\n\n  /**\n         * Cipher core components.\n         */\n  CryptoJS.lib.Cipher || function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var Base64 = C_enc.Base64;\n    var C_algo = C.algo;\n    var EvpKDF = C_algo.EvpKDF;\n\n    /**\n                                 * Abstract base cipher template.\n                                 *\n                                 * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n                                 * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n                                 * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n                                 * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n                                 */\n    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n      /**\n                                                                 * Configuration options.\n                                                                 *\n                                                                 * @property {WordArray} iv The IV to use for this operation.\n                                                                 */\n      cfg: Base.extend(),\n\n      /**\n                           * Creates this cipher in encryption mode.\n                           *\n                           * @param {WordArray} key The key.\n                           * @param {Object} cfg (Optional) The configuration options to use for this operation.\n                           *\n                           * @return {Cipher} A cipher instance.\n                           *\n                           * @static\n                           *\n                           * @example\n                           *\n                           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n                           */\n      createEncryptor: function createEncryptor(key, cfg) {\n        return this.create(this._ENC_XFORM_MODE, key, cfg);\n      },\n\n      /**\n          * Creates this cipher in decryption mode.\n          *\n          * @param {WordArray} key The key.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @return {Cipher} A cipher instance.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n          */\n      createDecryptor: function createDecryptor(key, cfg) {\n        return this.create(this._DEC_XFORM_MODE, key, cfg);\n      },\n\n      /**\n          * Initializes a newly created cipher.\n          *\n          * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n          * @param {WordArray} key The key.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @example\n          *\n          *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n          */\n      init: function init(xformMode, key, cfg) {\n        // Apply config defaults\n        this.cfg = this.cfg.extend(cfg);\n\n        // Store transform mode and key\n        this._xformMode = xformMode;\n        this._key = key;\n\n        // Set initial values\n        this.reset();\n      },\n\n      /**\n          * Resets this cipher to its initial state.\n          *\n          * @example\n          *\n          *     cipher.reset();\n          */\n      reset: function reset() {\n        // Reset data buffer\n        BufferedBlockAlgorithm.reset.call(this);\n\n        // Perform concrete-cipher logic\n        this._doReset();\n      },\n\n      /**\n          * Adds data to be encrypted or decrypted.\n          *\n          * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n          *\n          * @return {WordArray} The data after processing.\n          *\n          * @example\n          *\n          *     var encrypted = cipher.process('data');\n          *     var encrypted = cipher.process(wordArray);\n          */\n      process: function process(dataUpdate) {\n        // Append\n        this._append(dataUpdate);\n\n        // Process available blocks\n        return this._process();\n      },\n\n      /**\n          * Finalizes the encryption or decryption process.\n          * Note that the finalize operation is effectively a destructive, read-once operation.\n          *\n          * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n          *\n          * @return {WordArray} The data after final processing.\n          *\n          * @example\n          *\n          *     var encrypted = cipher.finalize();\n          *     var encrypted = cipher.finalize('data');\n          *     var encrypted = cipher.finalize(wordArray);\n          */\n      finalize: function finalize(dataUpdate) {\n        // Final data update\n        if (dataUpdate) {\n          this._append(dataUpdate);\n        }\n\n        // Perform concrete-cipher logic\n        var finalProcessedData = this._doFinalize();\n\n        return finalProcessedData;\n      },\n\n      keySize: 128 / 32,\n\n      ivSize: 128 / 32,\n\n      _ENC_XFORM_MODE: 1,\n\n      _DEC_XFORM_MODE: 2,\n\n      /**\n                           * Creates shortcut functions to a cipher's object interface.\n                           *\n                           * @param {Cipher} cipher The cipher to create a helper for.\n                           *\n                           * @return {Object} An object with encrypt and decrypt shortcut functions.\n                           *\n                           * @static\n                           *\n                           * @example\n                           *\n                           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n                           */\n      _createHelper: function () {\n        function selectCipherStrategy(key) {\n          if (typeof key == 'string') {\n            return PasswordBasedCipher;\n          } else {\n            return SerializableCipher;\n          }\n        }\n\n        return function (cipher) {\n          return {\n            encrypt: function encrypt(message, key, cfg) {\n              return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n            },\n\n            decrypt: function decrypt(ciphertext, key, cfg) {\n              return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n            } };\n\n        };\n      }() });\n\n\n    /**\n               * Abstract base stream cipher template.\n               *\n               * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n               */\n    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n      _doFinalize: function _doFinalize() {\n        // Process partial blocks\n        var finalProcessedBlocks = this._process(!!'flush');\n\n        return finalProcessedBlocks;\n      },\n\n      blockSize: 1 });\n\n\n    /**\n                        * Mode namespace.\n                        */\n    var C_mode = C.mode = {};\n\n    /**\n                               * Abstract base block cipher mode template.\n                               */\n    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n      /**\n                                                                 * Creates this mode for encryption.\n                                                                 *\n                                                                 * @param {Cipher} cipher A block cipher instance.\n                                                                 * @param {Array} iv The IV words.\n                                                                 *\n                                                                 * @static\n                                                                 *\n                                                                 * @example\n                                                                 *\n                                                                 *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n                                                                 */\n      createEncryptor: function createEncryptor(cipher, iv) {\n        return this.Encryptor.create(cipher, iv);\n      },\n\n      /**\n          * Creates this mode for decryption.\n          *\n          * @param {Cipher} cipher A block cipher instance.\n          * @param {Array} iv The IV words.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n          */\n      createDecryptor: function createDecryptor(cipher, iv) {\n        return this.Decryptor.create(cipher, iv);\n      },\n\n      /**\n          * Initializes a newly created mode.\n          *\n          * @param {Cipher} cipher A block cipher instance.\n          * @param {Array} iv The IV words.\n          *\n          * @example\n          *\n          *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n          */\n      init: function init(cipher, iv) {\n        this._cipher = cipher;\n        this._iv = iv;\n      } });\n\n\n    /**\n             * Cipher Block Chaining mode.\n             */\n    var CBC = C_mode.CBC = function () {\n      /**\n                                         * Abstract base CBC mode.\n                                         */\n      var CBC = BlockCipherMode.extend();\n\n      /**\n                                           * CBC encryptor.\n                                           */\n      CBC.Encryptor = CBC.extend({\n        /**\n                                    * Processes the data block at offset.\n                                    *\n                                    * @param {Array} words The data words to operate on.\n                                    * @param {number} offset The offset where the block starts.\n                                    *\n                                    * @example\n                                    *\n                                    *     mode.processBlock(data.words, offset);\n                                    */\n        processBlock: function processBlock(words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize;\n\n          // XOR and encrypt\n          xorBlock.call(this, words, offset, blockSize);\n          cipher.encryptBlock(words, offset);\n\n          // Remember this block to use with next block\n          this._prevBlock = words.slice(offset, offset + blockSize);\n        } });\n\n\n      /**\n               * CBC decryptor.\n               */\n      CBC.Decryptor = CBC.extend({\n        /**\n                                    * Processes the data block at offset.\n                                    *\n                                    * @param {Array} words The data words to operate on.\n                                    * @param {number} offset The offset where the block starts.\n                                    *\n                                    * @example\n                                    *\n                                    *     mode.processBlock(data.words, offset);\n                                    */\n        processBlock: function processBlock(words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize;\n\n          // Remember this block to use with next block\n          var thisBlock = words.slice(offset, offset + blockSize);\n\n          // Decrypt and XOR\n          cipher.decryptBlock(words, offset);\n          xorBlock.call(this, words, offset, blockSize);\n\n          // This block becomes the previous block\n          this._prevBlock = thisBlock;\n        } });\n\n\n      function xorBlock(words, offset, blockSize) {\n        // Shortcut\n        var iv = this._iv;\n\n        // Choose mixing block\n        if (iv) {\n          var block = iv;\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        } else {\n          var block = this._prevBlock;\n        }\n\n        // XOR blocks\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= block[i];\n        }\n      }\n\n      return CBC;\n    }();\n\n    /**\n          * Padding namespace.\n          */\n    var C_pad = C.pad = {};\n\n    /**\n                             * PKCS #5/7 padding strategy.\n                             */\n    var Pkcs7 = C_pad.Pkcs7 = {\n      /**\n                                 * Pads data using the algorithm defined in PKCS #5/7.\n                                 *\n                                 * @param {WordArray} data The data to pad.\n                                 * @param {number} blockSize The multiple that the data should be padded to.\n                                 *\n                                 * @static\n                                 *\n                                 * @example\n                                 *\n                                 *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n                                 */\n      pad: function pad(data, blockSize) {\n        // Shortcut\n        var blockSizeBytes = blockSize * 4;\n\n        // Count padding bytes\n        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n        // Create padding word\n        var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;\n\n        // Create padding\n        var paddingWords = [];\n        for (var i = 0; i < nPaddingBytes; i += 4) {\n          paddingWords.push(paddingWord);\n        }\n        var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n        // Add padding\n        data.concat(padding);\n      },\n\n      /**\n          * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n          *\n          * @param {WordArray} data The data to unpad.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n          */\n      unpad: function unpad(data) {\n        // Get number of padding bytes from last byte\n        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;\n\n        // Remove padding\n        data.sigBytes -= nPaddingBytes;\n      } };\n\n\n    /**\n            * Abstract base block cipher template.\n            *\n            * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n            */\n    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n      /**\n                                                           * Configuration options.\n                                                           *\n                                                           * @property {Mode} mode The block mode to use. Default: CBC\n                                                           * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n                                                           */\n      cfg: Cipher.cfg.extend({\n        mode: CBC,\n        padding: Pkcs7 }),\n\n\n      reset: function reset() {\n        // Reset cipher\n        Cipher.reset.call(this);\n\n        // Shortcuts\n        var cfg = this.cfg;\n        var iv = cfg.iv;\n        var mode = cfg.mode;\n\n        // Reset block mode\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          var modeCreator = mode.createEncryptor;\n        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{\n            var modeCreator = mode.createDecryptor;\n            // Keep at least one block in the buffer for unpadding\n            this._minBufferSize = 1;\n          }\n\n        if (this._mode && this._mode.__creator == modeCreator) {\n          this._mode.init(this, iv && iv.words);\n        } else {\n          this._mode = modeCreator.call(mode, this, iv && iv.words);\n          this._mode.__creator = modeCreator;\n        }\n      },\n\n      _doProcessBlock: function _doProcessBlock(words, offset) {\n        this._mode.processBlock(words, offset);\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcut\n        var padding = this.cfg.padding;\n\n        // Finalize\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          // Pad data\n          padding.pad(this._data, this.blockSize);\n\n          // Process final blocks\n          var finalProcessedBlocks = this._process(!!'flush');\n        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{\n            // Process final blocks\n            var finalProcessedBlocks = this._process(!!'flush');\n\n            // Unpad data\n            padding.unpad(finalProcessedBlocks);\n          }\n\n        return finalProcessedBlocks;\n      },\n\n      blockSize: 128 / 32 });\n\n\n    /**\n                               * A collection of cipher parameters.\n                               *\n                               * @property {WordArray} ciphertext The raw ciphertext.\n                               * @property {WordArray} key The key to this ciphertext.\n                               * @property {WordArray} iv The IV used in the ciphering operation.\n                               * @property {WordArray} salt The salt used with a key derivation function.\n                               * @property {Cipher} algorithm The cipher algorithm.\n                               * @property {Mode} mode The block mode used in the ciphering operation.\n                               * @property {Padding} padding The padding scheme used in the ciphering operation.\n                               * @property {number} blockSize The block size of the cipher.\n                               * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n                               */\n    var CipherParams = C_lib.CipherParams = Base.extend({\n      /**\n                                                           * Initializes a newly created cipher params object.\n                                                           *\n                                                           * @param {Object} cipherParams An object with any of the possible cipher parameters.\n                                                           *\n                                                           * @example\n                                                           *\n                                                           *     var cipherParams = CryptoJS.lib.CipherParams.create({\n                                                           *         ciphertext: ciphertextWordArray,\n                                                           *         key: keyWordArray,\n                                                           *         iv: ivWordArray,\n                                                           *         salt: saltWordArray,\n                                                           *         algorithm: CryptoJS.algo.AES,\n                                                           *         mode: CryptoJS.mode.CBC,\n                                                           *         padding: CryptoJS.pad.PKCS7,\n                                                           *         blockSize: 4,\n                                                           *         formatter: CryptoJS.format.OpenSSL\n                                                           *     });\n                                                           */\n      init: function init(cipherParams) {\n        this.mixIn(cipherParams);\n      },\n\n      /**\n          * Converts this cipher params object to a string.\n          *\n          * @param {Format} formatter (Optional) The formatting strategy to use.\n          *\n          * @return {string} The stringified cipher params.\n          *\n          * @throws Error If neither the formatter nor the default formatter is set.\n          *\n          * @example\n          *\n          *     var string = cipherParams + '';\n          *     var string = cipherParams.toString();\n          *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n          */\n      toString: function toString(formatter) {\n        return (formatter || this.formatter).stringify(this);\n      } });\n\n\n    /**\n             * Format namespace.\n             */\n    var C_format = C.format = {};\n\n    /**\n                                   * OpenSSL formatting strategy.\n                                   */\n    var OpenSSLFormatter = C_format.OpenSSL = {\n      /**\n                                                 * Converts a cipher params object to an OpenSSL-compatible string.\n                                                 *\n                                                 * @param {CipherParams} cipherParams The cipher params object.\n                                                 *\n                                                 * @return {string} The OpenSSL-compatible string.\n                                                 *\n                                                 * @static\n                                                 *\n                                                 * @example\n                                                 *\n                                                 *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n                                                 */\n      stringify: function stringify(cipherParams) {\n        // Shortcuts\n        var ciphertext = cipherParams.ciphertext;\n        var salt = cipherParams.salt;\n\n        // Format\n        if (salt) {\n          var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n        } else {\n          var wordArray = ciphertext;\n        }\n\n        return wordArray.toString(Base64);\n      },\n\n      /**\n          * Converts an OpenSSL-compatible string to a cipher params object.\n          *\n          * @param {string} openSSLStr The OpenSSL-compatible string.\n          *\n          * @return {CipherParams} The cipher params object.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n          */\n      parse: function parse(openSSLStr) {\n        // Parse base64\n        var ciphertext = Base64.parse(openSSLStr);\n\n        // Shortcut\n        var ciphertextWords = ciphertext.words;\n\n        // Test for salt\n        if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n          // Extract salt\n          var salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n          // Remove salt from ciphertext\n          ciphertextWords.splice(0, 4);\n          ciphertext.sigBytes -= 16;\n        }\n\n        return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n      } };\n\n\n    /**\n            * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n            */\n    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n      /**\n                                                                       * Configuration options.\n                                                                       *\n                                                                       * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n                                                                       */\n      cfg: Base.extend({\n        format: OpenSSLFormatter }),\n\n\n      /**\n                                      * Encrypts a message.\n                                      *\n                                      * @param {Cipher} cipher The cipher algorithm to use.\n                                      * @param {WordArray|string} message The message to encrypt.\n                                      * @param {WordArray} key The key.\n                                      * @param {Object} cfg (Optional) The configuration options to use for this operation.\n                                      *\n                                      * @return {CipherParams} A cipher params object.\n                                      *\n                                      * @static\n                                      *\n                                      * @example\n                                      *\n                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n                                      */\n      encrypt: function encrypt(cipher, message, key, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Encrypt\n        var encryptor = cipher.createEncryptor(key, cfg);\n        var ciphertext = encryptor.finalize(message);\n\n        // Shortcut\n        var cipherCfg = encryptor.cfg;\n\n        // Create and return serializable cipher params\n        return CipherParams.create({\n          ciphertext: ciphertext,\n          key: key,\n          iv: cipherCfg.iv,\n          algorithm: cipher,\n          mode: cipherCfg.mode,\n          padding: cipherCfg.padding,\n          blockSize: cipher.blockSize,\n          formatter: cfg.format });\n\n      },\n\n      /**\n          * Decrypts serialized ciphertext.\n          *\n          * @param {Cipher} cipher The cipher algorithm to use.\n          * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n          * @param {WordArray} key The key.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @return {WordArray} The plaintext.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n          *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n          */\n      decrypt: function decrypt(cipher, ciphertext, key, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Convert string to CipherParams\n        ciphertext = this._parse(ciphertext, cfg.format);\n\n        // Decrypt\n        var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n        return plaintext;\n      },\n\n      /**\n          * Converts serialized ciphertext to CipherParams,\n          * else assumed CipherParams already and returns ciphertext unchanged.\n          *\n          * @param {CipherParams|string} ciphertext The ciphertext.\n          * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n          *\n          * @return {CipherParams} The unserialized ciphertext.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n          */\n      _parse: function _parse(ciphertext, format) {\n        if (typeof ciphertext == 'string') {\n          return format.parse(ciphertext, this);\n        } else {\n          return ciphertext;\n        }\n      } });\n\n\n    /**\n             * Key derivation function namespace.\n             */\n    var C_kdf = C.kdf = {};\n\n    /**\n                             * OpenSSL key derivation function.\n                             */\n    var OpenSSLKdf = C_kdf.OpenSSL = {\n      /**\n                                        * Derives a key and IV from a password.\n                                        *\n                                        * @param {string} password The password to derive from.\n                                        * @param {number} keySize The size in words of the key to generate.\n                                        * @param {number} ivSize The size in words of the IV to generate.\n                                        * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n                                        *\n                                        * @return {CipherParams} A cipher params object with the key, IV, and salt.\n                                        *\n                                        * @static\n                                        *\n                                        * @example\n                                        *\n                                        *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n                                        *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n                                        */\n      execute: function execute(password, keySize, ivSize, salt) {\n        // Generate random salt\n        if (!salt) {\n          salt = WordArray.random(64 / 8);\n        }\n\n        // Derive key and IV\n        var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n        // Separate key and IV\n        var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n        key.sigBytes = keySize * 4;\n\n        // Return params\n        return CipherParams.create({ key: key, iv: iv, salt: salt });\n      } };\n\n\n    /**\n            * A serializable cipher wrapper that derives the key from a password,\n            * and returns ciphertext as a serializable cipher params object.\n            */\n    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n      /**\n                                                                                       * Configuration options.\n                                                                                       *\n                                                                                       * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n                                                                                       */\n      cfg: SerializableCipher.cfg.extend({\n        kdf: OpenSSLKdf }),\n\n\n      /**\n                             * Encrypts a message using a password.\n                             *\n                             * @param {Cipher} cipher The cipher algorithm to use.\n                             * @param {WordArray|string} message The message to encrypt.\n                             * @param {string} password The password.\n                             * @param {Object} cfg (Optional) The configuration options to use for this operation.\n                             *\n                             * @return {CipherParams} A cipher params object.\n                             *\n                             * @static\n                             *\n                             * @example\n                             *\n                             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n                             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n                             */\n      encrypt: function encrypt(cipher, message, password, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Derive key and other params\n        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n        // Add IV to config\n        cfg.iv = derivedParams.iv;\n\n        // Encrypt\n        var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n        // Mix in derived params\n        ciphertext.mixIn(derivedParams);\n\n        return ciphertext;\n      },\n\n      /**\n          * Decrypts serialized ciphertext using a password.\n          *\n          * @param {Cipher} cipher The cipher algorithm to use.\n          * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n          * @param {string} password The password.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @return {WordArray} The plaintext.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n          *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n          */\n      decrypt: function decrypt(cipher, ciphertext, password, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Convert string to CipherParams\n        ciphertext = this._parse(ciphertext, cfg.format);\n\n        // Derive key and other params\n        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n        // Add IV to config\n        cfg.iv = derivedParams.iv;\n\n        // Decrypt\n        var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n        return plaintext;\n      } });\n\n  }();\n\n\n  /**\n        * Cipher Feedback block mode.\n        */\n  CryptoJS.mode.CFB = function () {\n    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n    CFB.Encryptor = CFB.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n\n        generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n        // Remember this block to use with next block\n        this._prevBlock = words.slice(offset, offset + blockSize);\n      } });\n\n\n    CFB.Decryptor = CFB.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n\n        // Remember this block to use with next block\n        var thisBlock = words.slice(offset, offset + blockSize);\n\n        generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n        // This block becomes the previous block\n        this._prevBlock = thisBlock;\n      } });\n\n\n    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n      // Shortcut\n      var iv = this._iv;\n\n      // Generate keystream\n      if (iv) {\n        var keystream = iv.slice(0);\n\n        // Remove IV for subsequent blocks\n        this._iv = undefined;\n      } else {\n        var keystream = this._prevBlock;\n      }\n      cipher.encryptBlock(keystream, 0);\n\n      // Encrypt\n      for (var i = 0; i < blockSize; i++) {\n        words[offset + i] ^= keystream[i];\n      }\n    }\n\n    return CFB;\n  }();\n\n\n  /**\n        * Electronic Codebook block mode.\n        */\n  CryptoJS.mode.ECB = function () {\n    var ECB = CryptoJS.lib.BlockCipherMode.extend();\n\n    ECB.Encryptor = ECB.extend({\n      processBlock: function processBlock(words, offset) {\n        this._cipher.encryptBlock(words, offset);\n      } });\n\n\n    ECB.Decryptor = ECB.extend({\n      processBlock: function processBlock(words, offset) {\n        this._cipher.decryptBlock(words, offset);\n      } });\n\n\n    return ECB;\n  }();\n\n\n  /**\n        * ANSI X.923 padding strategy.\n        */\n  CryptoJS.pad.AnsiX923 = {\n    pad: function pad(data, blockSize) {\n      // Shortcuts\n      var dataSigBytes = data.sigBytes;\n      var blockSizeBytes = blockSize * 4;\n\n      // Count padding bytes\n      var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;\n\n      // Compute last byte position\n      var lastBytePos = dataSigBytes + nPaddingBytes - 1;\n\n      // Pad\n      data.clamp();\n      data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;\n      data.sigBytes += nPaddingBytes;\n    },\n\n    unpad: function unpad(data) {\n      // Get number of padding bytes from last byte\n      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;\n\n      // Remove padding\n      data.sigBytes -= nPaddingBytes;\n    } };\n\n\n\n  /**\n          * ISO 10126 padding strategy.\n          */\n  CryptoJS.pad.Iso10126 = {\n    pad: function pad(data, blockSize) {\n      // Shortcut\n      var blockSizeBytes = blockSize * 4;\n\n      // Count padding bytes\n      var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n      // Pad\n      data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).\n      concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));\n    },\n\n    unpad: function unpad(data) {\n      // Get number of padding bytes from last byte\n      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;\n\n      // Remove padding\n      data.sigBytes -= nPaddingBytes;\n    } };\n\n\n\n  /**\n          * ISO/IEC 9797-1 Padding Method 2.\n          */\n  CryptoJS.pad.Iso97971 = {\n    pad: function pad(data, blockSize) {\n      // Add 0x80 byte\n      data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));\n\n      // Zero pad the rest\n      CryptoJS.pad.ZeroPadding.pad(data, blockSize);\n    },\n\n    unpad: function unpad(data) {\n      // Remove zero padding\n      CryptoJS.pad.ZeroPadding.unpad(data);\n\n      // Remove one more byte -- the 0x80 byte\n      data.sigBytes--;\n    } };\n\n\n\n  /**\n          * Output Feedback block mode.\n          */\n  CryptoJS.mode.OFB = function () {\n    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n\n    var Encryptor = OFB.Encryptor = OFB.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n        var iv = this._iv;\n        var keystream = this._keystream;\n\n        // Generate keystream\n        if (iv) {\n          keystream = this._keystream = iv.slice(0);\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        }\n        cipher.encryptBlock(keystream, 0);\n\n        // Encrypt\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      } });\n\n\n    OFB.Decryptor = Encryptor;\n\n    return OFB;\n  }();\n\n\n  /**\n        * A noop padding strategy.\n        */\n  CryptoJS.pad.NoPadding = {\n    pad: function pad() {\n    },\n\n    unpad: function unpad() {\n    } };\n\n\n\n  (function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var CipherParams = C_lib.CipherParams;\n    var C_enc = C.enc;\n    var Hex = C_enc.Hex;\n    var C_format = C.format;\n\n    var HexFormatter = C_format.Hex = {\n      /**\n                                         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n                                         *\n                                         * @param {CipherParams} cipherParams The cipher params object.\n                                         *\n                                         * @return {string} The hexadecimally encoded string.\n                                         *\n                                         * @static\n                                         *\n                                         * @example\n                                         *\n                                         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n                                         */\n      stringify: function stringify(cipherParams) {\n        return cipherParams.ciphertext.toString(Hex);\n      },\n\n      /**\n          * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n          *\n          * @param {string} input The hexadecimally encoded string.\n          *\n          * @return {CipherParams} The cipher params object.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n          */\n      parse: function parse(input) {\n        var ciphertext = Hex.parse(input);\n        return CipherParams.create({ ciphertext: ciphertext });\n      } };\n\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var BlockCipher = C_lib.BlockCipher;\n    var C_algo = C.algo;\n\n    // Lookup tables\n    var SBOX = [];\n    var INV_SBOX = [];\n    var SUB_MIX_0 = [];\n    var SUB_MIX_1 = [];\n    var SUB_MIX_2 = [];\n    var SUB_MIX_3 = [];\n    var INV_SUB_MIX_0 = [];\n    var INV_SUB_MIX_1 = [];\n    var INV_SUB_MIX_2 = [];\n    var INV_SUB_MIX_3 = [];\n\n    // Compute lookup tables\n    (function () {\n      // Compute double table\n      var d = [];\n      for (var i = 0; i < 256; i++) {\n        if (i < 128) {\n          d[i] = i << 1;\n        } else {\n          d[i] = i << 1 ^ 0x11b;\n        }\n      }\n\n      // Walk GF(2^8)\n      var x = 0;\n      var xi = 0;\n      for (var i = 0; i < 256; i++) {\n        // Compute sbox\n        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;\n        SBOX[x] = sx;\n        INV_SBOX[sx] = x;\n\n        // Compute multiplication\n        var x2 = d[x];\n        var x4 = d[x2];\n        var x8 = d[x4];\n\n        // Compute sub bytes, mix columns tables\n        var t = d[sx] * 0x101 ^ sx * 0x1010100;\n        SUB_MIX_0[x] = t << 24 | t >>> 8;\n        SUB_MIX_1[x] = t << 16 | t >>> 16;\n        SUB_MIX_2[x] = t << 8 | t >>> 24;\n        SUB_MIX_3[x] = t;\n\n        // Compute inv sub bytes, inv mix columns tables\n        var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;\n        INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;\n        INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;\n        INV_SUB_MIX_3[sx] = t;\n\n        // Compute next counter\n        if (!x) {\n          x = xi = 1;\n        } else {\n          x = x2 ^ d[d[d[x8 ^ x2]]];\n          xi ^= d[d[xi]];\n        }\n      }\n    })();\n\n    // Precomputed Rcon lookup\n    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n    /**\n                                                                                    * AES block cipher algorithm.\n                                                                                    */\n    var AES = C_algo.AES = BlockCipher.extend({\n      _doReset: function _doReset() {\n        // Skip reset of nRounds has been set before and key did not change\n        if (this._nRounds && this._keyPriorReset === this._key) {\n          return;\n        }\n\n        // Shortcuts\n        var key = this._keyPriorReset = this._key;\n        var keyWords = key.words;\n        var keySize = key.sigBytes / 4;\n\n        // Compute number of rounds\n        var nRounds = this._nRounds = keySize + 6;\n\n        // Compute number of key schedule rows\n        var ksRows = (nRounds + 1) * 4;\n\n        // Compute key schedule\n        var keySchedule = this._keySchedule = [];\n        for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n          if (ksRow < keySize) {\n            keySchedule[ksRow] = keyWords[ksRow];\n          } else {\n            var t = keySchedule[ksRow - 1];\n\n            if (!(ksRow % keySize)) {\n              // Rot word\n              t = t << 8 | t >>> 24;\n\n              // Sub word\n              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];\n\n              // Mix Rcon\n              t ^= RCON[ksRow / keySize | 0] << 24;\n            } else if (keySize > 6 && ksRow % keySize == 4) {\n              // Sub word\n              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];\n            }\n\n            keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n          }\n        }\n\n        // Compute inv key schedule\n        var invKeySchedule = this._invKeySchedule = [];\n        for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n          var ksRow = ksRows - invKsRow;\n\n          if (invKsRow % 4) {\n            var t = keySchedule[ksRow];\n          } else {\n            var t = keySchedule[ksRow - 4];\n          }\n\n          if (invKsRow < 4 || ksRow <= 4) {\n            invKeySchedule[invKsRow] = t;\n          } else {\n            invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^\n            INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n          }\n        }\n      },\n\n      encryptBlock: function encryptBlock(M, offset) {\n        this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n      },\n\n      decryptBlock: function decryptBlock(M, offset) {\n        // Swap 2nd and 4th rows\n        var t = M[offset + 1];\n        M[offset + 1] = M[offset + 3];\n        M[offset + 3] = t;\n\n        this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n        // Inv swap 2nd and 4th rows\n        var t = M[offset + 1];\n        M[offset + 1] = M[offset + 3];\n        M[offset + 3] = t;\n      },\n\n      _doCryptBlock: function _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n        // Shortcut\n        var nRounds = this._nRounds;\n\n        // Get input, add round key\n        var s0 = M[offset] ^ keySchedule[0];\n        var s1 = M[offset + 1] ^ keySchedule[1];\n        var s2 = M[offset + 2] ^ keySchedule[2];\n        var s3 = M[offset + 3] ^ keySchedule[3];\n\n        // Key schedule row counter\n        var ksRow = 4;\n\n        // Rounds\n        for (var round = 1; round < nRounds; round++) {\n          // Shift rows, sub bytes, mix columns, add round key\n          var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n          var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n          var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n          var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n          // Update state\n          s0 = t0;\n          s1 = t1;\n          s2 = t2;\n          s3 = t3;\n        }\n\n        // Shift rows, sub bytes, add round key\n        var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n        var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n        var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n        var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n        // Set output\n        M[offset] = t0;\n        M[offset + 1] = t1;\n        M[offset + 2] = t2;\n        M[offset + 3] = t3;\n      },\n\n      keySize: 256 / 32 });\n\n\n    /**\n                             * Shortcut functions to the cipher's object interface.\n                             *\n                             * @example\n                             *\n                             *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n                             *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n                             */\n    C.AES = BlockCipher._createHelper(AES);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var BlockCipher = C_lib.BlockCipher;\n    var C_algo = C.algo;\n\n    // Permuted Choice 1 constants\n    var PC1 = [\n    57, 49, 41, 33, 25, 17, 9, 1,\n    58, 50, 42, 34, 26, 18, 10, 2,\n    59, 51, 43, 35, 27, 19, 11, 3,\n    60, 52, 44, 36, 63, 55, 47, 39,\n    31, 23, 15, 7, 62, 54, 46, 38,\n    30, 22, 14, 6, 61, 53, 45, 37,\n    29, 21, 13, 5, 28, 20, 12, 4];\n\n\n    // Permuted Choice 2 constants\n    var PC2 = [\n    14, 17, 11, 24, 1, 5,\n    3, 28, 15, 6, 21, 10,\n    23, 19, 12, 4, 26, 8,\n    16, 7, 27, 20, 13, 2,\n    41, 52, 31, 37, 47, 55,\n    30, 40, 51, 45, 33, 48,\n    44, 49, 39, 56, 34, 53,\n    46, 42, 50, 36, 29, 32];\n\n\n    // Cumulative bit shift constants\n    var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n    // SBOXes and round permutation constants\n    var SBOX_P = [\n    {\n      0x0: 0x808200,\n      0x10000000: 0x8000,\n      0x20000000: 0x808002,\n      0x30000000: 0x2,\n      0x40000000: 0x200,\n      0x50000000: 0x808202,\n      0x60000000: 0x800202,\n      0x70000000: 0x800000,\n      0x80000000: 0x202,\n      0x90000000: 0x800200,\n      0xa0000000: 0x8200,\n      0xb0000000: 0x808000,\n      0xc0000000: 0x8002,\n      0xd0000000: 0x800002,\n      0xe0000000: 0x0,\n      0xf0000000: 0x8202,\n      0x8000000: 0x0,\n      0x18000000: 0x808202,\n      0x28000000: 0x8202,\n      0x38000000: 0x8000,\n      0x48000000: 0x808200,\n      0x58000000: 0x200,\n      0x68000000: 0x808002,\n      0x78000000: 0x2,\n      0x88000000: 0x800200,\n      0x98000000: 0x8200,\n      0xa8000000: 0x808000,\n      0xb8000000: 0x800202,\n      0xc8000000: 0x800002,\n      0xd8000000: 0x8002,\n      0xe8000000: 0x202,\n      0xf8000000: 0x800000,\n      0x1: 0x8000,\n      0x10000001: 0x2,\n      0x20000001: 0x808200,\n      0x30000001: 0x800000,\n      0x40000001: 0x808002,\n      0x50000001: 0x8200,\n      0x60000001: 0x200,\n      0x70000001: 0x800202,\n      0x80000001: 0x808202,\n      0x90000001: 0x808000,\n      0xa0000001: 0x800002,\n      0xb0000001: 0x8202,\n      0xc0000001: 0x202,\n      0xd0000001: 0x800200,\n      0xe0000001: 0x8002,\n      0xf0000001: 0x0,\n      0x8000001: 0x808202,\n      0x18000001: 0x808000,\n      0x28000001: 0x800000,\n      0x38000001: 0x200,\n      0x48000001: 0x8000,\n      0x58000001: 0x800002,\n      0x68000001: 0x2,\n      0x78000001: 0x8202,\n      0x88000001: 0x8002,\n      0x98000001: 0x800202,\n      0xa8000001: 0x202,\n      0xb8000001: 0x808200,\n      0xc8000001: 0x800200,\n      0xd8000001: 0x0,\n      0xe8000001: 0x8200,\n      0xf8000001: 0x808002 },\n\n    {\n      0x0: 0x40084010,\n      0x1000000: 0x4000,\n      0x2000000: 0x80000,\n      0x3000000: 0x40080010,\n      0x4000000: 0x40000010,\n      0x5000000: 0x40084000,\n      0x6000000: 0x40004000,\n      0x7000000: 0x10,\n      0x8000000: 0x84000,\n      0x9000000: 0x40004010,\n      0xa000000: 0x40000000,\n      0xb000000: 0x84010,\n      0xc000000: 0x80010,\n      0xd000000: 0x0,\n      0xe000000: 0x4010,\n      0xf000000: 0x40080000,\n      0x800000: 0x40004000,\n      0x1800000: 0x84010,\n      0x2800000: 0x10,\n      0x3800000: 0x40004010,\n      0x4800000: 0x40084010,\n      0x5800000: 0x40000000,\n      0x6800000: 0x80000,\n      0x7800000: 0x40080010,\n      0x8800000: 0x80010,\n      0x9800000: 0x0,\n      0xa800000: 0x4000,\n      0xb800000: 0x40080000,\n      0xc800000: 0x40000010,\n      0xd800000: 0x84000,\n      0xe800000: 0x40084000,\n      0xf800000: 0x4010,\n      0x10000000: 0x0,\n      0x11000000: 0x40080010,\n      0x12000000: 0x40004010,\n      0x13000000: 0x40084000,\n      0x14000000: 0x40080000,\n      0x15000000: 0x10,\n      0x16000000: 0x84010,\n      0x17000000: 0x4000,\n      0x18000000: 0x4010,\n      0x19000000: 0x80000,\n      0x1a000000: 0x80010,\n      0x1b000000: 0x40000010,\n      0x1c000000: 0x84000,\n      0x1d000000: 0x40004000,\n      0x1e000000: 0x40000000,\n      0x1f000000: 0x40084010,\n      0x10800000: 0x84010,\n      0x11800000: 0x80000,\n      0x12800000: 0x40080000,\n      0x13800000: 0x4000,\n      0x14800000: 0x40004000,\n      0x15800000: 0x40084010,\n      0x16800000: 0x10,\n      0x17800000: 0x40000000,\n      0x18800000: 0x40084000,\n      0x19800000: 0x40000010,\n      0x1a800000: 0x40004010,\n      0x1b800000: 0x80010,\n      0x1c800000: 0x0,\n      0x1d800000: 0x4010,\n      0x1e800000: 0x40080010,\n      0x1f800000: 0x84000 },\n\n    {\n      0x0: 0x104,\n      0x100000: 0x0,\n      0x200000: 0x4000100,\n      0x300000: 0x10104,\n      0x400000: 0x10004,\n      0x500000: 0x4000004,\n      0x600000: 0x4010104,\n      0x700000: 0x4010000,\n      0x800000: 0x4000000,\n      0x900000: 0x4010100,\n      0xa00000: 0x10100,\n      0xb00000: 0x4010004,\n      0xc00000: 0x4000104,\n      0xd00000: 0x10000,\n      0xe00000: 0x4,\n      0xf00000: 0x100,\n      0x80000: 0x4010100,\n      0x180000: 0x4010004,\n      0x280000: 0x0,\n      0x380000: 0x4000100,\n      0x480000: 0x4000004,\n      0x580000: 0x10000,\n      0x680000: 0x10004,\n      0x780000: 0x104,\n      0x880000: 0x4,\n      0x980000: 0x100,\n      0xa80000: 0x4010000,\n      0xb80000: 0x10104,\n      0xc80000: 0x10100,\n      0xd80000: 0x4000104,\n      0xe80000: 0x4010104,\n      0xf80000: 0x4000000,\n      0x1000000: 0x4010100,\n      0x1100000: 0x10004,\n      0x1200000: 0x10000,\n      0x1300000: 0x4000100,\n      0x1400000: 0x100,\n      0x1500000: 0x4010104,\n      0x1600000: 0x4000004,\n      0x1700000: 0x0,\n      0x1800000: 0x4000104,\n      0x1900000: 0x4000000,\n      0x1a00000: 0x4,\n      0x1b00000: 0x10100,\n      0x1c00000: 0x4010000,\n      0x1d00000: 0x104,\n      0x1e00000: 0x10104,\n      0x1f00000: 0x4010004,\n      0x1080000: 0x4000000,\n      0x1180000: 0x104,\n      0x1280000: 0x4010100,\n      0x1380000: 0x0,\n      0x1480000: 0x10004,\n      0x1580000: 0x4000100,\n      0x1680000: 0x100,\n      0x1780000: 0x4010004,\n      0x1880000: 0x10000,\n      0x1980000: 0x4010104,\n      0x1a80000: 0x10104,\n      0x1b80000: 0x4000004,\n      0x1c80000: 0x4000104,\n      0x1d80000: 0x4010000,\n      0x1e80000: 0x4,\n      0x1f80000: 0x10100 },\n\n    {\n      0x0: 0x80401000,\n      0x10000: 0x80001040,\n      0x20000: 0x401040,\n      0x30000: 0x80400000,\n      0x40000: 0x0,\n      0x50000: 0x401000,\n      0x60000: 0x80000040,\n      0x70000: 0x400040,\n      0x80000: 0x80000000,\n      0x90000: 0x400000,\n      0xa0000: 0x40,\n      0xb0000: 0x80001000,\n      0xc0000: 0x80400040,\n      0xd0000: 0x1040,\n      0xe0000: 0x1000,\n      0xf0000: 0x80401040,\n      0x8000: 0x80001040,\n      0x18000: 0x40,\n      0x28000: 0x80400040,\n      0x38000: 0x80001000,\n      0x48000: 0x401000,\n      0x58000: 0x80401040,\n      0x68000: 0x0,\n      0x78000: 0x80400000,\n      0x88000: 0x1000,\n      0x98000: 0x80401000,\n      0xa8000: 0x400000,\n      0xb8000: 0x1040,\n      0xc8000: 0x80000000,\n      0xd8000: 0x400040,\n      0xe8000: 0x401040,\n      0xf8000: 0x80000040,\n      0x100000: 0x400040,\n      0x110000: 0x401000,\n      0x120000: 0x80000040,\n      0x130000: 0x0,\n      0x140000: 0x1040,\n      0x150000: 0x80400040,\n      0x160000: 0x80401000,\n      0x170000: 0x80001040,\n      0x180000: 0x80401040,\n      0x190000: 0x80000000,\n      0x1a0000: 0x80400000,\n      0x1b0000: 0x401040,\n      0x1c0000: 0x80001000,\n      0x1d0000: 0x400000,\n      0x1e0000: 0x40,\n      0x1f0000: 0x1000,\n      0x108000: 0x80400000,\n      0x118000: 0x80401040,\n      0x128000: 0x0,\n      0x138000: 0x401000,\n      0x148000: 0x400040,\n      0x158000: 0x80000000,\n      0x168000: 0x80001040,\n      0x178000: 0x40,\n      0x188000: 0x80000040,\n      0x198000: 0x1000,\n      0x1a8000: 0x80001000,\n      0x1b8000: 0x80400040,\n      0x1c8000: 0x1040,\n      0x1d8000: 0x80401000,\n      0x1e8000: 0x400000,\n      0x1f8000: 0x401040 },\n\n    {\n      0x0: 0x80,\n      0x1000: 0x1040000,\n      0x2000: 0x40000,\n      0x3000: 0x20000000,\n      0x4000: 0x20040080,\n      0x5000: 0x1000080,\n      0x6000: 0x21000080,\n      0x7000: 0x40080,\n      0x8000: 0x1000000,\n      0x9000: 0x20040000,\n      0xa000: 0x20000080,\n      0xb000: 0x21040080,\n      0xc000: 0x21040000,\n      0xd000: 0x0,\n      0xe000: 0x1040080,\n      0xf000: 0x21000000,\n      0x800: 0x1040080,\n      0x1800: 0x21000080,\n      0x2800: 0x80,\n      0x3800: 0x1040000,\n      0x4800: 0x40000,\n      0x5800: 0x20040080,\n      0x6800: 0x21040000,\n      0x7800: 0x20000000,\n      0x8800: 0x20040000,\n      0x9800: 0x0,\n      0xa800: 0x21040080,\n      0xb800: 0x1000080,\n      0xc800: 0x20000080,\n      0xd800: 0x21000000,\n      0xe800: 0x1000000,\n      0xf800: 0x40080,\n      0x10000: 0x40000,\n      0x11000: 0x80,\n      0x12000: 0x20000000,\n      0x13000: 0x21000080,\n      0x14000: 0x1000080,\n      0x15000: 0x21040000,\n      0x16000: 0x20040080,\n      0x17000: 0x1000000,\n      0x18000: 0x21040080,\n      0x19000: 0x21000000,\n      0x1a000: 0x1040000,\n      0x1b000: 0x20040000,\n      0x1c000: 0x40080,\n      0x1d000: 0x20000080,\n      0x1e000: 0x0,\n      0x1f000: 0x1040080,\n      0x10800: 0x21000080,\n      0x11800: 0x1000000,\n      0x12800: 0x1040000,\n      0x13800: 0x20040080,\n      0x14800: 0x20000000,\n      0x15800: 0x1040080,\n      0x16800: 0x80,\n      0x17800: 0x21040000,\n      0x18800: 0x40080,\n      0x19800: 0x21040080,\n      0x1a800: 0x0,\n      0x1b800: 0x21000000,\n      0x1c800: 0x1000080,\n      0x1d800: 0x40000,\n      0x1e800: 0x20040000,\n      0x1f800: 0x20000080 },\n\n    {\n      0x0: 0x10000008,\n      0x100: 0x2000,\n      0x200: 0x10200000,\n      0x300: 0x10202008,\n      0x400: 0x10002000,\n      0x500: 0x200000,\n      0x600: 0x200008,\n      0x700: 0x10000000,\n      0x800: 0x0,\n      0x900: 0x10002008,\n      0xa00: 0x202000,\n      0xb00: 0x8,\n      0xc00: 0x10200008,\n      0xd00: 0x202008,\n      0xe00: 0x2008,\n      0xf00: 0x10202000,\n      0x80: 0x10200000,\n      0x180: 0x10202008,\n      0x280: 0x8,\n      0x380: 0x200000,\n      0x480: 0x202008,\n      0x580: 0x10000008,\n      0x680: 0x10002000,\n      0x780: 0x2008,\n      0x880: 0x200008,\n      0x980: 0x2000,\n      0xa80: 0x10002008,\n      0xb80: 0x10200008,\n      0xc80: 0x0,\n      0xd80: 0x10202000,\n      0xe80: 0x202000,\n      0xf80: 0x10000000,\n      0x1000: 0x10002000,\n      0x1100: 0x10200008,\n      0x1200: 0x10202008,\n      0x1300: 0x2008,\n      0x1400: 0x200000,\n      0x1500: 0x10000000,\n      0x1600: 0x10000008,\n      0x1700: 0x202000,\n      0x1800: 0x202008,\n      0x1900: 0x0,\n      0x1a00: 0x8,\n      0x1b00: 0x10200000,\n      0x1c00: 0x2000,\n      0x1d00: 0x10002008,\n      0x1e00: 0x10202000,\n      0x1f00: 0x200008,\n      0x1080: 0x8,\n      0x1180: 0x202000,\n      0x1280: 0x200000,\n      0x1380: 0x10000008,\n      0x1480: 0x10002000,\n      0x1580: 0x2008,\n      0x1680: 0x10202008,\n      0x1780: 0x10200000,\n      0x1880: 0x10202000,\n      0x1980: 0x10200008,\n      0x1a80: 0x2000,\n      0x1b80: 0x202008,\n      0x1c80: 0x200008,\n      0x1d80: 0x0,\n      0x1e80: 0x10000000,\n      0x1f80: 0x10002008 },\n\n    {\n      0x0: 0x100000,\n      0x10: 0x2000401,\n      0x20: 0x400,\n      0x30: 0x100401,\n      0x40: 0x2100401,\n      0x50: 0x0,\n      0x60: 0x1,\n      0x70: 0x2100001,\n      0x80: 0x2000400,\n      0x90: 0x100001,\n      0xa0: 0x2000001,\n      0xb0: 0x2100400,\n      0xc0: 0x2100000,\n      0xd0: 0x401,\n      0xe0: 0x100400,\n      0xf0: 0x2000000,\n      0x8: 0x2100001,\n      0x18: 0x0,\n      0x28: 0x2000401,\n      0x38: 0x2100400,\n      0x48: 0x100000,\n      0x58: 0x2000001,\n      0x68: 0x2000000,\n      0x78: 0x401,\n      0x88: 0x100401,\n      0x98: 0x2000400,\n      0xa8: 0x2100000,\n      0xb8: 0x100001,\n      0xc8: 0x400,\n      0xd8: 0x2100401,\n      0xe8: 0x1,\n      0xf8: 0x100400,\n      0x100: 0x2000000,\n      0x110: 0x100000,\n      0x120: 0x2000401,\n      0x130: 0x2100001,\n      0x140: 0x100001,\n      0x150: 0x2000400,\n      0x160: 0x2100400,\n      0x170: 0x100401,\n      0x180: 0x401,\n      0x190: 0x2100401,\n      0x1a0: 0x100400,\n      0x1b0: 0x1,\n      0x1c0: 0x0,\n      0x1d0: 0x2100000,\n      0x1e0: 0x2000001,\n      0x1f0: 0x400,\n      0x108: 0x100400,\n      0x118: 0x2000401,\n      0x128: 0x2100001,\n      0x138: 0x1,\n      0x148: 0x2000000,\n      0x158: 0x100000,\n      0x168: 0x401,\n      0x178: 0x2100400,\n      0x188: 0x2000001,\n      0x198: 0x2100000,\n      0x1a8: 0x0,\n      0x1b8: 0x2100401,\n      0x1c8: 0x100401,\n      0x1d8: 0x400,\n      0x1e8: 0x2000400,\n      0x1f8: 0x100001 },\n\n    {\n      0x0: 0x8000820,\n      0x1: 0x20000,\n      0x2: 0x8000000,\n      0x3: 0x20,\n      0x4: 0x20020,\n      0x5: 0x8020820,\n      0x6: 0x8020800,\n      0x7: 0x800,\n      0x8: 0x8020000,\n      0x9: 0x8000800,\n      0xa: 0x20800,\n      0xb: 0x8020020,\n      0xc: 0x820,\n      0xd: 0x0,\n      0xe: 0x8000020,\n      0xf: 0x20820,\n      0x80000000: 0x800,\n      0x80000001: 0x8020820,\n      0x80000002: 0x8000820,\n      0x80000003: 0x8000000,\n      0x80000004: 0x8020000,\n      0x80000005: 0x20800,\n      0x80000006: 0x20820,\n      0x80000007: 0x20,\n      0x80000008: 0x8000020,\n      0x80000009: 0x820,\n      0x8000000a: 0x20020,\n      0x8000000b: 0x8020800,\n      0x8000000c: 0x0,\n      0x8000000d: 0x8020020,\n      0x8000000e: 0x8000800,\n      0x8000000f: 0x20000,\n      0x10: 0x20820,\n      0x11: 0x8020800,\n      0x12: 0x20,\n      0x13: 0x800,\n      0x14: 0x8000800,\n      0x15: 0x8000020,\n      0x16: 0x8020020,\n      0x17: 0x20000,\n      0x18: 0x0,\n      0x19: 0x20020,\n      0x1a: 0x8020000,\n      0x1b: 0x8000820,\n      0x1c: 0x8020820,\n      0x1d: 0x20800,\n      0x1e: 0x820,\n      0x1f: 0x8000000,\n      0x80000010: 0x20000,\n      0x80000011: 0x800,\n      0x80000012: 0x8020020,\n      0x80000013: 0x20820,\n      0x80000014: 0x20,\n      0x80000015: 0x8020000,\n      0x80000016: 0x8000000,\n      0x80000017: 0x8000820,\n      0x80000018: 0x8020820,\n      0x80000019: 0x8000020,\n      0x8000001a: 0x8000800,\n      0x8000001b: 0x0,\n      0x8000001c: 0x20800,\n      0x8000001d: 0x820,\n      0x8000001e: 0x20020,\n      0x8000001f: 0x8020800 }];\n\n\n\n    // Masks that select the SBOX input\n    var SBOX_MASK = [\n    0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n    0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];\n\n\n    /**\n                                                      * DES block cipher algorithm.\n                                                      */\n    var DES = C_algo.DES = BlockCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var key = this._key;\n        var keyWords = key.words;\n\n        // Select 56 bits according to PC1\n        var keyBits = [];\n        for (var i = 0; i < 56; i++) {\n          var keyBitPos = PC1[i] - 1;\n          keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;\n        }\n\n        // Assemble 16 subkeys\n        var subKeys = this._subKeys = [];\n        for (var nSubKey = 0; nSubKey < 16; nSubKey++) {\n          // Create subkey\n          var subKey = subKeys[nSubKey] = [];\n\n          // Shortcut\n          var bitShift = BIT_SHIFTS[nSubKey];\n\n          // Select 48 bits according to PC2\n          for (var i = 0; i < 24; i++) {\n            // Select from the left 28 key bits\n            subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;\n\n            // Select from the right 28 key bits\n            subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;\n          }\n\n          // Since each subkey is applied to an expanded 32-bit input,\n          // the subkey can be broken into 8 values scaled to 32-bits,\n          // which allows the key to be used without expansion\n          subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;\n          for (var i = 1; i < 7; i++) {\n            subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;\n          }\n          subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;\n        }\n\n        // Compute inverse subkeys\n        var invSubKeys = this._invSubKeys = [];\n        for (var i = 0; i < 16; i++) {\n          invSubKeys[i] = subKeys[15 - i];\n        }\n      },\n\n      encryptBlock: function encryptBlock(M, offset) {\n        this._doCryptBlock(M, offset, this._subKeys);\n      },\n\n      decryptBlock: function decryptBlock(M, offset) {\n        this._doCryptBlock(M, offset, this._invSubKeys);\n      },\n\n      _doCryptBlock: function _doCryptBlock(M, offset, subKeys) {\n        // Get input\n        this._lBlock = M[offset];\n        this._rBlock = M[offset + 1];\n\n        // Initial permutation\n        exchangeLR.call(this, 4, 0x0f0f0f0f);\n        exchangeLR.call(this, 16, 0x0000ffff);\n        exchangeRL.call(this, 2, 0x33333333);\n        exchangeRL.call(this, 8, 0x00ff00ff);\n        exchangeLR.call(this, 1, 0x55555555);\n\n        // Rounds\n        for (var round = 0; round < 16; round++) {\n          // Shortcuts\n          var subKey = subKeys[round];\n          var lBlock = this._lBlock;\n          var rBlock = this._rBlock;\n\n          // Feistel function\n          var f = 0;\n          for (var i = 0; i < 8; i++) {\n            f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n          }\n          this._lBlock = rBlock;\n          this._rBlock = lBlock ^ f;\n        }\n\n        // Undo swap from last round\n        var t = this._lBlock;\n        this._lBlock = this._rBlock;\n        this._rBlock = t;\n\n        // Final permutation\n        exchangeLR.call(this, 1, 0x55555555);\n        exchangeRL.call(this, 8, 0x00ff00ff);\n        exchangeRL.call(this, 2, 0x33333333);\n        exchangeLR.call(this, 16, 0x0000ffff);\n        exchangeLR.call(this, 4, 0x0f0f0f0f);\n\n        // Set output\n        M[offset] = this._lBlock;\n        M[offset + 1] = this._rBlock;\n      },\n\n      keySize: 64 / 32,\n\n      ivSize: 64 / 32,\n\n      blockSize: 64 / 32 });\n\n\n    // Swap bits across the left and right words\n    function exchangeLR(offset, mask) {\n      var t = (this._lBlock >>> offset ^ this._rBlock) & mask;\n      this._rBlock ^= t;\n      this._lBlock ^= t << offset;\n    }\n\n    function exchangeRL(offset, mask) {\n      var t = (this._rBlock >>> offset ^ this._lBlock) & mask;\n      this._lBlock ^= t;\n      this._rBlock ^= t << offset;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n       */\n    C.DES = BlockCipher._createHelper(DES);\n\n    /**\n                                             * Triple-DES block cipher algorithm.\n                                             */\n    var TripleDES = C_algo.TripleDES = BlockCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var key = this._key;\n        var keyWords = key.words;\n\n        // Create DES instances\n        this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));\n        this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));\n        this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));\n      },\n\n      encryptBlock: function encryptBlock(M, offset) {\n        this._des1.encryptBlock(M, offset);\n        this._des2.decryptBlock(M, offset);\n        this._des3.encryptBlock(M, offset);\n      },\n\n      decryptBlock: function decryptBlock(M, offset) {\n        this._des3.decryptBlock(M, offset);\n        this._des2.encryptBlock(M, offset);\n        this._des1.decryptBlock(M, offset);\n      },\n\n      keySize: 192 / 32,\n\n      ivSize: 64 / 32,\n\n      blockSize: 64 / 32 });\n\n\n    /**\n                              * Shortcut functions to the cipher's object interface.\n                              *\n                              * @example\n                              *\n                              *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n                              *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n                              */\n    C.TripleDES = BlockCipher._createHelper(TripleDES);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var StreamCipher = C_lib.StreamCipher;\n    var C_algo = C.algo;\n\n    /**\n                          * RC4 stream cipher algorithm.\n                          */\n    var RC4 = C_algo.RC4 = StreamCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var key = this._key;\n        var keyWords = key.words;\n        var keySigBytes = key.sigBytes;\n\n        // Init sbox\n        var S = this._S = [];\n        for (var i = 0; i < 256; i++) {\n          S[i] = i;\n        }\n\n        // Key setup\n        for (var i = 0, j = 0; i < 256; i++) {\n          var keyByteIndex = i % keySigBytes;\n          var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;\n\n          j = (j + S[i] + keyByte) % 256;\n\n          // Swap\n          var t = S[i];\n          S[i] = S[j];\n          S[j] = t;\n        }\n\n        // Counters\n        this._i = this._j = 0;\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        M[offset] ^= generateKeystreamWord.call(this);\n      },\n\n      keySize: 256 / 32,\n\n      ivSize: 0 });\n\n\n    function generateKeystreamWord() {\n      // Shortcuts\n      var S = this._S;\n      var i = this._i;\n      var j = this._j;\n\n      // Generate keystream word\n      var keystreamWord = 0;\n      for (var n = 0; n < 4; n++) {\n        i = (i + 1) % 256;\n        j = (j + S[i]) % 256;\n\n        // Swap\n        var t = S[i];\n        S[i] = S[j];\n        S[j] = t;\n\n        keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;\n      }\n\n      // Update counters\n      this._i = i;\n      this._j = j;\n\n      return keystreamWord;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n       */\n    C.RC4 = StreamCipher._createHelper(RC4);\n\n    /**\n                                              * Modified RC4 stream cipher algorithm.\n                                              */\n    var RC4Drop = C_algo.RC4Drop = RC4.extend({\n      /**\n                                                 * Configuration options.\n                                                 *\n                                                 * @property {number} drop The number of keystream words to drop. Default 192\n                                                 */\n      cfg: RC4.cfg.extend({\n        drop: 192 }),\n\n\n      _doReset: function _doReset() {\n        RC4._doReset.call(this);\n\n        // Drop\n        for (var i = this.cfg.drop; i > 0; i--) {\n          generateKeystreamWord.call(this);\n        }\n      } });\n\n\n    /**\n             * Shortcut functions to the cipher's object interface.\n             *\n             * @example\n             *\n             *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n             *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n             */\n    C.RC4Drop = StreamCipher._createHelper(RC4Drop);\n  })();\n\n\n  /** @preserve\n         * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n         * derived from CryptoJS.mode.CTR\n         * Jan Hruby jhruby.web@gmail.com\n         */\n  CryptoJS.mode.CTRGladman = function () {\n    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n    function incWord(word)\n    {\n      if ((word >> 24 & 0xff) === 0xff) {//overflow\n        var b1 = word >> 16 & 0xff;\n        var b2 = word >> 8 & 0xff;\n        var b3 = word & 0xff;\n\n        if (b1 === 0xff) // overflow b1\n          {\n            b1 = 0;\n            if (b2 === 0xff)\n            {\n              b2 = 0;\n              if (b3 === 0xff)\n              {\n                b3 = 0;\n              } else\n\n              {\n                ++b3;\n              }\n            } else\n\n            {\n              ++b2;\n            }\n          } else\n\n        {\n          ++b1;\n        }\n\n        word = 0;\n        word += b1 << 16;\n        word += b2 << 8;\n        word += b3;\n      } else\n\n      {\n        word += 0x01 << 24;\n      }\n      return word;\n    }\n\n    function incCounter(counter)\n    {\n      if ((counter[0] = incWord(counter[0])) === 0)\n      {\n        // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n        counter[1] = incWord(counter[1]);\n      }\n      return counter;\n    }\n\n    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n        var iv = this._iv;\n        var counter = this._counter;\n\n        // Generate keystream\n        if (iv) {\n          counter = this._counter = iv.slice(0);\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        }\n\n        incCounter(counter);\n\n        var keystream = counter.slice(0);\n        cipher.encryptBlock(keystream, 0);\n\n        // Encrypt\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      } });\n\n\n    CTRGladman.Decryptor = Encryptor;\n\n    return CTRGladman;\n  }();\n\n\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var StreamCipher = C_lib.StreamCipher;\n    var C_algo = C.algo;\n\n    // Reusable objects\n    var S = [];\n    var C_ = [];\n    var G = [];\n\n    /**\n                 * Rabbit stream cipher algorithm\n                 */\n    var Rabbit = C_algo.Rabbit = StreamCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var K = this._key.words;\n        var iv = this.cfg.iv;\n\n        // Swap endian\n        for (var i = 0; i < 4; i++) {\n          K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff |\n          (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;\n        }\n\n        // Generate initial state values\n        var X = this._X = [\n        K[0], K[3] << 16 | K[2] >>> 16,\n        K[1], K[0] << 16 | K[3] >>> 16,\n        K[2], K[1] << 16 | K[0] >>> 16,\n        K[3], K[2] << 16 | K[1] >>> 16];\n\n\n        // Generate initial counter values\n        var C = this._C = [\n        K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff,\n        K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff,\n        K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff,\n        K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];\n\n\n        // Carry bit\n        this._b = 0;\n\n        // Iterate the system four times\n        for (var i = 0; i < 4; i++) {\n          nextState.call(this);\n        }\n\n        // Modify the counters\n        for (var i = 0; i < 8; i++) {\n          C[i] ^= X[i + 4 & 7];\n        }\n\n        // IV setup\n        if (iv) {\n          // Shortcuts\n          var IV = iv.words;\n          var IV_0 = IV[0];\n          var IV_1 = IV[1];\n\n          // Generate four subvectors\n          var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;\n          var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;\n          var i1 = i0 >>> 16 | i2 & 0xffff0000;\n          var i3 = i2 << 16 | i0 & 0x0000ffff;\n\n          // Modify counter values\n          C[0] ^= i0;\n          C[1] ^= i1;\n          C[2] ^= i2;\n          C[3] ^= i3;\n          C[4] ^= i0;\n          C[5] ^= i1;\n          C[6] ^= i2;\n          C[7] ^= i3;\n\n          // Iterate the system four times\n          for (var i = 0; i < 4; i++) {\n            nextState.call(this);\n          }\n        }\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var X = this._X;\n\n        // Iterate the system\n        nextState.call(this);\n\n        // Generate four keystream words\n        S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;\n        S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;\n        S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;\n        S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;\n\n        for (var i = 0; i < 4; i++) {\n          // Swap endian\n          S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff |\n          (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;\n\n          // Encrypt\n          M[offset + i] ^= S[i];\n        }\n      },\n\n      blockSize: 128 / 32,\n\n      ivSize: 64 / 32 });\n\n\n    function nextState() {\n      // Shortcuts\n      var X = this._X;\n      var C = this._C;\n\n      // Save old counter values\n      for (var i = 0; i < 8; i++) {\n        C_[i] = C[i];\n      }\n\n      // Calculate new counter values\n      C[0] = C[0] + 0x4d34d34d + this._b | 0;\n      C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;\n      C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;\n      C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;\n      C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;\n      C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;\n      C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;\n      C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;\n      this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;\n\n      // Calculate the g-values\n      for (var i = 0; i < 8; i++) {\n        var gx = X[i] + C[i];\n\n        // Construct high and low argument for squaring\n        var ga = gx & 0xffff;\n        var gb = gx >>> 16;\n\n        // Calculate high and low result of squaring\n        var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;\n        var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);\n\n        // High XOR low\n        G[i] = gh ^ gl;\n      }\n\n      // Calculate new state values\n      X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;\n      X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;\n      X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;\n      X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;\n      X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;\n      X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;\n      X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;\n      X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);\n       */\n    C.Rabbit = StreamCipher._createHelper(Rabbit);\n  })();\n\n\n  /**\n         * Counter block mode.\n         */\n  CryptoJS.mode.CTR = function () {\n    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n    var Encryptor = CTR.Encryptor = CTR.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n        var iv = this._iv;\n        var counter = this._counter;\n\n        // Generate keystream\n        if (iv) {\n          counter = this._counter = iv.slice(0);\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        }\n        var keystream = counter.slice(0);\n        cipher.encryptBlock(keystream, 0);\n\n        // Increment counter\n        counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;\n\n        // Encrypt\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      } });\n\n\n    CTR.Decryptor = Encryptor;\n\n    return CTR;\n  }();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var StreamCipher = C_lib.StreamCipher;\n    var C_algo = C.algo;\n\n    // Reusable objects\n    var S = [];\n    var C_ = [];\n    var G = [];\n\n    /**\n                 * Rabbit stream cipher algorithm.\n                 *\n                 * This is a legacy version that neglected to convert the key to little-endian.\n                 * This error doesn't affect the cipher's security,\n                 * but it does affect its compatibility with other implementations.\n                 */\n    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var K = this._key.words;\n        var iv = this.cfg.iv;\n\n        // Generate initial state values\n        var X = this._X = [\n        K[0], K[3] << 16 | K[2] >>> 16,\n        K[1], K[0] << 16 | K[3] >>> 16,\n        K[2], K[1] << 16 | K[0] >>> 16,\n        K[3], K[2] << 16 | K[1] >>> 16];\n\n\n        // Generate initial counter values\n        var C = this._C = [\n        K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff,\n        K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff,\n        K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff,\n        K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];\n\n\n        // Carry bit\n        this._b = 0;\n\n        // Iterate the system four times\n        for (var i = 0; i < 4; i++) {\n          nextState.call(this);\n        }\n\n        // Modify the counters\n        for (var i = 0; i < 8; i++) {\n          C[i] ^= X[i + 4 & 7];\n        }\n\n        // IV setup\n        if (iv) {\n          // Shortcuts\n          var IV = iv.words;\n          var IV_0 = IV[0];\n          var IV_1 = IV[1];\n\n          // Generate four subvectors\n          var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;\n          var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;\n          var i1 = i0 >>> 16 | i2 & 0xffff0000;\n          var i3 = i2 << 16 | i0 & 0x0000ffff;\n\n          // Modify counter values\n          C[0] ^= i0;\n          C[1] ^= i1;\n          C[2] ^= i2;\n          C[3] ^= i3;\n          C[4] ^= i0;\n          C[5] ^= i1;\n          C[6] ^= i2;\n          C[7] ^= i3;\n\n          // Iterate the system four times\n          for (var i = 0; i < 4; i++) {\n            nextState.call(this);\n          }\n        }\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var X = this._X;\n\n        // Iterate the system\n        nextState.call(this);\n\n        // Generate four keystream words\n        S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;\n        S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;\n        S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;\n        S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;\n\n        for (var i = 0; i < 4; i++) {\n          // Swap endian\n          S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff |\n          (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;\n\n          // Encrypt\n          M[offset + i] ^= S[i];\n        }\n      },\n\n      blockSize: 128 / 32,\n\n      ivSize: 64 / 32 });\n\n\n    function nextState() {\n      // Shortcuts\n      var X = this._X;\n      var C = this._C;\n\n      // Save old counter values\n      for (var i = 0; i < 8; i++) {\n        C_[i] = C[i];\n      }\n\n      // Calculate new counter values\n      C[0] = C[0] + 0x4d34d34d + this._b | 0;\n      C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;\n      C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;\n      C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;\n      C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;\n      C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;\n      C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;\n      C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;\n      this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;\n\n      // Calculate the g-values\n      for (var i = 0; i < 8; i++) {\n        var gx = X[i] + C[i];\n\n        // Construct high and low argument for squaring\n        var ga = gx & 0xffff;\n        var gb = gx >>> 16;\n\n        // Calculate high and low result of squaring\n        var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;\n        var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);\n\n        // High XOR low\n        G[i] = gh ^ gl;\n      }\n\n      // Calculate new state values\n      X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;\n      X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;\n      X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;\n      X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;\n      X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;\n      X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;\n      X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;\n      X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);\n       */\n    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);\n  })();\n\n\n  /**\n         * Zero padding strategy.\n         */\n  CryptoJS.pad.ZeroPadding = {\n    pad: function pad(data, blockSize) {\n      // Shortcut\n      var blockSizeBytes = blockSize * 4;\n\n      // Pad\n      data.clamp();\n      data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);\n    },\n\n    unpad: function unpad(data) {\n      // Shortcut\n      var dataWords = data.words;\n\n      // Unpad\n      var i = data.sigBytes - 1;\n      while (!(dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)) {\n        i--;\n      }\n      data.sigBytes = i + 1;\n    } };\n\n\n\n  return CryptoJS;\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),

/***/ 18:
/*!**********************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/video-APP/task/common/luch-request/index.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _request = _interopRequireDefault(__webpack_require__(/*! ./request */ 19));\nvar _common = _interopRequireDefault(__webpack_require__(/*! @/common/common.js */ 15));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nvar http = new _request.default();\n\nhttp.setConfig(function (config) {/* 设置全局配置 */\n  // config.baseUrl = 'http://task.com/plugin/task/index/api/index.html'\n  config.baseUrl = 'https://task.zhengdui.com/api.html';\n  config.dataType = 'json';\n  config.responseType = 'json';\n  return config;\n});\n\nhttp.interceptor.request(function (config, cancel) {/* 请求之前拦截器 */\n  var res = {};\n  if (config.name === 'file') {\n    res.data = config.formData || {};\n  } else {\n    config.header = {\n      'Content-Type': 'application/x-www-form-urlencoded' };\n\n    res.data = config.data || {};\n  }\n  res.api = config.url;\n  res = JSON.stringify(res);\n  var data = {\n    data: res };\n\n  if (res) {\n    data.data = _common.default.aes(res);\n  }\n  if (config.name === 'file') {\n    config.formData = data;\n  } else {\n    config.data = data;\n  }\n  config.url = '';\n  return config;\n});\n\nhttp.interceptor.response(function (response) {/* 请求之后拦截器 */\n  var data = response.data;\n  var res = _common.default.getJSON(data);\n  if (false === res) {\n    if (typeof data === 'string') {\n      data = _common.default.aes(data, true);\n      if (data != '') {\n        data = JSON.parse(data);\n      }\n    }\n  } else {\n    data = res;\n  }\n  response.data = data;\n  return response;\n}, function (response) {\n  return response;\n});var _default =\n\nhttp;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2x1Y2gtcmVxdWVzdC9pbmRleC5qcyJdLCJuYW1lcyI6WyJodHRwIiwiUmVxdWVzdCIsInNldENvbmZpZyIsImNvbmZpZyIsImJhc2VVcmwiLCJkYXRhVHlwZSIsInJlc3BvbnNlVHlwZSIsImludGVyY2VwdG9yIiwicmVxdWVzdCIsImNhbmNlbCIsInJlcyIsIm5hbWUiLCJkYXRhIiwiZm9ybURhdGEiLCJoZWFkZXIiLCJhcGkiLCJ1cmwiLCJKU09OIiwic3RyaW5naWZ5IiwiJGFwaSIsImFlcyIsInJlc3BvbnNlIiwiZ2V0SlNPTiIsInBhcnNlIl0sIm1hcHBpbmdzIjoidUZBQUE7QUFDQSx3Rjs7QUFFQSxJQUFNQSxJQUFJLEdBQUcsSUFBSUMsZ0JBQUosRUFBYjs7QUFFQUQsSUFBSSxDQUFDRSxTQUFMLENBQWUsVUFBQ0MsTUFBRCxFQUFZLENBQUU7QUFDNUI7QUFDR0EsUUFBTSxDQUFDQyxPQUFQLEdBQWlCLG9DQUFqQjtBQUNIRCxRQUFNLENBQUNFLFFBQVAsR0FBa0IsTUFBbEI7QUFDQUYsUUFBTSxDQUFDRyxZQUFQLEdBQXNCLE1BQXRCO0FBQ0EsU0FBT0gsTUFBUDtBQUNBLENBTkQ7O0FBUUFILElBQUksQ0FBQ08sV0FBTCxDQUFpQkMsT0FBakIsQ0FBeUIsVUFBQ0wsTUFBRCxFQUFTTSxNQUFULEVBQW9CLENBQUU7QUFDOUMsTUFBSUMsR0FBRyxHQUFHLEVBQVY7QUFDQSxNQUFHUCxNQUFNLENBQUNRLElBQVAsS0FBZ0IsTUFBbkIsRUFBMkI7QUFDMUJELE9BQUcsQ0FBQ0UsSUFBSixHQUFXVCxNQUFNLENBQUNVLFFBQVAsSUFBbUIsRUFBOUI7QUFDQSxHQUZELE1BRUs7QUFDSlYsVUFBTSxDQUFDVyxNQUFQLEdBQWdCO0FBQ2Ysc0JBQWdCLG1DQURELEVBQWhCOztBQUdBSixPQUFHLENBQUNFLElBQUosR0FBV1QsTUFBTSxDQUFDUyxJQUFQLElBQWUsRUFBMUI7QUFDQTtBQUNERixLQUFHLENBQUNLLEdBQUosR0FBV1osTUFBTSxDQUFDYSxHQUFsQjtBQUNBTixLQUFHLEdBQUdPLElBQUksQ0FBQ0MsU0FBTCxDQUFlUixHQUFmLENBQU47QUFDQSxNQUFJRSxJQUFJLEdBQUc7QUFDVkEsUUFBSSxFQUFFRixHQURJLEVBQVg7O0FBR0EsTUFBSUEsR0FBSixFQUFTO0FBQ1JFLFFBQUksQ0FBQ0EsSUFBTCxHQUFZTyxnQkFBS0MsR0FBTCxDQUFTVixHQUFULENBQVo7QUFDQTtBQUNELE1BQUdQLE1BQU0sQ0FBQ1EsSUFBUCxLQUFnQixNQUFuQixFQUEyQjtBQUMxQlIsVUFBTSxDQUFDVSxRQUFQLEdBQWtCRCxJQUFsQjtBQUNBLEdBRkQsTUFFSztBQUNKVCxVQUFNLENBQUNTLElBQVAsR0FBY0EsSUFBZDtBQUNBO0FBQ0VULFFBQU0sQ0FBQ2EsR0FBUCxHQUFjLEVBQWQ7QUFDQSxTQUFPYixNQUFQO0FBQ0gsQ0F6QkQ7O0FBMkJBSCxJQUFJLENBQUNPLFdBQUwsQ0FBaUJjLFFBQWpCLENBQTBCLFVBQUNBLFFBQUQsRUFBYyxDQUFFO0FBQ3pDLE1BQUlULElBQUksR0FBR1MsUUFBUSxDQUFDVCxJQUFwQjtBQUNHLE1BQUlGLEdBQUcsR0FBR1MsZ0JBQUtHLE9BQUwsQ0FBYVYsSUFBYixDQUFWO0FBQ0gsTUFBSSxVQUFVRixHQUFkLEVBQW1CO0FBQ1osUUFBSSxPQUFPRSxJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzFCQSxVQUFJLEdBQUdPLGdCQUFLQyxHQUFMLENBQVNSLElBQVQsRUFBZSxJQUFmLENBQVA7QUFDQSxVQUFJQSxJQUFJLElBQUksRUFBWixFQUFnQjtBQUNaQSxZQUFJLEdBQUdLLElBQUksQ0FBQ00sS0FBTCxDQUFXWCxJQUFYLENBQVA7QUFDSDtBQUNKO0FBQ1AsR0FQRCxNQU9PO0FBQ0FBLFFBQUksR0FBR0YsR0FBUDtBQUNOO0FBQ0RXLFVBQVEsQ0FBQ1QsSUFBVCxHQUFnQkEsSUFBaEI7QUFDQSxTQUFPUyxRQUFQO0FBQ0EsQ0FmRCxFQWVHLFVBQUNBLFFBQUQsRUFBYztBQUNoQixTQUFPQSxRQUFQO0FBQ0EsQ0FqQkQsRTs7QUFtQmVyQixJIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlcXVlc3QgZnJvbSAnLi9yZXF1ZXN0J1xyXG5pbXBvcnQgJGFwaSBmcm9tICdAL2NvbW1vbi9jb21tb24uanMnXHJcblxyXG5jb25zdCBodHRwID0gbmV3IFJlcXVlc3QoKVxyXG5cclxuaHR0cC5zZXRDb25maWcoKGNvbmZpZykgPT4geyAvKiDorr7nva7lhajlsYDphY3nva4gKi9cclxuXHQvLyBjb25maWcuYmFzZVVybCA9ICdodHRwOi8vdGFzay5jb20vcGx1Z2luL3Rhc2svaW5kZXgvYXBpL2luZGV4Lmh0bWwnXHJcbiAgICBjb25maWcuYmFzZVVybCA9ICdodHRwczovL3Rhc2suemhlbmdkdWkuY29tL2FwaS5odG1sJ1xyXG5cdGNvbmZpZy5kYXRhVHlwZSA9ICdqc29uJ1xyXG5cdGNvbmZpZy5yZXNwb25zZVR5cGUgPSAnanNvbidcclxuXHRyZXR1cm4gY29uZmlnXHJcbn0pXHJcblxyXG5odHRwLmludGVyY2VwdG9yLnJlcXVlc3QoKGNvbmZpZywgY2FuY2VsKSA9PiB7IC8qIOivt+axguS5i+WJjeaLpuaIquWZqCAqL1xyXG5cdHZhciByZXMgPSB7fVxyXG5cdGlmKGNvbmZpZy5uYW1lID09PSAnZmlsZScpIHtcclxuXHRcdHJlcy5kYXRhID0gY29uZmlnLmZvcm1EYXRhIHx8IHt9XHJcblx0fWVsc2V7XHJcblx0XHRjb25maWcuaGVhZGVyID0ge1xyXG5cdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcclxuXHRcdH1cclxuXHRcdHJlcy5kYXRhID0gY29uZmlnLmRhdGEgfHwge31cclxuXHR9XHJcblx0cmVzLmFwaSAgPSBjb25maWcudXJsXHJcblx0cmVzID0gSlNPTi5zdHJpbmdpZnkocmVzKVxyXG5cdHZhciBkYXRhID0ge1xyXG5cdFx0ZGF0YTogcmVzXHJcblx0fVxyXG5cdGlmIChyZXMpIHtcclxuXHRcdGRhdGEuZGF0YSA9ICRhcGkuYWVzKHJlcylcclxuXHR9XHJcblx0aWYoY29uZmlnLm5hbWUgPT09ICdmaWxlJykge1xyXG5cdFx0Y29uZmlnLmZvcm1EYXRhID0gZGF0YVxyXG5cdH1lbHNle1xyXG5cdFx0Y29uZmlnLmRhdGEgPSBkYXRhXHJcblx0fVxyXG4gICAgY29uZmlnLnVybCAgPSAnJ1xyXG4gICAgcmV0dXJuIGNvbmZpZ1xyXG59KVxyXG5cclxuaHR0cC5pbnRlcmNlcHRvci5yZXNwb25zZSgocmVzcG9uc2UpID0+IHsgLyog6K+35rGC5LmL5ZCO5oum5oiq5ZmoICovXHJcblx0dmFyIGRhdGEgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgdmFyIHJlcyA9ICRhcGkuZ2V0SlNPTihkYXRhKVxyXG5cdGlmIChmYWxzZSA9PT0gcmVzKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBkYXRhID0gJGFwaS5hZXMoZGF0YSwgdHJ1ZSlcclxuICAgICAgICAgICAgaWYgKGRhdGEgIT0gJycpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cdH0gZWxzZSB7XHJcbiAgICAgICAgZGF0YSA9IHJlcztcclxuXHR9XHJcblx0cmVzcG9uc2UuZGF0YSA9IGRhdGFcclxuXHRyZXR1cm4gcmVzcG9uc2VcclxufSwgKHJlc3BvbnNlKSA9PiB7XHJcblx0cmV0dXJuIHJlc3BvbnNlXHJcbn0pXHJcblxyXG5leHBvcnQgZGVmYXVsdCBodHRwXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n");

/***/ }),

/***/ 19:
/*!************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/video-APP/task/common/luch-request/request.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 20));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);}_next(undefined);});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;} /**\r\nequest 1.0.0\r\nlass Request\r\ndescription luch-request 1.0.0 http请求插件\r\nuthor lu-ch\r\nate 2019-09-06\r\nmail webwork.s@qq.com\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  * http://ext.dcloud.net.cn/plugin?id=392\r\nvar\nRequest = /*#__PURE__*/function () {function Request() {var _this = this;_classCallCheck(this, Request);_defineProperty(this, \"config\",\n    {\n      baseUrl: '',\n      header: {\n        'Content-Type': 'application/json;charset=UTF-8' },\n\n      method: 'GET',\n      dataType: 'json',\n      responseType: 'text' });_defineProperty(this, \"interceptor\",\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    {\n      /**\r\n       * @param {Request~requestCallback} cb - 请求之前拦截,接收一个函数（config, cancel）=> {return config}。第一个参数为全局config,第二个参数为函数，调用则取消本次请求。\r\n       */\n      request: function request(cb) {\n        if (cb) {\n          _this.requestBeforeFun = cb;\n        }\n      },\n      /**\r\n          * @param {Request~responseCallback} cb 响应拦截器，对响应数据做点什么\r\n          * @param {Request~responseErrCallback} ecb 响应拦截器，对响应错误做点什么\r\n          */\n      response: function response(cb, ecb) {\n        if (cb && ecb) {\n          _this.requestComFun = cb;\n          _this.requestComFail = ecb;\n        }\n      } });}_createClass(Request, [{ key: \"requestBeforeFun\", value: function requestBeforeFun(\n\n\n    config) {\n      return config;\n    } }, { key: \"requestComFun\", value: function requestComFun(\n\n    response) {\n      return response;\n    } }, { key: \"requestComFail\", value: function requestComFail(\n\n    response) {\n      return response;\n    }\n\n    /**\r\n       * @Function\r\n       * @param {Request~setConfigCallback} f - 设置全局默认配置\r\n       */ }, { key: \"setConfig\", value: function setConfig(\n    f) {\n      this.config = f(this.config);\n    }\n\n    /**\r\n       * @Function\r\n       * @param {Object} options - 请求配置项\r\n       * @prop {String} options.url - 请求路径\r\n       * @prop {Object} options.data - 请求参数\r\n       * @prop {Object} [options.responseType = config.responseType] [text|arraybuffer] - 响应的数据类型\r\n       * @prop {Object} [options.dataType = config.dataType] - 如果设为 json，会尝试对返回的数据做一次 JSON.parse\r\n       * @prop {Object} [options.header = config.header] - 请求header\r\n       * @prop {Object} [options.method = config.method] - 请求方法\r\n       * @returns {Promise<unknown>}\r\n       */ }, { key: \"request\", value: function () {var _request = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee() {var _this2 = this;var options,_args = arguments;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:\n                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                options.baseUrl = this.config.baseUrl;\n                options.dataType = options.dataType || this.config.dataType;\n                options.responseType = options.responseType || this.config.responseType;\n                options.url = options.url || '';\n                options.data = options.data || {};\n                options.params = options.params || {};\n                options.header = options.header || this.config.header;\n                options.method = options.method || this.config.method;return _context.abrupt(\"return\",\n                new Promise(function (resolve, reject) {\n                  var next = true;\n\n                  var handleRe = {};\n                  options.complete = function (response) {\n                    response.config = handleRe;\n                    if (response.statusCode === 200) {// 成功\n                      response = _this2.requestComFun(response);\n                      resolve(response);\n                    } else {\n                      response = _this2.requestComFail(response);\n                      reject(response);\n                    }\n                  };\n                  var cancel = function cancel() {var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'handle cancel';var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : options;\n                    var err = {\n                      errMsg: t,\n                      config: config };\n\n                    reject(err);\n                    next = false;\n                  };\n\n                  handleRe = _objectSpread({}, _this2.requestBeforeFun(options, cancel));\n                  var _config = _objectSpread({}, handleRe);\n                  if (!next) return;\n\n                  var mergeUrl = Request.posUrl(options.url) ? options.url : options.baseUrl + options.url;\n                  if (JSON.stringify(options.params) !== '{}') {\n                    var paramsH = Request.addQueryString(options.params);\n                    mergeUrl += mergeUrl.indexOf('?') === -1 ? \"?\".concat(paramsH) : \"&\".concat(paramsH);\n                  }\n                  _config.url = mergeUrl;\n                  uni.request(_config);\n                }));case 10:case \"end\":return _context.stop();}}}, _callee, this);}));function request() {return _request.apply(this, arguments);}return request;}() }, { key: \"get\", value: function get(\n\n\n    url) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request(_objectSpread({\n        url: url,\n        method: 'GET' },\n      options));\n\n    } }, { key: \"post\", value: function post(\n\n    url, data) {var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request(_objectSpread({\n        url: url,\n        data: data,\n        method: 'POST' },\n      options));\n\n    } }, { key: \"put\", value: function put(\n\n\n    url, data) {var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request(_objectSpread({\n        url: url,\n        data: data,\n        method: 'PUT' },\n      options));\n\n    } }, { key: \"delete\", value: function _delete(\n\n\n\n\n    url, data) {var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request(_objectSpread({\n        url: url,\n        data: data,\n        method: 'DELETE' },\n      options));\n\n    } }, { key: \"connect\", value: function connect(\n\n\n\n\n    url, data) {var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request(_objectSpread({\n        url: url,\n        data: data,\n        method: 'CONNECT' },\n      options));\n\n    } }, { key: \"head\", value: function head(\n\n\n\n\n    url, data) {var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request(_objectSpread({\n        url: url,\n        data: data,\n        method: 'HEAD' },\n      options));\n\n    } }, { key: \"options\", value: function options(\n\n\n\n\n    url, data) {var _options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request(_objectSpread({\n        url: url,\n        data: data,\n        method: 'OPTIONS' },\n      _options));\n\n    } }, { key: \"trace\", value: function trace(\n\n\n\n\n    url, data) {var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request(_objectSpread({\n        url: url,\n        data: data,\n        method: 'TRACE' },\n      options));\n\n    } }, { key: \"upload\", value: function upload(\n\n\n\n    url, _ref)\n\n\n\n\n\n\n\n\n\n\n    {var _this3 = this;var files = _ref.files,filePath = _ref.filePath,name = _ref.name,header = _ref.header,formData = _ref.formData;\n      return new Promise(function (resolve, reject) {\n        var next = true;\n        var handleRe = {};\n        var pubConfig = {\n          baseUrl: _this3.config.baseUrl,\n          url: url,\n\n          files: files,\n\n\n\n\n          filePath: filePath,\n          method: 'UPLOAD',\n          name: name,\n          header: header,\n          formData: formData,\n          complete: function complete(response) {\n            response.config = handleRe;\n            if (response.statusCode === 200) {// 成功\n              response = _this3.requestComFun(response);\n              resolve(response);\n            } else {\n              response = _this3.requestComFail(response);\n              reject(response);\n            }\n          } };\n\n\n        var cancel = function cancel() {var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'handle cancel';var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : pubConfig;\n          var err = {\n            errMsg: t,\n            config: config };\n\n          reject(err);\n          next = false;\n        };\n\n        handleRe = _objectSpread({}, _this3.requestBeforeFun(pubConfig, cancel));\n        var _config = _objectSpread({}, handleRe);\n        if (!next) return;\n        _config.url = Request.posUrl(url) ? url : _this3.config.baseUrl + pubConfig.url;\n        uni.uploadFile(_config);\n      });\n    } }], [{ key: \"posUrl\", value: function posUrl(url) {/* 判断url是否为绝对路径 */return /(http|https):\\/\\/([\\w.]+\\/?)\\S*/.test(url);} }, { key: \"addQueryString\", value: function addQueryString(params) {var paramsData = '';Object.keys(params).forEach(function (key) {paramsData += key + '=' + params[key] + '&';});return paramsData.substring(0, paramsData.length - 1);} /**\r\n                                                                                                                                                                                                                                                                                                                                                                            * @property {Function} request 请求拦截器\r\n                                                                                                                                                                                                                                                                                                                                                                            * @property {Function} response 响应拦截器\r\n                                                                                                                                                                                                                                                                                                                                                                            * @type {{request: Request.interceptor.request, response: Request.interceptor.response}}\r\n                                                                                                                                                                                                                                                                                                                                                                            */ }]);return Request;}(); /**\r\n                                                                                                                                                                                                                                                                                                                                                                                                        * setConfig回调\r\n                                                                                                                                                                                                                                                                                                                                                                                                        * @return {Object} - 返回操作后的config\r\n                                                                                                                                                                                                                                                                                                                                                                                                        * @callback Request~setConfigCallback\r\n                                                                                                                                                                                                                                                                                                                                                                                                        * @param {Object} config - 全局默认config\r\n                                                                                                                                                                                                                                                                                                                                                                                                        */\n/**\r\n                                                                                                                                                                                                                                                                                                                                                                                                            * 请求拦截器回调\r\n                                                                                                                                                                                                                                                                                                                                                                                                            * @return {Object} - 返回操作后的config\r\n                                                                                                                                                                                                                                                                                                                                                                                                            * @callback Request~requestCallback\r\n                                                                                                                                                                                                                                                                                                                                                                                                            * @param {Object} config - 全局config\r\n                                                                                                                                                                                                                                                                                                                                                                                                            * @param {Function} [cancel] - 取消请求钩子，调用会取消本次请求\r\n                                                                                                                                                                                                                                                                                                                                                                                                            */\n/**\r\n                                                                                                                                                                                                                                                                                                                                                                                                                * 响应拦截器回调\r\n                                                                                                                                                                                                                                                                                                                                                                                                                * @return {Object} - 返回操作后的response\r\n                                                                                                                                                                                                                                                                                                                                                                                                                * @callback Request~responseCallback\r\n                                                                                                                                                                                                                                                                                                                                                                                                                * @param {Object} response - 请求结果 response\r\n                                                                                                                                                                                                                                                                                                                                                                                                                */\n/**\r\n                                                                                                                                                                                                                                                                                                                                                                                                                    * 响应错误拦截器回调\r\n                                                                                                                                                                                                                                                                                                                                                                                                                    * @return {Object} - 返回操作后的response\r\n                                                                                                                                                                                                                                                                                                                                                                                                                    * @callback Request~responseErrCallback\r\n                                                                                                                                                                                                                                                                                                                                                                                                                    * @param {Object} response - 请求结果 response\r\n                                                                                                                                                                                                                                                                                                                                                                                                                    */exports.default = Request;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 20:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ 21);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDZCQUFxQiIsImZpbGUiOiIyMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n");

/***/ }),

/***/ 21:
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ 22);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLG1CQUFXOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLy8gVGhpcyBtZXRob2Qgb2Ygb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0IG5lZWRzIHRvIGJlXG4vLyBrZXB0IGlkZW50aWNhbCB0byB0aGUgd2F5IGl0IGlzIG9idGFpbmVkIGluIHJ1bnRpbWUuanNcbnZhciBnID0gKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcyB8fCAodHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgJiYgc2VsZik7XG59KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcblxuLy8gVXNlIGBnZXRPd25Qcm9wZXJ0eU5hbWVzYCBiZWNhdXNlIG5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCBjYWxsaW5nXG4vLyBgaGFzT3duUHJvcGVydHlgIG9uIHRoZSBnbG9iYWwgYHNlbGZgIG9iamVjdCBpbiBhIHdvcmtlci4gU2VlICMxODMuXG52YXIgaGFkUnVudGltZSA9IGcucmVnZW5lcmF0b3JSdW50aW1lICYmXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGcpLmluZGV4T2YoXCJyZWdlbmVyYXRvclJ1bnRpbWVcIikgPj0gMDtcblxuLy8gU2F2ZSB0aGUgb2xkIHJlZ2VuZXJhdG9yUnVudGltZSBpbiBjYXNlIGl0IG5lZWRzIHRvIGJlIHJlc3RvcmVkIGxhdGVyLlxudmFyIG9sZFJ1bnRpbWUgPSBoYWRSdW50aW1lICYmIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuXG4vLyBGb3JjZSByZWV2YWx1dGF0aW9uIG9mIHJ1bnRpbWUuanMuXG5nLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9ydW50aW1lXCIpO1xuXG5pZiAoaGFkUnVudGltZSkge1xuICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBydW50aW1lLlxuICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IG9sZFJ1bnRpbWU7XG59IGVsc2Uge1xuICAvLyBSZW1vdmUgdGhlIGdsb2JhbCBwcm9wZXJ0eSBhZGRlZCBieSBydW50aW1lLmpzLlxuICB0cnkge1xuICAgIGRlbGV0ZSBnLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgfSBjYXRjaChlKSB7XG4gICAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n");

/***/ }),

/***/ 22:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),

/***/ 220:
/*!********************************************************************!*\
  !*** C:/Users/Administrator/Desktop/video-APP/task/common/area.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = [{\n  \"value\": \"北京市\",\n  \"label\": \"北京市\",\n  \"children\": [{\n    \"value\": \"市辖区\",\n    \"label\": \"市辖区\",\n    \"children\": [{\n      \"value\": \"东城区\",\n      \"label\": \"东城区\" },\n    {\n      \"value\": \"西城区\",\n      \"label\": \"西城区\" },\n    {\n      \"value\": \"朝阳区\",\n      \"label\": \"朝阳区\" },\n    {\n      \"value\": \"丰台区\",\n      \"label\": \"丰台区\" },\n    {\n      \"value\": \"石景山区\",\n      \"label\": \"石景山区\" },\n    {\n      \"value\": \"海淀区\",\n      \"label\": \"海淀区\" },\n    {\n      \"value\": \"门头沟区\",\n      \"label\": \"门头沟区\" },\n    {\n      \"value\": \"房山区\",\n      \"label\": \"房山区\" },\n    {\n      \"value\": \"通州区\",\n      \"label\": \"通州区\" },\n    {\n      \"value\": \"顺义区\",\n      \"label\": \"顺义区\" },\n    {\n      \"value\": \"昌平区\",\n      \"label\": \"昌平区\" },\n    {\n      \"value\": \"大兴区\",\n      \"label\": \"大兴区\" },\n    {\n      \"value\": \"怀柔区\",\n      \"label\": \"怀柔区\" },\n    {\n      \"value\": \"平谷区\",\n      \"label\": \"平谷区\" },\n    {\n      \"value\": \"密云区\",\n      \"label\": \"密云区\" },\n    {\n      \"value\": \"延庆区\",\n      \"label\": \"延庆区\" }] }] },\n\n\n{\n  \"value\": \"天津市\",\n  \"label\": \"天津市\",\n  \"children\": [{\n    \"value\": \"市辖区\",\n    \"label\": \"市辖区\",\n    \"children\": [{\n      \"value\": \"和平区\",\n      \"label\": \"和平区\" },\n    {\n      \"value\": \"河东区\",\n      \"label\": \"河东区\" },\n    {\n      \"value\": \"河西区\",\n      \"label\": \"河西区\" },\n    {\n      \"value\": \"南开区\",\n      \"label\": \"南开区\" },\n    {\n      \"value\": \"河北区\",\n      \"label\": \"河北区\" },\n    {\n      \"value\": \"红桥区\",\n      \"label\": \"红桥区\" },\n    {\n      \"value\": \"东丽区\",\n      \"label\": \"东丽区\" },\n    {\n      \"value\": \"西青区\",\n      \"label\": \"西青区\" },\n    {\n      \"value\": \"津南区\",\n      \"label\": \"津南区\" },\n    {\n      \"value\": \"北辰区\",\n      \"label\": \"北辰区\" },\n    {\n      \"value\": \"武清区\",\n      \"label\": \"武清区\" },\n    {\n      \"value\": \"宝坻区\",\n      \"label\": \"宝坻区\" },\n    {\n      \"value\": \"滨海新区\",\n      \"label\": \"滨海新区\" },\n    {\n      \"value\": \"宁河区\",\n      \"label\": \"宁河区\" },\n    {\n      \"value\": \"静海区\",\n      \"label\": \"静海区\" },\n    {\n      \"value\": \"蓟州区\",\n      \"label\": \"蓟州区\" }] }] },\n\n\n{\n  \"value\": \"河北省\",\n  \"label\": \"河北省\",\n  \"children\": [{\n    \"value\": \"石家庄市\",\n    \"label\": \"石家庄市\",\n    \"children\": [{\n      \"value\": \"长安区\",\n      \"label\": \"长安区\" },\n    {\n      \"value\": \"桥西区\",\n      \"label\": \"桥西区\" },\n    {\n      \"value\": \"新华区\",\n      \"label\": \"新华区\" },\n    {\n      \"value\": \"井陉矿区\",\n      \"label\": \"井陉矿区\" },\n    {\n      \"value\": \"裕华区\",\n      \"label\": \"裕华区\" },\n    {\n      \"value\": \"藁城区\",\n      \"label\": \"藁城区\" },\n    {\n      \"value\": \"鹿泉区\",\n      \"label\": \"鹿泉区\" },\n    {\n      \"value\": \"栾城区\",\n      \"label\": \"栾城区\" },\n    {\n      \"value\": \"井陉县\",\n      \"label\": \"井陉县\" },\n    {\n      \"value\": \"正定县\",\n      \"label\": \"正定县\" },\n    {\n      \"value\": \"行唐县\",\n      \"label\": \"行唐县\" },\n    {\n      \"value\": \"灵寿县\",\n      \"label\": \"灵寿县\" },\n    {\n      \"value\": \"高邑县\",\n      \"label\": \"高邑县\" },\n    {\n      \"value\": \"深泽县\",\n      \"label\": \"深泽县\" },\n    {\n      \"value\": \"赞皇县\",\n      \"label\": \"赞皇县\" },\n    {\n      \"value\": \"无极县\",\n      \"label\": \"无极县\" },\n    {\n      \"value\": \"平山县\",\n      \"label\": \"平山县\" },\n    {\n      \"value\": \"元氏县\",\n      \"label\": \"元氏县\" },\n    {\n      \"value\": \"赵县\",\n      \"label\": \"赵县\" },\n    {\n      \"value\": \"晋州市\",\n      \"label\": \"晋州市\" },\n    {\n      \"value\": \"新乐市\",\n      \"label\": \"新乐市\" }] },\n\n  {\n    \"value\": \"唐山市\",\n    \"label\": \"唐山市\",\n    \"children\": [{\n      \"value\": \"路南区\",\n      \"label\": \"路南区\" },\n    {\n      \"value\": \"路北区\",\n      \"label\": \"路北区\" },\n    {\n      \"value\": \"古冶区\",\n      \"label\": \"古冶区\" },\n    {\n      \"value\": \"开平区\",\n      \"label\": \"开平区\" },\n    {\n      \"value\": \"丰南区\",\n      \"label\": \"丰南区\" },\n    {\n      \"value\": \"丰润区\",\n      \"label\": \"丰润区\" },\n    {\n      \"value\": \"曹妃甸区\",\n      \"label\": \"曹妃甸区\" },\n    {\n      \"value\": \"滦县\",\n      \"label\": \"滦县\" },\n    {\n      \"value\": \"滦南县\",\n      \"label\": \"滦南县\" },\n    {\n      \"value\": \"乐亭县\",\n      \"label\": \"乐亭县\" },\n    {\n      \"value\": \"迁西县\",\n      \"label\": \"迁西县\" },\n    {\n      \"value\": \"玉田县\",\n      \"label\": \"玉田县\" },\n    {\n      \"value\": \"遵化市\",\n      \"label\": \"遵化市\" },\n    {\n      \"value\": \"迁安市\",\n      \"label\": \"迁安市\" }] },\n\n  {\n    \"value\": \"秦皇岛市\",\n    \"label\": \"秦皇岛市\",\n    \"children\": [{\n      \"value\": \"海港区\",\n      \"label\": \"海港区\" },\n    {\n      \"value\": \"山海关区\",\n      \"label\": \"山海关区\" },\n    {\n      \"value\": \"北戴河区\",\n      \"label\": \"北戴河区\" },\n    {\n      \"value\": \"抚宁区\",\n      \"label\": \"抚宁区\" },\n    {\n      \"value\": \"青龙满族自治县\",\n      \"label\": \"青龙满族自治县\" },\n    {\n      \"value\": \"昌黎县\",\n      \"label\": \"昌黎县\" },\n    {\n      \"value\": \"卢龙县\",\n      \"label\": \"卢龙县\" }] },\n\n  {\n    \"value\": \"邯郸市\",\n    \"label\": \"邯郸市\",\n    \"children\": [{\n      \"value\": \"邯山区\",\n      \"label\": \"邯山区\" },\n    {\n      \"value\": \"丛台区\",\n      \"label\": \"丛台区\" },\n    {\n      \"value\": \"复兴区\",\n      \"label\": \"复兴区\" },\n    {\n      \"value\": \"峰峰矿区\",\n      \"label\": \"峰峰矿区\" },\n    {\n      \"value\": \"邯郸县\",\n      \"label\": \"邯郸县\" },\n    {\n      \"value\": \"临漳县\",\n      \"label\": \"临漳县\" },\n    {\n      \"value\": \"成安县\",\n      \"label\": \"成安县\" },\n    {\n      \"value\": \"大名县\",\n      \"label\": \"大名县\" },\n    {\n      \"value\": \"涉县\",\n      \"label\": \"涉县\" },\n    {\n      \"value\": \"磁县\",\n      \"label\": \"磁县\" },\n    {\n      \"value\": \"肥乡县\",\n      \"label\": \"肥乡县\" },\n    {\n      \"value\": \"永年县\",\n      \"label\": \"永年县\" },\n    {\n      \"value\": \"邱县\",\n      \"label\": \"邱县\" },\n    {\n      \"value\": \"鸡泽县\",\n      \"label\": \"鸡泽县\" },\n    {\n      \"value\": \"广平县\",\n      \"label\": \"广平县\" },\n    {\n      \"value\": \"馆陶县\",\n      \"label\": \"馆陶县\" },\n    {\n      \"value\": \"魏县\",\n      \"label\": \"魏县\" },\n    {\n      \"value\": \"曲周县\",\n      \"label\": \"曲周县\" },\n    {\n      \"value\": \"武安市\",\n      \"label\": \"武安市\" }] },\n\n  {\n    \"value\": \"邢台市\",\n    \"label\": \"邢台市\",\n    \"children\": [{\n      \"value\": \"桥东区\",\n      \"label\": \"桥东区\" },\n    {\n      \"value\": \"桥西区\",\n      \"label\": \"桥西区\" },\n    {\n      \"value\": \"邢台县\",\n      \"label\": \"邢台县\" },\n    {\n      \"value\": \"临城县\",\n      \"label\": \"临城县\" },\n    {\n      \"value\": \"内丘县\",\n      \"label\": \"内丘县\" },\n    {\n      \"value\": \"柏乡县\",\n      \"label\": \"柏乡县\" },\n    {\n      \"value\": \"隆尧县\",\n      \"label\": \"隆尧县\" },\n    {\n      \"value\": \"任县\",\n      \"label\": \"任县\" },\n    {\n      \"value\": \"南和县\",\n      \"label\": \"南和县\" },\n    {\n      \"value\": \"宁晋县\",\n      \"label\": \"宁晋县\" },\n    {\n      \"value\": \"巨鹿县\",\n      \"label\": \"巨鹿县\" },\n    {\n      \"value\": \"新河县\",\n      \"label\": \"新河县\" },\n    {\n      \"value\": \"广宗县\",\n      \"label\": \"广宗县\" },\n    {\n      \"value\": \"平乡县\",\n      \"label\": \"平乡县\" },\n    {\n      \"value\": \"威县\",\n      \"label\": \"威县\" },\n    {\n      \"value\": \"清河县\",\n      \"label\": \"清河县\" },\n    {\n      \"value\": \"临西县\",\n      \"label\": \"临西县\" },\n    {\n      \"value\": \"南宫市\",\n      \"label\": \"南宫市\" },\n    {\n      \"value\": \"沙河市\",\n      \"label\": \"沙河市\" }] },\n\n  {\n    \"value\": \"保定市\",\n    \"label\": \"保定市\",\n    \"children\": [{\n      \"value\": \"竞秀区\",\n      \"label\": \"竞秀区\" },\n    {\n      \"value\": \"莲池区\",\n      \"label\": \"莲池区\" },\n    {\n      \"value\": \"满城区\",\n      \"label\": \"满城区\" },\n    {\n      \"value\": \"清苑区\",\n      \"label\": \"清苑区\" },\n    {\n      \"value\": \"徐水区\",\n      \"label\": \"徐水区\" },\n    {\n      \"value\": \"涞水县\",\n      \"label\": \"涞水县\" },\n    {\n      \"value\": \"阜平县\",\n      \"label\": \"阜平县\" },\n    {\n      \"value\": \"定兴县\",\n      \"label\": \"定兴县\" },\n    {\n      \"value\": \"唐县\",\n      \"label\": \"唐县\" },\n    {\n      \"value\": \"高阳县\",\n      \"label\": \"高阳县\" },\n    {\n      \"value\": \"容城县\",\n      \"label\": \"容城县\" },\n    {\n      \"value\": \"涞源县\",\n      \"label\": \"涞源县\" },\n    {\n      \"value\": \"望都县\",\n      \"label\": \"望都县\" },\n    {\n      \"value\": \"安新县\",\n      \"label\": \"安新县\" },\n    {\n      \"value\": \"易县\",\n      \"label\": \"易县\" },\n    {\n      \"value\": \"曲阳县\",\n      \"label\": \"曲阳县\" },\n    {\n      \"value\": \"蠡县\",\n      \"label\": \"蠡县\" },\n    {\n      \"value\": \"顺平县\",\n      \"label\": \"顺平县\" },\n    {\n      \"value\": \"博野县\",\n      \"label\": \"博野县\" },\n    {\n      \"value\": \"雄县\",\n      \"label\": \"雄县\" },\n    {\n      \"value\": \"涿州市\",\n      \"label\": \"涿州市\" },\n    {\n      \"value\": \"安国市\",\n      \"label\": \"安国市\" },\n    {\n      \"value\": \"高碑店市\",\n      \"label\": \"高碑店市\" }] },\n\n  {\n    \"value\": \"张家口市\",\n    \"label\": \"张家口市\",\n    \"children\": [{\n      \"value\": \"桥东区\",\n      \"label\": \"桥东区\" },\n    {\n      \"value\": \"桥西区\",\n      \"label\": \"桥西区\" },\n    {\n      \"value\": \"宣化区\",\n      \"label\": \"宣化区\" },\n    {\n      \"value\": \"下花园区\",\n      \"label\": \"下花园区\" },\n    {\n      \"value\": \"万全区\",\n      \"label\": \"万全区\" },\n    {\n      \"value\": \"崇礼区\",\n      \"label\": \"崇礼区\" },\n    {\n      \"value\": \"张北县\",\n      \"label\": \"张北县\" },\n    {\n      \"value\": \"康保县\",\n      \"label\": \"康保县\" },\n    {\n      \"value\": \"沽源县\",\n      \"label\": \"沽源县\" },\n    {\n      \"value\": \"尚义县\",\n      \"label\": \"尚义县\" },\n    {\n      \"value\": \"蔚县\",\n      \"label\": \"蔚县\" },\n    {\n      \"value\": \"阳原县\",\n      \"label\": \"阳原县\" },\n    {\n      \"value\": \"怀安县\",\n      \"label\": \"怀安县\" },\n    {\n      \"value\": \"怀来县\",\n      \"label\": \"怀来县\" },\n    {\n      \"value\": \"涿鹿县\",\n      \"label\": \"涿鹿县\" },\n    {\n      \"value\": \"赤城县\",\n      \"label\": \"赤城县\" }] },\n\n  {\n    \"value\": \"承德市\",\n    \"label\": \"承德市\",\n    \"children\": [{\n      \"value\": \"双桥区\",\n      \"label\": \"双桥区\" },\n    {\n      \"value\": \"双滦区\",\n      \"label\": \"双滦区\" },\n    {\n      \"value\": \"鹰手营子矿区\",\n      \"label\": \"鹰手营子矿区\" },\n    {\n      \"value\": \"承德县\",\n      \"label\": \"承德县\" },\n    {\n      \"value\": \"兴隆县\",\n      \"label\": \"兴隆县\" },\n    {\n      \"value\": \"平泉县\",\n      \"label\": \"平泉县\" },\n    {\n      \"value\": \"滦平县\",\n      \"label\": \"滦平县\" },\n    {\n      \"value\": \"隆化县\",\n      \"label\": \"隆化县\" },\n    {\n      \"value\": \"丰宁满族自治县\",\n      \"label\": \"丰宁满族自治县\" },\n    {\n      \"value\": \"宽城满族自治县\",\n      \"label\": \"宽城满族自治县\" },\n    {\n      \"value\": \"围场满族蒙古族自治县\",\n      \"label\": \"围场满族蒙古族自治县\" }] },\n\n  {\n    \"value\": \"沧州市\",\n    \"label\": \"沧州市\",\n    \"children\": [{\n      \"value\": \"新华区\",\n      \"label\": \"新华区\" },\n    {\n      \"value\": \"运河区\",\n      \"label\": \"运河区\" },\n    {\n      \"value\": \"沧县\",\n      \"label\": \"沧县\" },\n    {\n      \"value\": \"青县\",\n      \"label\": \"青县\" },\n    {\n      \"value\": \"东光县\",\n      \"label\": \"东光县\" },\n    {\n      \"value\": \"海兴县\",\n      \"label\": \"海兴县\" },\n    {\n      \"value\": \"盐山县\",\n      \"label\": \"盐山县\" },\n    {\n      \"value\": \"肃宁县\",\n      \"label\": \"肃宁县\" },\n    {\n      \"value\": \"南皮县\",\n      \"label\": \"南皮县\" },\n    {\n      \"value\": \"吴桥县\",\n      \"label\": \"吴桥县\" },\n    {\n      \"value\": \"献县\",\n      \"label\": \"献县\" },\n    {\n      \"value\": \"孟村回族自治县\",\n      \"label\": \"孟村回族自治县\" },\n    {\n      \"value\": \"泊头市\",\n      \"label\": \"泊头市\" },\n    {\n      \"value\": \"任丘市\",\n      \"label\": \"任丘市\" },\n    {\n      \"value\": \"黄骅市\",\n      \"label\": \"黄骅市\" },\n    {\n      \"value\": \"河间市\",\n      \"label\": \"河间市\" }] },\n\n  {\n    \"value\": \"廊坊市\",\n    \"label\": \"廊坊市\",\n    \"children\": [{\n      \"value\": \"安次区\",\n      \"label\": \"安次区\" },\n    {\n      \"value\": \"广阳区\",\n      \"label\": \"广阳区\" },\n    {\n      \"value\": \"固安县\",\n      \"label\": \"固安县\" },\n    {\n      \"value\": \"永清县\",\n      \"label\": \"永清县\" },\n    {\n      \"value\": \"香河县\",\n      \"label\": \"香河县\" },\n    {\n      \"value\": \"大城县\",\n      \"label\": \"大城县\" },\n    {\n      \"value\": \"文安县\",\n      \"label\": \"文安县\" },\n    {\n      \"value\": \"大厂回族自治县\",\n      \"label\": \"大厂回族自治县\" },\n    {\n      \"value\": \"霸州市\",\n      \"label\": \"霸州市\" },\n    {\n      \"value\": \"三河市\",\n      \"label\": \"三河市\" }] },\n\n  {\n    \"value\": \"衡水市\",\n    \"label\": \"衡水市\",\n    \"children\": [{\n      \"value\": \"桃城区\",\n      \"label\": \"桃城区\" },\n    {\n      \"value\": \"冀州区\",\n      \"label\": \"冀州区\" },\n    {\n      \"value\": \"枣强县\",\n      \"label\": \"枣强县\" },\n    {\n      \"value\": \"武邑县\",\n      \"label\": \"武邑县\" },\n    {\n      \"value\": \"武强县\",\n      \"label\": \"武强县\" },\n    {\n      \"value\": \"饶阳县\",\n      \"label\": \"饶阳县\" },\n    {\n      \"value\": \"安平县\",\n      \"label\": \"安平县\" },\n    {\n      \"value\": \"故城县\",\n      \"label\": \"故城县\" },\n    {\n      \"value\": \"景县\",\n      \"label\": \"景县\" },\n    {\n      \"value\": \"阜城县\",\n      \"label\": \"阜城县\" },\n    {\n      \"value\": \"深州市\",\n      \"label\": \"深州市\" }] },\n\n  {\n    \"value\": \"省直辖县级行政区划\",\n    \"label\": \"省直辖县级行政区划\",\n    \"children\": [{\n      \"value\": \"定州市\",\n      \"label\": \"定州市\" },\n    {\n      \"value\": \"辛集市\",\n      \"label\": \"辛集市\" }] }] },\n\n\n{\n  \"value\": \"山西省\",\n  \"label\": \"山西省\",\n  \"children\": [{\n    \"value\": \"太原市\",\n    \"label\": \"太原市\",\n    \"children\": [{\n      \"value\": \"小店区\",\n      \"label\": \"小店区\" },\n    {\n      \"value\": \"迎泽区\",\n      \"label\": \"迎泽区\" },\n    {\n      \"value\": \"杏花岭区\",\n      \"label\": \"杏花岭区\" },\n    {\n      \"value\": \"尖草坪区\",\n      \"label\": \"尖草坪区\" },\n    {\n      \"value\": \"万柏林区\",\n      \"label\": \"万柏林区\" },\n    {\n      \"value\": \"晋源区\",\n      \"label\": \"晋源区\" },\n    {\n      \"value\": \"清徐县\",\n      \"label\": \"清徐县\" },\n    {\n      \"value\": \"阳曲县\",\n      \"label\": \"阳曲县\" },\n    {\n      \"value\": \"娄烦县\",\n      \"label\": \"娄烦县\" },\n    {\n      \"value\": \"古交市\",\n      \"label\": \"古交市\" }] },\n\n  {\n    \"value\": \"大同市\",\n    \"label\": \"大同市\",\n    \"children\": [{\n      \"value\": \"城区\",\n      \"label\": \"城区\" },\n    {\n      \"value\": \"矿区\",\n      \"label\": \"矿区\" },\n    {\n      \"value\": \"南郊区\",\n      \"label\": \"南郊区\" },\n    {\n      \"value\": \"新荣区\",\n      \"label\": \"新荣区\" },\n    {\n      \"value\": \"阳高县\",\n      \"label\": \"阳高县\" },\n    {\n      \"value\": \"天镇县\",\n      \"label\": \"天镇县\" },\n    {\n      \"value\": \"广灵县\",\n      \"label\": \"广灵县\" },\n    {\n      \"value\": \"灵丘县\",\n      \"label\": \"灵丘县\" },\n    {\n      \"value\": \"浑源县\",\n      \"label\": \"浑源县\" },\n    {\n      \"value\": \"左云县\",\n      \"label\": \"左云县\" },\n    {\n      \"value\": \"大同县\",\n      \"label\": \"大同县\" }] },\n\n  {\n    \"value\": \"阳泉市\",\n    \"label\": \"阳泉市\",\n    \"children\": [{\n      \"value\": \"城区\",\n      \"label\": \"城区\" },\n    {\n      \"value\": \"矿区\",\n      \"label\": \"矿区\" },\n    {\n      \"value\": \"郊区\",\n      \"label\": \"郊区\" },\n    {\n      \"value\": \"平定县\",\n      \"label\": \"平定县\" },\n    {\n      \"value\": \"盂县\",\n      \"label\": \"盂县\" }] },\n\n  {\n    \"value\": \"长治市\",\n    \"label\": \"长治市\",\n    \"children\": [{\n      \"value\": \"城区\",\n      \"label\": \"城区\" },\n    {\n      \"value\": \"郊区\",\n      \"label\": \"郊区\" },\n    {\n      \"value\": \"长治县\",\n      \"label\": \"长治县\" },\n    {\n      \"value\": \"襄垣县\",\n      \"label\": \"襄垣县\" },\n    {\n      \"value\": \"屯留县\",\n      \"label\": \"屯留县\" },\n    {\n      \"value\": \"平顺县\",\n      \"label\": \"平顺县\" },\n    {\n      \"value\": \"黎城县\",\n      \"label\": \"黎城县\" },\n    {\n      \"value\": \"壶关县\",\n      \"label\": \"壶关县\" },\n    {\n      \"value\": \"长子县\",\n      \"label\": \"长子县\" },\n    {\n      \"value\": \"武乡县\",\n      \"label\": \"武乡县\" },\n    {\n      \"value\": \"沁县\",\n      \"label\": \"沁县\" },\n    {\n      \"value\": \"沁源县\",\n      \"label\": \"沁源县\" },\n    {\n      \"value\": \"潞城市\",\n      \"label\": \"潞城市\" }] },\n\n  {\n    \"value\": \"晋城市\",\n    \"label\": \"晋城市\",\n    \"children\": [{\n      \"value\": \"城区\",\n      \"label\": \"城区\" },\n    {\n      \"value\": \"沁水县\",\n      \"label\": \"沁水县\" },\n    {\n      \"value\": \"阳城县\",\n      \"label\": \"阳城县\" },\n    {\n      \"value\": \"陵川县\",\n      \"label\": \"陵川县\" },\n    {\n      \"value\": \"泽州县\",\n      \"label\": \"泽州县\" },\n    {\n      \"value\": \"高平市\",\n      \"label\": \"高平市\" }] },\n\n  {\n    \"value\": \"朔州市\",\n    \"label\": \"朔州市\",\n    \"children\": [{\n      \"value\": \"朔城区\",\n      \"label\": \"朔城区\" },\n    {\n      \"value\": \"平鲁区\",\n      \"label\": \"平鲁区\" },\n    {\n      \"value\": \"山阴县\",\n      \"label\": \"山阴县\" },\n    {\n      \"value\": \"应县\",\n      \"label\": \"应县\" },\n    {\n      \"value\": \"右玉县\",\n      \"label\": \"右玉县\" },\n    {\n      \"value\": \"怀仁县\",\n      \"label\": \"怀仁县\" }] },\n\n  {\n    \"value\": \"晋中市\",\n    \"label\": \"晋中市\",\n    \"children\": [{\n      \"value\": \"榆次区\",\n      \"label\": \"榆次区\" },\n    {\n      \"value\": \"榆社县\",\n      \"label\": \"榆社县\" },\n    {\n      \"value\": \"左权县\",\n      \"label\": \"左权县\" },\n    {\n      \"value\": \"和顺县\",\n      \"label\": \"和顺县\" },\n    {\n      \"value\": \"昔阳县\",\n      \"label\": \"昔阳县\" },\n    {\n      \"value\": \"寿阳县\",\n      \"label\": \"寿阳县\" },\n    {\n      \"value\": \"太谷县\",\n      \"label\": \"太谷县\" },\n    {\n      \"value\": \"祁县\",\n      \"label\": \"祁县\" },\n    {\n      \"value\": \"平遥县\",\n      \"label\": \"平遥县\" },\n    {\n      \"value\": \"灵石县\",\n      \"label\": \"灵石县\" },\n    {\n      \"value\": \"介休市\",\n      \"label\": \"介休市\" }] },\n\n  {\n    \"value\": \"运城市\",\n    \"label\": \"运城市\",\n    \"children\": [{\n      \"value\": \"盐湖区\",\n      \"label\": \"盐湖区\" },\n    {\n      \"value\": \"临猗县\",\n      \"label\": \"临猗县\" },\n    {\n      \"value\": \"万荣县\",\n      \"label\": \"万荣县\" },\n    {\n      \"value\": \"闻喜县\",\n      \"label\": \"闻喜县\" },\n    {\n      \"value\": \"稷山县\",\n      \"label\": \"稷山县\" },\n    {\n      \"value\": \"新绛县\",\n      \"label\": \"新绛县\" },\n    {\n      \"value\": \"绛县\",\n      \"label\": \"绛县\" },\n    {\n      \"value\": \"垣曲县\",\n      \"label\": \"垣曲县\" },\n    {\n      \"value\": \"夏县\",\n      \"label\": \"夏县\" },\n    {\n      \"value\": \"平陆县\",\n      \"label\": \"平陆县\" },\n    {\n      \"value\": \"芮城县\",\n      \"label\": \"芮城县\" },\n    {\n      \"value\": \"永济市\",\n      \"label\": \"永济市\" },\n    {\n      \"value\": \"河津市\",\n      \"label\": \"河津市\" }] },\n\n  {\n    \"value\": \"忻州市\",\n    \"label\": \"忻州市\",\n    \"children\": [{\n      \"value\": \"忻府区\",\n      \"label\": \"忻府区\" },\n    {\n      \"value\": \"定襄县\",\n      \"label\": \"定襄县\" },\n    {\n      \"value\": \"五台县\",\n      \"label\": \"五台县\" },\n    {\n      \"value\": \"代县\",\n      \"label\": \"代县\" },\n    {\n      \"value\": \"繁峙县\",\n      \"label\": \"繁峙县\" },\n    {\n      \"value\": \"宁武县\",\n      \"label\": \"宁武县\" },\n    {\n      \"value\": \"静乐县\",\n      \"label\": \"静乐县\" },\n    {\n      \"value\": \"神池县\",\n      \"label\": \"神池县\" },\n    {\n      \"value\": \"五寨县\",\n      \"label\": \"五寨县\" },\n    {\n      \"value\": \"岢岚县\",\n      \"label\": \"岢岚县\" },\n    {\n      \"value\": \"河曲县\",\n      \"label\": \"河曲县\" },\n    {\n      \"value\": \"保德县\",\n      \"label\": \"保德县\" },\n    {\n      \"value\": \"偏关县\",\n      \"label\": \"偏关县\" },\n    {\n      \"value\": \"原平市\",\n      \"label\": \"原平市\" }] },\n\n  {\n    \"value\": \"临汾市\",\n    \"label\": \"临汾市\",\n    \"children\": [{\n      \"value\": \"尧都区\",\n      \"label\": \"尧都区\" },\n    {\n      \"value\": \"曲沃县\",\n      \"label\": \"曲沃县\" },\n    {\n      \"value\": \"翼城县\",\n      \"label\": \"翼城县\" },\n    {\n      \"value\": \"襄汾县\",\n      \"label\": \"襄汾县\" },\n    {\n      \"value\": \"洪洞县\",\n      \"label\": \"洪洞县\" },\n    {\n      \"value\": \"古县\",\n      \"label\": \"古县\" },\n    {\n      \"value\": \"安泽县\",\n      \"label\": \"安泽县\" },\n    {\n      \"value\": \"浮山县\",\n      \"label\": \"浮山县\" },\n    {\n      \"value\": \"吉县\",\n      \"label\": \"吉县\" },\n    {\n      \"value\": \"乡宁县\",\n      \"label\": \"乡宁县\" },\n    {\n      \"value\": \"大宁县\",\n      \"label\": \"大宁县\" },\n    {\n      \"value\": \"隰县\",\n      \"label\": \"隰县\" },\n    {\n      \"value\": \"永和县\",\n      \"label\": \"永和县\" },\n    {\n      \"value\": \"蒲县\",\n      \"label\": \"蒲县\" },\n    {\n      \"value\": \"汾西县\",\n      \"label\": \"汾西县\" },\n    {\n      \"value\": \"侯马市\",\n      \"label\": \"侯马市\" },\n    {\n      \"value\": \"霍州市\",\n      \"label\": \"霍州市\" }] },\n\n  {\n    \"value\": \"吕梁市\",\n    \"label\": \"吕梁市\",\n    \"children\": [{\n      \"value\": \"离石区\",\n      \"label\": \"离石区\" },\n    {\n      \"value\": \"文水县\",\n      \"label\": \"文水县\" },\n    {\n      \"value\": \"交城县\",\n      \"label\": \"交城县\" },\n    {\n      \"value\": \"兴县\",\n      \"label\": \"兴县\" },\n    {\n      \"value\": \"临县\",\n      \"label\": \"临县\" },\n    {\n      \"value\": \"柳林县\",\n      \"label\": \"柳林县\" },\n    {\n      \"value\": \"石楼县\",\n      \"label\": \"石楼县\" },\n    {\n      \"value\": \"岚县\",\n      \"label\": \"岚县\" },\n    {\n      \"value\": \"方山县\",\n      \"label\": \"方山县\" },\n    {\n      \"value\": \"中阳县\",\n      \"label\": \"中阳县\" },\n    {\n      \"value\": \"交口县\",\n      \"label\": \"交口县\" },\n    {\n      \"value\": \"孝义市\",\n      \"label\": \"孝义市\" },\n    {\n      \"value\": \"汾阳市\",\n      \"label\": \"汾阳市\" }] }] },\n\n\n{\n  \"value\": \"内蒙古自治区\",\n  \"label\": \"内蒙古自治区\",\n  \"children\": [{\n    \"value\": \"呼和浩特市\",\n    \"label\": \"呼和浩特市\",\n    \"children\": [{\n      \"value\": \"新城区\",\n      \"label\": \"新城区\" },\n    {\n      \"value\": \"回民区\",\n      \"label\": \"回民区\" },\n    {\n      \"value\": \"玉泉区\",\n      \"label\": \"玉泉区\" },\n    {\n      \"value\": \"赛罕区\",\n      \"label\": \"赛罕区\" },\n    {\n      \"value\": \"土默特左旗\",\n      \"label\": \"土默特左旗\" },\n    {\n      \"value\": \"托克托县\",\n      \"label\": \"托克托县\" },\n    {\n      \"value\": \"和林格尔县\",\n      \"label\": \"和林格尔县\" },\n    {\n      \"value\": \"清水河县\",\n      \"label\": \"清水河县\" },\n    {\n      \"value\": \"武川县\",\n      \"label\": \"武川县\" }] },\n\n  {\n    \"value\": \"包头市\",\n    \"label\": \"包头市\",\n    \"children\": [{\n      \"value\": \"东河区\",\n      \"label\": \"东河区\" },\n    {\n      \"value\": \"昆都仑区\",\n      \"label\": \"昆都仑区\" },\n    {\n      \"value\": \"青山区\",\n      \"label\": \"青山区\" },\n    {\n      \"value\": \"石拐区\",\n      \"label\": \"石拐区\" },\n    {\n      \"value\": \"白云鄂博矿区\",\n      \"label\": \"白云鄂博矿区\" },\n    {\n      \"value\": \"九原区\",\n      \"label\": \"九原区\" },\n    {\n      \"value\": \"土默特右旗\",\n      \"label\": \"土默特右旗\" },\n    {\n      \"value\": \"固阳县\",\n      \"label\": \"固阳县\" },\n    {\n      \"value\": \"达尔罕茂明安联合旗\",\n      \"label\": \"达尔罕茂明安联合旗\" }] },\n\n  {\n    \"value\": \"乌海市\",\n    \"label\": \"乌海市\",\n    \"children\": [{\n      \"value\": \"海勃湾区\",\n      \"label\": \"海勃湾区\" },\n    {\n      \"value\": \"海南区\",\n      \"label\": \"海南区\" },\n    {\n      \"value\": \"乌达区\",\n      \"label\": \"乌达区\" }] },\n\n  {\n    \"value\": \"赤峰市\",\n    \"label\": \"赤峰市\",\n    \"children\": [{\n      \"value\": \"红山区\",\n      \"label\": \"红山区\" },\n    {\n      \"value\": \"元宝山区\",\n      \"label\": \"元宝山区\" },\n    {\n      \"value\": \"松山区\",\n      \"label\": \"松山区\" },\n    {\n      \"value\": \"阿鲁科尔沁旗\",\n      \"label\": \"阿鲁科尔沁旗\" },\n    {\n      \"value\": \"巴林左旗\",\n      \"label\": \"巴林左旗\" },\n    {\n      \"value\": \"巴林右旗\",\n      \"label\": \"巴林右旗\" },\n    {\n      \"value\": \"林西县\",\n      \"label\": \"林西县\" },\n    {\n      \"value\": \"克什克腾旗\",\n      \"label\": \"克什克腾旗\" },\n    {\n      \"value\": \"翁牛特旗\",\n      \"label\": \"翁牛特旗\" },\n    {\n      \"value\": \"喀喇沁旗\",\n      \"label\": \"喀喇沁旗\" },\n    {\n      \"value\": \"宁城县\",\n      \"label\": \"宁城县\" },\n    {\n      \"value\": \"敖汉旗\",\n      \"label\": \"敖汉旗\" }] },\n\n  {\n    \"value\": \"通辽市\",\n    \"label\": \"通辽市\",\n    \"children\": [{\n      \"value\": \"科尔沁区\",\n      \"label\": \"科尔沁区\" },\n    {\n      \"value\": \"科尔沁左翼中旗\",\n      \"label\": \"科尔沁左翼中旗\" },\n    {\n      \"value\": \"科尔沁左翼后旗\",\n      \"label\": \"科尔沁左翼后旗\" },\n    {\n      \"value\": \"开鲁县\",\n      \"label\": \"开鲁县\" },\n    {\n      \"value\": \"库伦旗\",\n      \"label\": \"库伦旗\" },\n    {\n      \"value\": \"奈曼旗\",\n      \"label\": \"奈曼旗\" },\n    {\n      \"value\": \"扎鲁特旗\",\n      \"label\": \"扎鲁特旗\" },\n    {\n      \"value\": \"霍林郭勒市\",\n      \"label\": \"霍林郭勒市\" }] },\n\n  {\n    \"value\": \"鄂尔多斯市\",\n    \"label\": \"鄂尔多斯市\",\n    \"children\": [{\n      \"value\": \"东胜区\",\n      \"label\": \"东胜区\" },\n    {\n      \"value\": \"康巴什区\",\n      \"label\": \"康巴什区\" },\n    {\n      \"value\": \"达拉特旗\",\n      \"label\": \"达拉特旗\" },\n    {\n      \"value\": \"准格尔旗\",\n      \"label\": \"准格尔旗\" },\n    {\n      \"value\": \"鄂托克前旗\",\n      \"label\": \"鄂托克前旗\" },\n    {\n      \"value\": \"鄂托克旗\",\n      \"label\": \"鄂托克旗\" },\n    {\n      \"value\": \"杭锦旗\",\n      \"label\": \"杭锦旗\" },\n    {\n      \"value\": \"乌审旗\",\n      \"label\": \"乌审旗\" },\n    {\n      \"value\": \"伊金霍洛旗\",\n      \"label\": \"伊金霍洛旗\" }] },\n\n  {\n    \"value\": \"呼伦贝尔市\",\n    \"label\": \"呼伦贝尔市\",\n    \"children\": [{\n      \"value\": \"海拉尔区\",\n      \"label\": \"海拉尔区\" },\n    {\n      \"value\": \"扎赉诺尔区\",\n      \"label\": \"扎赉诺尔区\" },\n    {\n      \"value\": \"阿荣旗\",\n      \"label\": \"阿荣旗\" },\n    {\n      \"value\": \"莫力达瓦达斡尔族自治旗\",\n      \"label\": \"莫力达瓦达斡尔族自治旗\" },\n    {\n      \"value\": \"鄂伦春自治旗\",\n      \"label\": \"鄂伦春自治旗\" },\n    {\n      \"value\": \"鄂温克族自治旗\",\n      \"label\": \"鄂温克族自治旗\" },\n    {\n      \"value\": \"陈巴尔虎旗\",\n      \"label\": \"陈巴尔虎旗\" },\n    {\n      \"value\": \"新巴尔虎左旗\",\n      \"label\": \"新巴尔虎左旗\" },\n    {\n      \"value\": \"新巴尔虎右旗\",\n      \"label\": \"新巴尔虎右旗\" },\n    {\n      \"value\": \"满洲里市\",\n      \"label\": \"满洲里市\" },\n    {\n      \"value\": \"牙克石市\",\n      \"label\": \"牙克石市\" },\n    {\n      \"value\": \"扎兰屯市\",\n      \"label\": \"扎兰屯市\" },\n    {\n      \"value\": \"额尔古纳市\",\n      \"label\": \"额尔古纳市\" },\n    {\n      \"value\": \"根河市\",\n      \"label\": \"根河市\" }] },\n\n  {\n    \"value\": \"巴彦淖尔市\",\n    \"label\": \"巴彦淖尔市\",\n    \"children\": [{\n      \"value\": \"临河区\",\n      \"label\": \"临河区\" },\n    {\n      \"value\": \"五原县\",\n      \"label\": \"五原县\" },\n    {\n      \"value\": \"磴口县\",\n      \"label\": \"磴口县\" },\n    {\n      \"value\": \"乌拉特前旗\",\n      \"label\": \"乌拉特前旗\" },\n    {\n      \"value\": \"乌拉特中旗\",\n      \"label\": \"乌拉特中旗\" },\n    {\n      \"value\": \"乌拉特后旗\",\n      \"label\": \"乌拉特后旗\" },\n    {\n      \"value\": \"杭锦后旗\",\n      \"label\": \"杭锦后旗\" }] },\n\n  {\n    \"value\": \"乌兰察布市\",\n    \"label\": \"乌兰察布市\",\n    \"children\": [{\n      \"value\": \"集宁区\",\n      \"label\": \"集宁区\" },\n    {\n      \"value\": \"卓资县\",\n      \"label\": \"卓资县\" },\n    {\n      \"value\": \"化德县\",\n      \"label\": \"化德县\" },\n    {\n      \"value\": \"商都县\",\n      \"label\": \"商都县\" },\n    {\n      \"value\": \"兴和县\",\n      \"label\": \"兴和县\" },\n    {\n      \"value\": \"凉城县\",\n      \"label\": \"凉城县\" },\n    {\n      \"value\": \"察哈尔右翼前旗\",\n      \"label\": \"察哈尔右翼前旗\" },\n    {\n      \"value\": \"察哈尔右翼中旗\",\n      \"label\": \"察哈尔右翼中旗\" },\n    {\n      \"value\": \"察哈尔右翼后旗\",\n      \"label\": \"察哈尔右翼后旗\" },\n    {\n      \"value\": \"四子王旗\",\n      \"label\": \"四子王旗\" },\n    {\n      \"value\": \"丰镇市\",\n      \"label\": \"丰镇市\" }] },\n\n  {\n    \"value\": \"兴安盟\",\n    \"label\": \"兴安盟\",\n    \"children\": [{\n      \"value\": \"乌兰浩特市\",\n      \"label\": \"乌兰浩特市\" },\n    {\n      \"value\": \"阿尔山市\",\n      \"label\": \"阿尔山市\" },\n    {\n      \"value\": \"科尔沁右翼前旗\",\n      \"label\": \"科尔沁右翼前旗\" },\n    {\n      \"value\": \"科尔沁右翼中旗\",\n      \"label\": \"科尔沁右翼中旗\" },\n    {\n      \"value\": \"扎赉特旗\",\n      \"label\": \"扎赉特旗\" },\n    {\n      \"value\": \"突泉县\",\n      \"label\": \"突泉县\" }] },\n\n  {\n    \"value\": \"锡林郭勒盟\",\n    \"label\": \"锡林郭勒盟\",\n    \"children\": [{\n      \"value\": \"二连浩特市\",\n      \"label\": \"二连浩特市\" },\n    {\n      \"value\": \"锡林浩特市\",\n      \"label\": \"锡林浩特市\" },\n    {\n      \"value\": \"阿巴嘎旗\",\n      \"label\": \"阿巴嘎旗\" },\n    {\n      \"value\": \"苏尼特左旗\",\n      \"label\": \"苏尼特左旗\" },\n    {\n      \"value\": \"苏尼特右旗\",\n      \"label\": \"苏尼特右旗\" },\n    {\n      \"value\": \"东乌珠穆沁旗\",\n      \"label\": \"东乌珠穆沁旗\" },\n    {\n      \"value\": \"西乌珠穆沁旗\",\n      \"label\": \"西乌珠穆沁旗\" },\n    {\n      \"value\": \"太仆寺旗\",\n      \"label\": \"太仆寺旗\" },\n    {\n      \"value\": \"镶黄旗\",\n      \"label\": \"镶黄旗\" },\n    {\n      \"value\": \"正镶白旗\",\n      \"label\": \"正镶白旗\" },\n    {\n      \"value\": \"正蓝旗\",\n      \"label\": \"正蓝旗\" },\n    {\n      \"value\": \"多伦县\",\n      \"label\": \"多伦县\" }] },\n\n  {\n    \"value\": \"阿拉善盟\",\n    \"label\": \"阿拉善盟\",\n    \"children\": [{\n      \"value\": \"阿拉善左旗\",\n      \"label\": \"阿拉善左旗\" },\n    {\n      \"value\": \"阿拉善右旗\",\n      \"label\": \"阿拉善右旗\" },\n    {\n      \"value\": \"额济纳旗\",\n      \"label\": \"额济纳旗\" }] }] },\n\n\n{\n  \"value\": \"辽宁省\",\n  \"label\": \"辽宁省\",\n  \"children\": [{\n    \"value\": \"沈阳市\",\n    \"label\": \"沈阳市\",\n    \"children\": [{\n      \"value\": \"和平区\",\n      \"label\": \"和平区\" },\n    {\n      \"value\": \"沈河区\",\n      \"label\": \"沈河区\" },\n    {\n      \"value\": \"大东区\",\n      \"label\": \"大东区\" },\n    {\n      \"value\": \"皇姑区\",\n      \"label\": \"皇姑区\" },\n    {\n      \"value\": \"铁西区\",\n      \"label\": \"铁西区\" },\n    {\n      \"value\": \"苏家屯区\",\n      \"label\": \"苏家屯区\" },\n    {\n      \"value\": \"浑南区\",\n      \"label\": \"浑南区\" },\n    {\n      \"value\": \"沈北新区\",\n      \"label\": \"沈北新区\" },\n    {\n      \"value\": \"于洪区\",\n      \"label\": \"于洪区\" },\n    {\n      \"value\": \"辽中区\",\n      \"label\": \"辽中区\" },\n    {\n      \"value\": \"康平县\",\n      \"label\": \"康平县\" },\n    {\n      \"value\": \"法库县\",\n      \"label\": \"法库县\" },\n    {\n      \"value\": \"新民市\",\n      \"label\": \"新民市\" }] },\n\n  {\n    \"value\": \"大连市\",\n    \"label\": \"大连市\",\n    \"children\": [{\n      \"value\": \"中山区\",\n      \"label\": \"中山区\" },\n    {\n      \"value\": \"西岗区\",\n      \"label\": \"西岗区\" },\n    {\n      \"value\": \"沙河口区\",\n      \"label\": \"沙河口区\" },\n    {\n      \"value\": \"甘井子区\",\n      \"label\": \"甘井子区\" },\n    {\n      \"value\": \"旅顺口区\",\n      \"label\": \"旅顺口区\" },\n    {\n      \"value\": \"金州区\",\n      \"label\": \"金州区\" },\n    {\n      \"value\": \"普兰店区\",\n      \"label\": \"普兰店区\" },\n    {\n      \"value\": \"长海县\",\n      \"label\": \"长海县\" },\n    {\n      \"value\": \"瓦房店市\",\n      \"label\": \"瓦房店市\" },\n    {\n      \"value\": \"庄河市\",\n      \"label\": \"庄河市\" }] },\n\n  {\n    \"value\": \"鞍山市\",\n    \"label\": \"鞍山市\",\n    \"children\": [{\n      \"value\": \"铁东区\",\n      \"label\": \"铁东区\" },\n    {\n      \"value\": \"铁西区\",\n      \"label\": \"铁西区\" },\n    {\n      \"value\": \"立山区\",\n      \"label\": \"立山区\" },\n    {\n      \"value\": \"千山区\",\n      \"label\": \"千山区\" },\n    {\n      \"value\": \"台安县\",\n      \"label\": \"台安县\" },\n    {\n      \"value\": \"岫岩满族自治县\",\n      \"label\": \"岫岩满族自治县\" },\n    {\n      \"value\": \"海城市\",\n      \"label\": \"海城市\" }] },\n\n  {\n    \"value\": \"抚顺市\",\n    \"label\": \"抚顺市\",\n    \"children\": [{\n      \"value\": \"新抚区\",\n      \"label\": \"新抚区\" },\n    {\n      \"value\": \"东洲区\",\n      \"label\": \"东洲区\" },\n    {\n      \"value\": \"望花区\",\n      \"label\": \"望花区\" },\n    {\n      \"value\": \"顺城区\",\n      \"label\": \"顺城区\" },\n    {\n      \"value\": \"抚顺县\",\n      \"label\": \"抚顺县\" },\n    {\n      \"value\": \"新宾满族自治县\",\n      \"label\": \"新宾满族自治县\" },\n    {\n      \"value\": \"清原满族自治县\",\n      \"label\": \"清原满族自治县\" }] },\n\n  {\n    \"value\": \"本溪市\",\n    \"label\": \"本溪市\",\n    \"children\": [{\n      \"value\": \"平山区\",\n      \"label\": \"平山区\" },\n    {\n      \"value\": \"溪湖区\",\n      \"label\": \"溪湖区\" },\n    {\n      \"value\": \"明山区\",\n      \"label\": \"明山区\" },\n    {\n      \"value\": \"南芬区\",\n      \"label\": \"南芬区\" },\n    {\n      \"value\": \"本溪满族自治县\",\n      \"label\": \"本溪满族自治县\" },\n    {\n      \"value\": \"桓仁满族自治县\",\n      \"label\": \"桓仁满族自治县\" }] },\n\n  {\n    \"value\": \"丹东市\",\n    \"label\": \"丹东市\",\n    \"children\": [{\n      \"value\": \"元宝区\",\n      \"label\": \"元宝区\" },\n    {\n      \"value\": \"振兴区\",\n      \"label\": \"振兴区\" },\n    {\n      \"value\": \"振安区\",\n      \"label\": \"振安区\" },\n    {\n      \"value\": \"宽甸满族自治县\",\n      \"label\": \"宽甸满族自治县\" },\n    {\n      \"value\": \"东港市\",\n      \"label\": \"东港市\" },\n    {\n      \"value\": \"凤城市\",\n      \"label\": \"凤城市\" }] },\n\n  {\n    \"value\": \"锦州市\",\n    \"label\": \"锦州市\",\n    \"children\": [{\n      \"value\": \"古塔区\",\n      \"label\": \"古塔区\" },\n    {\n      \"value\": \"凌河区\",\n      \"label\": \"凌河区\" },\n    {\n      \"value\": \"太和区\",\n      \"label\": \"太和区\" },\n    {\n      \"value\": \"黑山县\",\n      \"label\": \"黑山县\" },\n    {\n      \"value\": \"义县\",\n      \"label\": \"义县\" },\n    {\n      \"value\": \"凌海市\",\n      \"label\": \"凌海市\" },\n    {\n      \"value\": \"北镇市\",\n      \"label\": \"北镇市\" }] },\n\n  {\n    \"value\": \"营口市\",\n    \"label\": \"营口市\",\n    \"children\": [{\n      \"value\": \"站前区\",\n      \"label\": \"站前区\" },\n    {\n      \"value\": \"西市区\",\n      \"label\": \"西市区\" },\n    {\n      \"value\": \"鲅鱼圈区\",\n      \"label\": \"鲅鱼圈区\" },\n    {\n      \"value\": \"老边区\",\n      \"label\": \"老边区\" },\n    {\n      \"value\": \"盖州市\",\n      \"label\": \"盖州市\" },\n    {\n      \"value\": \"大石桥市\",\n      \"label\": \"大石桥市\" }] },\n\n  {\n    \"value\": \"阜新市\",\n    \"label\": \"阜新市\",\n    \"children\": [{\n      \"value\": \"海州区\",\n      \"label\": \"海州区\" },\n    {\n      \"value\": \"新邱区\",\n      \"label\": \"新邱区\" },\n    {\n      \"value\": \"太平区\",\n      \"label\": \"太平区\" },\n    {\n      \"value\": \"清河门区\",\n      \"label\": \"清河门区\" },\n    {\n      \"value\": \"细河区\",\n      \"label\": \"细河区\" },\n    {\n      \"value\": \"阜新蒙古族自治县\",\n      \"label\": \"阜新蒙古族自治县\" },\n    {\n      \"value\": \"彰武县\",\n      \"label\": \"彰武县\" }] },\n\n  {\n    \"value\": \"辽阳市\",\n    \"label\": \"辽阳市\",\n    \"children\": [{\n      \"value\": \"白塔区\",\n      \"label\": \"白塔区\" },\n    {\n      \"value\": \"文圣区\",\n      \"label\": \"文圣区\" },\n    {\n      \"value\": \"宏伟区\",\n      \"label\": \"宏伟区\" },\n    {\n      \"value\": \"弓长岭区\",\n      \"label\": \"弓长岭区\" },\n    {\n      \"value\": \"太子河区\",\n      \"label\": \"太子河区\" },\n    {\n      \"value\": \"辽阳县\",\n      \"label\": \"辽阳县\" },\n    {\n      \"value\": \"灯塔市\",\n      \"label\": \"灯塔市\" }] },\n\n  {\n    \"value\": \"盘锦市\",\n    \"label\": \"盘锦市\",\n    \"children\": [{\n      \"value\": \"双台子区\",\n      \"label\": \"双台子区\" },\n    {\n      \"value\": \"兴隆台区\",\n      \"label\": \"兴隆台区\" },\n    {\n      \"value\": \"大洼区\",\n      \"label\": \"大洼区\" },\n    {\n      \"value\": \"盘山县\",\n      \"label\": \"盘山县\" }] },\n\n  {\n    \"value\": \"铁岭市\",\n    \"label\": \"铁岭市\",\n    \"children\": [{\n      \"value\": \"银州区\",\n      \"label\": \"银州区\" },\n    {\n      \"value\": \"清河区\",\n      \"label\": \"清河区\" },\n    {\n      \"value\": \"铁岭县\",\n      \"label\": \"铁岭县\" },\n    {\n      \"value\": \"西丰县\",\n      \"label\": \"西丰县\" },\n    {\n      \"value\": \"昌图县\",\n      \"label\": \"昌图县\" },\n    {\n      \"value\": \"调兵山市\",\n      \"label\": \"调兵山市\" },\n    {\n      \"value\": \"开原市\",\n      \"label\": \"开原市\" }] },\n\n  {\n    \"value\": \"朝阳市\",\n    \"label\": \"朝阳市\",\n    \"children\": [{\n      \"value\": \"双塔区\",\n      \"label\": \"双塔区\" },\n    {\n      \"value\": \"龙城区\",\n      \"label\": \"龙城区\" },\n    {\n      \"value\": \"朝阳县\",\n      \"label\": \"朝阳县\" },\n    {\n      \"value\": \"建平县\",\n      \"label\": \"建平县\" },\n    {\n      \"value\": \"喀喇沁左翼蒙古族自治县\",\n      \"label\": \"喀喇沁左翼蒙古族自治县\" },\n    {\n      \"value\": \"北票市\",\n      \"label\": \"北票市\" },\n    {\n      \"value\": \"凌源市\",\n      \"label\": \"凌源市\" }] },\n\n  {\n    \"value\": \"葫芦岛市\",\n    \"label\": \"葫芦岛市\",\n    \"children\": [{\n      \"value\": \"连山区\",\n      \"label\": \"连山区\" },\n    {\n      \"value\": \"龙港区\",\n      \"label\": \"龙港区\" },\n    {\n      \"value\": \"南票区\",\n      \"label\": \"南票区\" },\n    {\n      \"value\": \"绥中县\",\n      \"label\": \"绥中县\" },\n    {\n      \"value\": \"建昌县\",\n      \"label\": \"建昌县\" },\n    {\n      \"value\": \"兴城市\",\n      \"label\": \"兴城市\" }] }] },\n\n\n{\n  \"value\": \"吉林省\",\n  \"label\": \"吉林省\",\n  \"children\": [{\n    \"value\": \"长春市\",\n    \"label\": \"长春市\",\n    \"children\": [{\n      \"value\": \"南关区\",\n      \"label\": \"南关区\" },\n    {\n      \"value\": \"宽城区\",\n      \"label\": \"宽城区\" },\n    {\n      \"value\": \"朝阳区\",\n      \"label\": \"朝阳区\" },\n    {\n      \"value\": \"二道区\",\n      \"label\": \"二道区\" },\n    {\n      \"value\": \"绿园区\",\n      \"label\": \"绿园区\" },\n    {\n      \"value\": \"双阳区\",\n      \"label\": \"双阳区\" },\n    {\n      \"value\": \"九台区\",\n      \"label\": \"九台区\" },\n    {\n      \"value\": \"农安县\",\n      \"label\": \"农安县\" },\n    {\n      \"value\": \"榆树市\",\n      \"label\": \"榆树市\" },\n    {\n      \"value\": \"德惠市\",\n      \"label\": \"德惠市\" }] },\n\n  {\n    \"value\": \"吉林市\",\n    \"label\": \"吉林市\",\n    \"children\": [{\n      \"value\": \"昌邑区\",\n      \"label\": \"昌邑区\" },\n    {\n      \"value\": \"龙潭区\",\n      \"label\": \"龙潭区\" },\n    {\n      \"value\": \"船营区\",\n      \"label\": \"船营区\" },\n    {\n      \"value\": \"丰满区\",\n      \"label\": \"丰满区\" },\n    {\n      \"value\": \"永吉县\",\n      \"label\": \"永吉县\" },\n    {\n      \"value\": \"蛟河市\",\n      \"label\": \"蛟河市\" },\n    {\n      \"value\": \"桦甸市\",\n      \"label\": \"桦甸市\" },\n    {\n      \"value\": \"舒兰市\",\n      \"label\": \"舒兰市\" },\n    {\n      \"value\": \"磐石市\",\n      \"label\": \"磐石市\" }] },\n\n  {\n    \"value\": \"四平市\",\n    \"label\": \"四平市\",\n    \"children\": [{\n      \"value\": \"铁西区\",\n      \"label\": \"铁西区\" },\n    {\n      \"value\": \"铁东区\",\n      \"label\": \"铁东区\" },\n    {\n      \"value\": \"梨树县\",\n      \"label\": \"梨树县\" },\n    {\n      \"value\": \"伊通满族自治县\",\n      \"label\": \"伊通满族自治县\" },\n    {\n      \"value\": \"公主岭市\",\n      \"label\": \"公主岭市\" },\n    {\n      \"value\": \"双辽市\",\n      \"label\": \"双辽市\" }] },\n\n  {\n    \"value\": \"辽源市\",\n    \"label\": \"辽源市\",\n    \"children\": [{\n      \"value\": \"龙山区\",\n      \"label\": \"龙山区\" },\n    {\n      \"value\": \"西安区\",\n      \"label\": \"西安区\" },\n    {\n      \"value\": \"东丰县\",\n      \"label\": \"东丰县\" },\n    {\n      \"value\": \"东辽县\",\n      \"label\": \"东辽县\" }] },\n\n  {\n    \"value\": \"通化市\",\n    \"label\": \"通化市\",\n    \"children\": [{\n      \"value\": \"东昌区\",\n      \"label\": \"东昌区\" },\n    {\n      \"value\": \"二道江区\",\n      \"label\": \"二道江区\" },\n    {\n      \"value\": \"通化县\",\n      \"label\": \"通化县\" },\n    {\n      \"value\": \"辉南县\",\n      \"label\": \"辉南县\" },\n    {\n      \"value\": \"柳河县\",\n      \"label\": \"柳河县\" },\n    {\n      \"value\": \"梅河口市\",\n      \"label\": \"梅河口市\" },\n    {\n      \"value\": \"集安市\",\n      \"label\": \"集安市\" }] },\n\n  {\n    \"value\": \"白山市\",\n    \"label\": \"白山市\",\n    \"children\": [{\n      \"value\": \"浑江区\",\n      \"label\": \"浑江区\" },\n    {\n      \"value\": \"江源区\",\n      \"label\": \"江源区\" },\n    {\n      \"value\": \"抚松县\",\n      \"label\": \"抚松县\" },\n    {\n      \"value\": \"靖宇县\",\n      \"label\": \"靖宇县\" },\n    {\n      \"value\": \"长白朝鲜族自治县\",\n      \"label\": \"长白朝鲜族自治县\" },\n    {\n      \"value\": \"临江市\",\n      \"label\": \"临江市\" }] },\n\n  {\n    \"value\": \"松原市\",\n    \"label\": \"松原市\",\n    \"children\": [{\n      \"value\": \"宁江区\",\n      \"label\": \"宁江区\" },\n    {\n      \"value\": \"前郭尔罗斯蒙古族自治县\",\n      \"label\": \"前郭尔罗斯蒙古族自治县\" },\n    {\n      \"value\": \"长岭县\",\n      \"label\": \"长岭县\" },\n    {\n      \"value\": \"乾安县\",\n      \"label\": \"乾安县\" },\n    {\n      \"value\": \"扶余市\",\n      \"label\": \"扶余市\" }] },\n\n  {\n    \"value\": \"白城市\",\n    \"label\": \"白城市\",\n    \"children\": [{\n      \"value\": \"洮北区\",\n      \"label\": \"洮北区\" },\n    {\n      \"value\": \"镇赉县\",\n      \"label\": \"镇赉县\" },\n    {\n      \"value\": \"通榆县\",\n      \"label\": \"通榆县\" },\n    {\n      \"value\": \"洮南市\",\n      \"label\": \"洮南市\" },\n    {\n      \"value\": \"大安市\",\n      \"label\": \"大安市\" }] },\n\n  {\n    \"value\": \"延边朝鲜族自治州\",\n    \"label\": \"延边朝鲜族自治州\",\n    \"children\": [{\n      \"value\": \"延吉市\",\n      \"label\": \"延吉市\" },\n    {\n      \"value\": \"图们市\",\n      \"label\": \"图们市\" },\n    {\n      \"value\": \"敦化市\",\n      \"label\": \"敦化市\" },\n    {\n      \"value\": \"珲春市\",\n      \"label\": \"珲春市\" },\n    {\n      \"value\": \"龙井市\",\n      \"label\": \"龙井市\" },\n    {\n      \"value\": \"和龙市\",\n      \"label\": \"和龙市\" },\n    {\n      \"value\": \"汪清县\",\n      \"label\": \"汪清县\" },\n    {\n      \"value\": \"安图县\",\n      \"label\": \"安图县\" }] }] },\n\n\n{\n  \"value\": \"黑龙江省\",\n  \"label\": \"黑龙江省\",\n  \"children\": [{\n    \"value\": \"哈尔滨市\",\n    \"label\": \"哈尔滨市\",\n    \"children\": [{\n      \"value\": \"道里区\",\n      \"label\": \"道里区\" },\n    {\n      \"value\": \"南岗区\",\n      \"label\": \"南岗区\" },\n    {\n      \"value\": \"道外区\",\n      \"label\": \"道外区\" },\n    {\n      \"value\": \"平房区\",\n      \"label\": \"平房区\" },\n    {\n      \"value\": \"松北区\",\n      \"label\": \"松北区\" },\n    {\n      \"value\": \"香坊区\",\n      \"label\": \"香坊区\" },\n    {\n      \"value\": \"呼兰区\",\n      \"label\": \"呼兰区\" },\n    {\n      \"value\": \"阿城区\",\n      \"label\": \"阿城区\" },\n    {\n      \"value\": \"双城区\",\n      \"label\": \"双城区\" },\n    {\n      \"value\": \"依兰县\",\n      \"label\": \"依兰县\" },\n    {\n      \"value\": \"方正县\",\n      \"label\": \"方正县\" },\n    {\n      \"value\": \"宾县\",\n      \"label\": \"宾县\" },\n    {\n      \"value\": \"巴彦县\",\n      \"label\": \"巴彦县\" },\n    {\n      \"value\": \"木兰县\",\n      \"label\": \"木兰县\" },\n    {\n      \"value\": \"通河县\",\n      \"label\": \"通河县\" },\n    {\n      \"value\": \"延寿县\",\n      \"label\": \"延寿县\" },\n    {\n      \"value\": \"尚志市\",\n      \"label\": \"尚志市\" },\n    {\n      \"value\": \"五常市\",\n      \"label\": \"五常市\" }] },\n\n  {\n    \"value\": \"齐齐哈尔市\",\n    \"label\": \"齐齐哈尔市\",\n    \"children\": [{\n      \"value\": \"龙沙区\",\n      \"label\": \"龙沙区\" },\n    {\n      \"value\": \"建华区\",\n      \"label\": \"建华区\" },\n    {\n      \"value\": \"铁锋区\",\n      \"label\": \"铁锋区\" },\n    {\n      \"value\": \"昂昂溪区\",\n      \"label\": \"昂昂溪区\" },\n    {\n      \"value\": \"富拉尔基区\",\n      \"label\": \"富拉尔基区\" },\n    {\n      \"value\": \"碾子山区\",\n      \"label\": \"碾子山区\" },\n    {\n      \"value\": \"梅里斯达斡尔族区\",\n      \"label\": \"梅里斯达斡尔族区\" },\n    {\n      \"value\": \"龙江县\",\n      \"label\": \"龙江县\" },\n    {\n      \"value\": \"依安县\",\n      \"label\": \"依安县\" },\n    {\n      \"value\": \"泰来县\",\n      \"label\": \"泰来县\" },\n    {\n      \"value\": \"甘南县\",\n      \"label\": \"甘南县\" },\n    {\n      \"value\": \"富裕县\",\n      \"label\": \"富裕县\" },\n    {\n      \"value\": \"克山县\",\n      \"label\": \"克山县\" },\n    {\n      \"value\": \"克东县\",\n      \"label\": \"克东县\" },\n    {\n      \"value\": \"拜泉县\",\n      \"label\": \"拜泉县\" },\n    {\n      \"value\": \"讷河市\",\n      \"label\": \"讷河市\" }] },\n\n  {\n    \"value\": \"鸡西市\",\n    \"label\": \"鸡西市\",\n    \"children\": [{\n      \"value\": \"鸡冠区\",\n      \"label\": \"鸡冠区\" },\n    {\n      \"value\": \"恒山区\",\n      \"label\": \"恒山区\" },\n    {\n      \"value\": \"滴道区\",\n      \"label\": \"滴道区\" },\n    {\n      \"value\": \"梨树区\",\n      \"label\": \"梨树区\" },\n    {\n      \"value\": \"城子河区\",\n      \"label\": \"城子河区\" },\n    {\n      \"value\": \"麻山区\",\n      \"label\": \"麻山区\" },\n    {\n      \"value\": \"鸡东县\",\n      \"label\": \"鸡东县\" },\n    {\n      \"value\": \"虎林市\",\n      \"label\": \"虎林市\" },\n    {\n      \"value\": \"密山市\",\n      \"label\": \"密山市\" }] },\n\n  {\n    \"value\": \"鹤岗市\",\n    \"label\": \"鹤岗市\",\n    \"children\": [{\n      \"value\": \"向阳区\",\n      \"label\": \"向阳区\" },\n    {\n      \"value\": \"工农区\",\n      \"label\": \"工农区\" },\n    {\n      \"value\": \"南山区\",\n      \"label\": \"南山区\" },\n    {\n      \"value\": \"兴安区\",\n      \"label\": \"兴安区\" },\n    {\n      \"value\": \"东山区\",\n      \"label\": \"东山区\" },\n    {\n      \"value\": \"兴山区\",\n      \"label\": \"兴山区\" },\n    {\n      \"value\": \"萝北县\",\n      \"label\": \"萝北县\" },\n    {\n      \"value\": \"绥滨县\",\n      \"label\": \"绥滨县\" }] },\n\n  {\n    \"value\": \"双鸭山市\",\n    \"label\": \"双鸭山市\",\n    \"children\": [{\n      \"value\": \"尖山区\",\n      \"label\": \"尖山区\" },\n    {\n      \"value\": \"岭东区\",\n      \"label\": \"岭东区\" },\n    {\n      \"value\": \"四方台区\",\n      \"label\": \"四方台区\" },\n    {\n      \"value\": \"宝山区\",\n      \"label\": \"宝山区\" },\n    {\n      \"value\": \"集贤县\",\n      \"label\": \"集贤县\" },\n    {\n      \"value\": \"友谊县\",\n      \"label\": \"友谊县\" },\n    {\n      \"value\": \"宝清县\",\n      \"label\": \"宝清县\" },\n    {\n      \"value\": \"饶河县\",\n      \"label\": \"饶河县\" }] },\n\n  {\n    \"value\": \"大庆市\",\n    \"label\": \"大庆市\",\n    \"children\": [{\n      \"value\": \"萨尔图区\",\n      \"label\": \"萨尔图区\" },\n    {\n      \"value\": \"龙凤区\",\n      \"label\": \"龙凤区\" },\n    {\n      \"value\": \"让胡路区\",\n      \"label\": \"让胡路区\" },\n    {\n      \"value\": \"红岗区\",\n      \"label\": \"红岗区\" },\n    {\n      \"value\": \"大同区\",\n      \"label\": \"大同区\" },\n    {\n      \"value\": \"肇州县\",\n      \"label\": \"肇州县\" },\n    {\n      \"value\": \"肇源县\",\n      \"label\": \"肇源县\" },\n    {\n      \"value\": \"林甸县\",\n      \"label\": \"林甸县\" },\n    {\n      \"value\": \"杜尔伯特蒙古族自治县\",\n      \"label\": \"杜尔伯特蒙古族自治县\" }] },\n\n  {\n    \"value\": \"伊春市\",\n    \"label\": \"伊春市\",\n    \"children\": [{\n      \"value\": \"伊春区\",\n      \"label\": \"伊春区\" },\n    {\n      \"value\": \"南岔区\",\n      \"label\": \"南岔区\" },\n    {\n      \"value\": \"友好区\",\n      \"label\": \"友好区\" },\n    {\n      \"value\": \"西林区\",\n      \"label\": \"西林区\" },\n    {\n      \"value\": \"翠峦区\",\n      \"label\": \"翠峦区\" },\n    {\n      \"value\": \"新青区\",\n      \"label\": \"新青区\" },\n    {\n      \"value\": \"美溪区\",\n      \"label\": \"美溪区\" },\n    {\n      \"value\": \"金山屯区\",\n      \"label\": \"金山屯区\" },\n    {\n      \"value\": \"五营区\",\n      \"label\": \"五营区\" },\n    {\n      \"value\": \"乌马河区\",\n      \"label\": \"乌马河区\" },\n    {\n      \"value\": \"汤旺河区\",\n      \"label\": \"汤旺河区\" },\n    {\n      \"value\": \"带岭区\",\n      \"label\": \"带岭区\" },\n    {\n      \"value\": \"乌伊岭区\",\n      \"label\": \"乌伊岭区\" },\n    {\n      \"value\": \"红星区\",\n      \"label\": \"红星区\" },\n    {\n      \"value\": \"上甘岭区\",\n      \"label\": \"上甘岭区\" },\n    {\n      \"value\": \"嘉荫县\",\n      \"label\": \"嘉荫县\" },\n    {\n      \"value\": \"铁力市\",\n      \"label\": \"铁力市\" }] },\n\n  {\n    \"value\": \"佳木斯市\",\n    \"label\": \"佳木斯市\",\n    \"children\": [{\n      \"value\": \"向阳区\",\n      \"label\": \"向阳区\" },\n    {\n      \"value\": \"前进区\",\n      \"label\": \"前进区\" },\n    {\n      \"value\": \"东风区\",\n      \"label\": \"东风区\" },\n    {\n      \"value\": \"郊区\",\n      \"label\": \"郊区\" },\n    {\n      \"value\": \"桦南县\",\n      \"label\": \"桦南县\" },\n    {\n      \"value\": \"桦川县\",\n      \"label\": \"桦川县\" },\n    {\n      \"value\": \"汤原县\",\n      \"label\": \"汤原县\" },\n    {\n      \"value\": \"同江市\",\n      \"label\": \"同江市\" },\n    {\n      \"value\": \"富锦市\",\n      \"label\": \"富锦市\" },\n    {\n      \"value\": \"抚远市\",\n      \"label\": \"抚远市\" }] },\n\n  {\n    \"value\": \"七台河市\",\n    \"label\": \"七台河市\",\n    \"children\": [{\n      \"value\": \"新兴区\",\n      \"label\": \"新兴区\" },\n    {\n      \"value\": \"桃山区\",\n      \"label\": \"桃山区\" },\n    {\n      \"value\": \"茄子河区\",\n      \"label\": \"茄子河区\" },\n    {\n      \"value\": \"勃利县\",\n      \"label\": \"勃利县\" }] },\n\n  {\n    \"value\": \"牡丹江市\",\n    \"label\": \"牡丹江市\",\n    \"children\": [{\n      \"value\": \"东安区\",\n      \"label\": \"东安区\" },\n    {\n      \"value\": \"阳明区\",\n      \"label\": \"阳明区\" },\n    {\n      \"value\": \"爱民区\",\n      \"label\": \"爱民区\" },\n    {\n      \"value\": \"西安区\",\n      \"label\": \"西安区\" },\n    {\n      \"value\": \"林口县\",\n      \"label\": \"林口县\" },\n    {\n      \"value\": \"绥芬河市\",\n      \"label\": \"绥芬河市\" },\n    {\n      \"value\": \"海林市\",\n      \"label\": \"海林市\" },\n    {\n      \"value\": \"宁安市\",\n      \"label\": \"宁安市\" },\n    {\n      \"value\": \"穆棱市\",\n      \"label\": \"穆棱市\" },\n    {\n      \"value\": \"东宁市\",\n      \"label\": \"东宁市\" }] },\n\n  {\n    \"value\": \"黑河市\",\n    \"label\": \"黑河市\",\n    \"children\": [{\n      \"value\": \"爱辉区\",\n      \"label\": \"爱辉区\" },\n    {\n      \"value\": \"嫩江县\",\n      \"label\": \"嫩江县\" },\n    {\n      \"value\": \"逊克县\",\n      \"label\": \"逊克县\" },\n    {\n      \"value\": \"孙吴县\",\n      \"label\": \"孙吴县\" },\n    {\n      \"value\": \"北安市\",\n      \"label\": \"北安市\" },\n    {\n      \"value\": \"五大连池市\",\n      \"label\": \"五大连池市\" }] },\n\n  {\n    \"value\": \"绥化市\",\n    \"label\": \"绥化市\",\n    \"children\": [{\n      \"value\": \"北林区\",\n      \"label\": \"北林区\" },\n    {\n      \"value\": \"望奎县\",\n      \"label\": \"望奎县\" },\n    {\n      \"value\": \"兰西县\",\n      \"label\": \"兰西县\" },\n    {\n      \"value\": \"青冈县\",\n      \"label\": \"青冈县\" },\n    {\n      \"value\": \"庆安县\",\n      \"label\": \"庆安县\" },\n    {\n      \"value\": \"明水县\",\n      \"label\": \"明水县\" },\n    {\n      \"value\": \"绥棱县\",\n      \"label\": \"绥棱县\" },\n    {\n      \"value\": \"安达市\",\n      \"label\": \"安达市\" },\n    {\n      \"value\": \"肇东市\",\n      \"label\": \"肇东市\" },\n    {\n      \"value\": \"海伦市\",\n      \"label\": \"海伦市\" }] },\n\n  {\n    \"value\": \"大兴安岭地区\",\n    \"label\": \"大兴安岭地区\",\n    \"children\": [{\n      \"value\": \"呼玛县\",\n      \"label\": \"呼玛县\" },\n    {\n      \"value\": \"塔河县\",\n      \"label\": \"塔河县\" },\n    {\n      \"value\": \"漠河县\",\n      \"label\": \"漠河县\" }] }] },\n\n\n{\n  \"value\": \"上海市\",\n  \"label\": \"上海市\",\n  \"children\": [{\n    \"value\": \"市辖区\",\n    \"label\": \"市辖区\",\n    \"children\": [{\n      \"value\": \"黄浦区\",\n      \"label\": \"黄浦区\" },\n    {\n      \"value\": \"徐汇区\",\n      \"label\": \"徐汇区\" },\n    {\n      \"value\": \"长宁区\",\n      \"label\": \"长宁区\" },\n    {\n      \"value\": \"静安区\",\n      \"label\": \"静安区\" },\n    {\n      \"value\": \"普陀区\",\n      \"label\": \"普陀区\" },\n    {\n      \"value\": \"虹口区\",\n      \"label\": \"虹口区\" },\n    {\n      \"value\": \"杨浦区\",\n      \"label\": \"杨浦区\" },\n    {\n      \"value\": \"闵行区\",\n      \"label\": \"闵行区\" },\n    {\n      \"value\": \"宝山区\",\n      \"label\": \"宝山区\" },\n    {\n      \"value\": \"嘉定区\",\n      \"label\": \"嘉定区\" },\n    {\n      \"value\": \"浦东新区\",\n      \"label\": \"浦东新区\" },\n    {\n      \"value\": \"金山区\",\n      \"label\": \"金山区\" },\n    {\n      \"value\": \"松江区\",\n      \"label\": \"松江区\" },\n    {\n      \"value\": \"青浦区\",\n      \"label\": \"青浦区\" },\n    {\n      \"value\": \"奉贤区\",\n      \"label\": \"奉贤区\" },\n    {\n      \"value\": \"崇明区\",\n      \"label\": \"崇明区\" }] }] },\n\n\n{\n  \"value\": \"江苏省\",\n  \"label\": \"江苏省\",\n  \"children\": [{\n    \"value\": \"南京市\",\n    \"label\": \"南京市\",\n    \"children\": [{\n      \"value\": \"玄武区\",\n      \"label\": \"玄武区\" },\n    {\n      \"value\": \"秦淮区\",\n      \"label\": \"秦淮区\" },\n    {\n      \"value\": \"建邺区\",\n      \"label\": \"建邺区\" },\n    {\n      \"value\": \"鼓楼区\",\n      \"label\": \"鼓楼区\" },\n    {\n      \"value\": \"浦口区\",\n      \"label\": \"浦口区\" },\n    {\n      \"value\": \"栖霞区\",\n      \"label\": \"栖霞区\" },\n    {\n      \"value\": \"雨花台区\",\n      \"label\": \"雨花台区\" },\n    {\n      \"value\": \"江宁区\",\n      \"label\": \"江宁区\" },\n    {\n      \"value\": \"六合区\",\n      \"label\": \"六合区\" },\n    {\n      \"value\": \"溧水区\",\n      \"label\": \"溧水区\" },\n    {\n      \"value\": \"高淳区\",\n      \"label\": \"高淳区\" }] },\n\n  {\n    \"value\": \"无锡市\",\n    \"label\": \"无锡市\",\n    \"children\": [{\n      \"value\": \"锡山区\",\n      \"label\": \"锡山区\" },\n    {\n      \"value\": \"惠山区\",\n      \"label\": \"惠山区\" },\n    {\n      \"value\": \"滨湖区\",\n      \"label\": \"滨湖区\" },\n    {\n      \"value\": \"梁溪区\",\n      \"label\": \"梁溪区\" },\n    {\n      \"value\": \"新吴区\",\n      \"label\": \"新吴区\" },\n    {\n      \"value\": \"江阴市\",\n      \"label\": \"江阴市\" },\n    {\n      \"value\": \"宜兴市\",\n      \"label\": \"宜兴市\" }] },\n\n  {\n    \"value\": \"徐州市\",\n    \"label\": \"徐州市\",\n    \"children\": [{\n      \"value\": \"鼓楼区\",\n      \"label\": \"鼓楼区\" },\n    {\n      \"value\": \"云龙区\",\n      \"label\": \"云龙区\" },\n    {\n      \"value\": \"贾汪区\",\n      \"label\": \"贾汪区\" },\n    {\n      \"value\": \"泉山区\",\n      \"label\": \"泉山区\" },\n    {\n      \"value\": \"铜山区\",\n      \"label\": \"铜山区\" },\n    {\n      \"value\": \"丰县\",\n      \"label\": \"丰县\" },\n    {\n      \"value\": \"沛县\",\n      \"label\": \"沛县\" },\n    {\n      \"value\": \"睢宁县\",\n      \"label\": \"睢宁县\" },\n    {\n      \"value\": \"新沂市\",\n      \"label\": \"新沂市\" },\n    {\n      \"value\": \"邳州市\",\n      \"label\": \"邳州市\" }] },\n\n  {\n    \"value\": \"常州市\",\n    \"label\": \"常州市\",\n    \"children\": [{\n      \"value\": \"天宁区\",\n      \"label\": \"天宁区\" },\n    {\n      \"value\": \"钟楼区\",\n      \"label\": \"钟楼区\" },\n    {\n      \"value\": \"新北区\",\n      \"label\": \"新北区\" },\n    {\n      \"value\": \"武进区\",\n      \"label\": \"武进区\" },\n    {\n      \"value\": \"金坛区\",\n      \"label\": \"金坛区\" },\n    {\n      \"value\": \"溧阳市\",\n      \"label\": \"溧阳市\" }] },\n\n  {\n    \"value\": \"苏州市\",\n    \"label\": \"苏州市\",\n    \"children\": [{\n      \"value\": \"虎丘区\",\n      \"label\": \"虎丘区\" },\n    {\n      \"value\": \"吴中区\",\n      \"label\": \"吴中区\" },\n    {\n      \"value\": \"相城区\",\n      \"label\": \"相城区\" },\n    {\n      \"value\": \"姑苏区\",\n      \"label\": \"姑苏区\" },\n    {\n      \"value\": \"吴江区\",\n      \"label\": \"吴江区\" },\n    {\n      \"value\": \"常熟市\",\n      \"label\": \"常熟市\" },\n    {\n      \"value\": \"张家港市\",\n      \"label\": \"张家港市\" },\n    {\n      \"value\": \"昆山市\",\n      \"label\": \"昆山市\" },\n    {\n      \"value\": \"太仓市\",\n      \"label\": \"太仓市\" }] },\n\n  {\n    \"value\": \"南通市\",\n    \"label\": \"南通市\",\n    \"children\": [{\n      \"value\": \"崇川区\",\n      \"label\": \"崇川区\" },\n    {\n      \"value\": \"港闸区\",\n      \"label\": \"港闸区\" },\n    {\n      \"value\": \"通州区\",\n      \"label\": \"通州区\" },\n    {\n      \"value\": \"海安县\",\n      \"label\": \"海安县\" },\n    {\n      \"value\": \"如东县\",\n      \"label\": \"如东县\" },\n    {\n      \"value\": \"启东市\",\n      \"label\": \"启东市\" },\n    {\n      \"value\": \"如皋市\",\n      \"label\": \"如皋市\" },\n    {\n      \"value\": \"海门市\",\n      \"label\": \"海门市\" }] },\n\n  {\n    \"value\": \"连云港市\",\n    \"label\": \"连云港市\",\n    \"children\": [{\n      \"value\": \"连云区\",\n      \"label\": \"连云区\" },\n    {\n      \"value\": \"海州区\",\n      \"label\": \"海州区\" },\n    {\n      \"value\": \"赣榆区\",\n      \"label\": \"赣榆区\" },\n    {\n      \"value\": \"东海县\",\n      \"label\": \"东海县\" },\n    {\n      \"value\": \"灌云县\",\n      \"label\": \"灌云县\" },\n    {\n      \"value\": \"灌南县\",\n      \"label\": \"灌南县\" }] },\n\n  {\n    \"value\": \"淮安市\",\n    \"label\": \"淮安市\",\n    \"children\": [{\n      \"value\": \"淮安区\",\n      \"label\": \"淮安区\" },\n    {\n      \"value\": \"淮阴区\",\n      \"label\": \"淮阴区\" },\n    {\n      \"value\": \"清江浦区\",\n      \"label\": \"清江浦区\" },\n    {\n      \"value\": \"洪泽区\",\n      \"label\": \"洪泽区\" },\n    {\n      \"value\": \"涟水县\",\n      \"label\": \"涟水县\" },\n    {\n      \"value\": \"盱眙县\",\n      \"label\": \"盱眙县\" },\n    {\n      \"value\": \"金湖县\",\n      \"label\": \"金湖县\" }] },\n\n  {\n    \"value\": \"盐城市\",\n    \"label\": \"盐城市\",\n    \"children\": [{\n      \"value\": \"亭湖区\",\n      \"label\": \"亭湖区\" },\n    {\n      \"value\": \"盐都区\",\n      \"label\": \"盐都区\" },\n    {\n      \"value\": \"大丰区\",\n      \"label\": \"大丰区\" },\n    {\n      \"value\": \"响水县\",\n      \"label\": \"响水县\" },\n    {\n      \"value\": \"滨海县\",\n      \"label\": \"滨海县\" },\n    {\n      \"value\": \"阜宁县\",\n      \"label\": \"阜宁县\" },\n    {\n      \"value\": \"射阳县\",\n      \"label\": \"射阳县\" },\n    {\n      \"value\": \"建湖县\",\n      \"label\": \"建湖县\" },\n    {\n      \"value\": \"东台市\",\n      \"label\": \"东台市\" }] },\n\n  {\n    \"value\": \"扬州市\",\n    \"label\": \"扬州市\",\n    \"children\": [{\n      \"value\": \"广陵区\",\n      \"label\": \"广陵区\" },\n    {\n      \"value\": \"邗江区\",\n      \"label\": \"邗江区\" },\n    {\n      \"value\": \"江都区\",\n      \"label\": \"江都区\" },\n    {\n      \"value\": \"宝应县\",\n      \"label\": \"宝应县\" },\n    {\n      \"value\": \"仪征市\",\n      \"label\": \"仪征市\" },\n    {\n      \"value\": \"高邮市\",\n      \"label\": \"高邮市\" }] },\n\n  {\n    \"value\": \"镇江市\",\n    \"label\": \"镇江市\",\n    \"children\": [{\n      \"value\": \"京口区\",\n      \"label\": \"京口区\" },\n    {\n      \"value\": \"润州区\",\n      \"label\": \"润州区\" },\n    {\n      \"value\": \"丹徒区\",\n      \"label\": \"丹徒区\" },\n    {\n      \"value\": \"丹阳市\",\n      \"label\": \"丹阳市\" },\n    {\n      \"value\": \"扬中市\",\n      \"label\": \"扬中市\" },\n    {\n      \"value\": \"句容市\",\n      \"label\": \"句容市\" }] },\n\n  {\n    \"value\": \"泰州市\",\n    \"label\": \"泰州市\",\n    \"children\": [{\n      \"value\": \"海陵区\",\n      \"label\": \"海陵区\" },\n    {\n      \"value\": \"高港区\",\n      \"label\": \"高港区\" },\n    {\n      \"value\": \"姜堰区\",\n      \"label\": \"姜堰区\" },\n    {\n      \"value\": \"兴化市\",\n      \"label\": \"兴化市\" },\n    {\n      \"value\": \"靖江市\",\n      \"label\": \"靖江市\" },\n    {\n      \"value\": \"泰兴市\",\n      \"label\": \"泰兴市\" }] },\n\n  {\n    \"value\": \"宿迁市\",\n    \"label\": \"宿迁市\",\n    \"children\": [{\n      \"value\": \"宿城区\",\n      \"label\": \"宿城区\" },\n    {\n      \"value\": \"宿豫区\",\n      \"label\": \"宿豫区\" },\n    {\n      \"value\": \"沭阳县\",\n      \"label\": \"沭阳县\" },\n    {\n      \"value\": \"泗阳县\",\n      \"label\": \"泗阳县\" },\n    {\n      \"value\": \"泗洪县\",\n      \"label\": \"泗洪县\" }] }] },\n\n\n{\n  \"value\": \"浙江省\",\n  \"label\": \"浙江省\",\n  \"children\": [{\n    \"value\": \"杭州市\",\n    \"label\": \"杭州市\",\n    \"children\": [{\n      \"value\": \"上城区\",\n      \"label\": \"上城区\" },\n    {\n      \"value\": \"下城区\",\n      \"label\": \"下城区\" },\n    {\n      \"value\": \"江干区\",\n      \"label\": \"江干区\" },\n    {\n      \"value\": \"拱墅区\",\n      \"label\": \"拱墅区\" },\n    {\n      \"value\": \"西湖区\",\n      \"label\": \"西湖区\" },\n    {\n      \"value\": \"滨江区\",\n      \"label\": \"滨江区\" },\n    {\n      \"value\": \"萧山区\",\n      \"label\": \"萧山区\" },\n    {\n      \"value\": \"余杭区\",\n      \"label\": \"余杭区\" },\n    {\n      \"value\": \"富阳区\",\n      \"label\": \"富阳区\" },\n    {\n      \"value\": \"桐庐县\",\n      \"label\": \"桐庐县\" },\n    {\n      \"value\": \"淳安县\",\n      \"label\": \"淳安县\" },\n    {\n      \"value\": \"建德市\",\n      \"label\": \"建德市\" },\n    {\n      \"value\": \"临安市\",\n      \"label\": \"临安市\" }] },\n\n  {\n    \"value\": \"宁波市\",\n    \"label\": \"宁波市\",\n    \"children\": [{\n      \"value\": \"海曙区\",\n      \"label\": \"海曙区\" },\n    {\n      \"value\": \"江东区\",\n      \"label\": \"江东区\" },\n    {\n      \"value\": \"江北区\",\n      \"label\": \"江北区\" },\n    {\n      \"value\": \"北仑区\",\n      \"label\": \"北仑区\" },\n    {\n      \"value\": \"镇海区\",\n      \"label\": \"镇海区\" },\n    {\n      \"value\": \"鄞州区\",\n      \"label\": \"鄞州区\" },\n    {\n      \"value\": \"象山县\",\n      \"label\": \"象山县\" },\n    {\n      \"value\": \"宁海县\",\n      \"label\": \"宁海县\" },\n    {\n      \"value\": \"余姚市\",\n      \"label\": \"余姚市\" },\n    {\n      \"value\": \"慈溪市\",\n      \"label\": \"慈溪市\" },\n    {\n      \"value\": \"奉化市\",\n      \"label\": \"奉化市\" }] },\n\n  {\n    \"value\": \"温州市\",\n    \"label\": \"温州市\",\n    \"children\": [{\n      \"value\": \"鹿城区\",\n      \"label\": \"鹿城区\" },\n    {\n      \"value\": \"龙湾区\",\n      \"label\": \"龙湾区\" },\n    {\n      \"value\": \"瓯海区\",\n      \"label\": \"瓯海区\" },\n    {\n      \"value\": \"洞头区\",\n      \"label\": \"洞头区\" },\n    {\n      \"value\": \"永嘉县\",\n      \"label\": \"永嘉县\" },\n    {\n      \"value\": \"平阳县\",\n      \"label\": \"平阳县\" },\n    {\n      \"value\": \"苍南县\",\n      \"label\": \"苍南县\" },\n    {\n      \"value\": \"文成县\",\n      \"label\": \"文成县\" },\n    {\n      \"value\": \"泰顺县\",\n      \"label\": \"泰顺县\" },\n    {\n      \"value\": \"瑞安市\",\n      \"label\": \"瑞安市\" },\n    {\n      \"value\": \"乐清市\",\n      \"label\": \"乐清市\" }] },\n\n  {\n    \"value\": \"嘉兴市\",\n    \"label\": \"嘉兴市\",\n    \"children\": [{\n      \"value\": \"南湖区\",\n      \"label\": \"南湖区\" },\n    {\n      \"value\": \"秀洲区\",\n      \"label\": \"秀洲区\" },\n    {\n      \"value\": \"嘉善县\",\n      \"label\": \"嘉善县\" },\n    {\n      \"value\": \"海盐县\",\n      \"label\": \"海盐县\" },\n    {\n      \"value\": \"海宁市\",\n      \"label\": \"海宁市\" },\n    {\n      \"value\": \"平湖市\",\n      \"label\": \"平湖市\" },\n    {\n      \"value\": \"桐乡市\",\n      \"label\": \"桐乡市\" }] },\n\n  {\n    \"value\": \"湖州市\",\n    \"label\": \"湖州市\",\n    \"children\": [{\n      \"value\": \"吴兴区\",\n      \"label\": \"吴兴区\" },\n    {\n      \"value\": \"南浔区\",\n      \"label\": \"南浔区\" },\n    {\n      \"value\": \"德清县\",\n      \"label\": \"德清县\" },\n    {\n      \"value\": \"长兴县\",\n      \"label\": \"长兴县\" },\n    {\n      \"value\": \"安吉县\",\n      \"label\": \"安吉县\" }] },\n\n  {\n    \"value\": \"绍兴市\",\n    \"label\": \"绍兴市\",\n    \"children\": [{\n      \"value\": \"越城区\",\n      \"label\": \"越城区\" },\n    {\n      \"value\": \"柯桥区\",\n      \"label\": \"柯桥区\" },\n    {\n      \"value\": \"上虞区\",\n      \"label\": \"上虞区\" },\n    {\n      \"value\": \"新昌县\",\n      \"label\": \"新昌县\" },\n    {\n      \"value\": \"诸暨市\",\n      \"label\": \"诸暨市\" },\n    {\n      \"value\": \"嵊州市\",\n      \"label\": \"嵊州市\" }] },\n\n  {\n    \"value\": \"金华市\",\n    \"label\": \"金华市\",\n    \"children\": [{\n      \"value\": \"婺城区\",\n      \"label\": \"婺城区\" },\n    {\n      \"value\": \"金东区\",\n      \"label\": \"金东区\" },\n    {\n      \"value\": \"武义县\",\n      \"label\": \"武义县\" },\n    {\n      \"value\": \"浦江县\",\n      \"label\": \"浦江县\" },\n    {\n      \"value\": \"磐安县\",\n      \"label\": \"磐安县\" },\n    {\n      \"value\": \"兰溪市\",\n      \"label\": \"兰溪市\" },\n    {\n      \"value\": \"义乌市\",\n      \"label\": \"义乌市\" },\n    {\n      \"value\": \"东阳市\",\n      \"label\": \"东阳市\" },\n    {\n      \"value\": \"永康市\",\n      \"label\": \"永康市\" }] },\n\n  {\n    \"value\": \"衢州市\",\n    \"label\": \"衢州市\",\n    \"children\": [{\n      \"value\": \"柯城区\",\n      \"label\": \"柯城区\" },\n    {\n      \"value\": \"衢江区\",\n      \"label\": \"衢江区\" },\n    {\n      \"value\": \"常山县\",\n      \"label\": \"常山县\" },\n    {\n      \"value\": \"开化县\",\n      \"label\": \"开化县\" },\n    {\n      \"value\": \"龙游县\",\n      \"label\": \"龙游县\" },\n    {\n      \"value\": \"江山市\",\n      \"label\": \"江山市\" }] },\n\n  {\n    \"value\": \"舟山市\",\n    \"label\": \"舟山市\",\n    \"children\": [{\n      \"value\": \"定海区\",\n      \"label\": \"定海区\" },\n    {\n      \"value\": \"普陀区\",\n      \"label\": \"普陀区\" },\n    {\n      \"value\": \"岱山县\",\n      \"label\": \"岱山县\" },\n    {\n      \"value\": \"嵊泗县\",\n      \"label\": \"嵊泗县\" }] },\n\n  {\n    \"value\": \"台州市\",\n    \"label\": \"台州市\",\n    \"children\": [{\n      \"value\": \"椒江区\",\n      \"label\": \"椒江区\" },\n    {\n      \"value\": \"黄岩区\",\n      \"label\": \"黄岩区\" },\n    {\n      \"value\": \"路桥区\",\n      \"label\": \"路桥区\" },\n    {\n      \"value\": \"玉环县\",\n      \"label\": \"玉环县\" },\n    {\n      \"value\": \"三门县\",\n      \"label\": \"三门县\" },\n    {\n      \"value\": \"天台县\",\n      \"label\": \"天台县\" },\n    {\n      \"value\": \"仙居县\",\n      \"label\": \"仙居县\" },\n    {\n      \"value\": \"温岭市\",\n      \"label\": \"温岭市\" },\n    {\n      \"value\": \"临海市\",\n      \"label\": \"临海市\" }] },\n\n  {\n    \"value\": \"丽水市\",\n    \"label\": \"丽水市\",\n    \"children\": [{\n      \"value\": \"莲都区\",\n      \"label\": \"莲都区\" },\n    {\n      \"value\": \"青田县\",\n      \"label\": \"青田县\" },\n    {\n      \"value\": \"缙云县\",\n      \"label\": \"缙云县\" },\n    {\n      \"value\": \"遂昌县\",\n      \"label\": \"遂昌县\" },\n    {\n      \"value\": \"松阳县\",\n      \"label\": \"松阳县\" },\n    {\n      \"value\": \"云和县\",\n      \"label\": \"云和县\" },\n    {\n      \"value\": \"庆元县\",\n      \"label\": \"庆元县\" },\n    {\n      \"value\": \"景宁畲族自治县\",\n      \"label\": \"景宁畲族自治县\" },\n    {\n      \"value\": \"龙泉市\",\n      \"label\": \"龙泉市\" }] }] },\n\n\n{\n  \"value\": \"安徽省\",\n  \"label\": \"安徽省\",\n  \"children\": [{\n    \"value\": \"合肥市\",\n    \"label\": \"合肥市\",\n    \"children\": [{\n      \"value\": \"瑶海区\",\n      \"label\": \"瑶海区\" },\n    {\n      \"value\": \"庐阳区\",\n      \"label\": \"庐阳区\" },\n    {\n      \"value\": \"蜀山区\",\n      \"label\": \"蜀山区\" },\n    {\n      \"value\": \"包河区\",\n      \"label\": \"包河区\" },\n    {\n      \"value\": \"长丰县\",\n      \"label\": \"长丰县\" },\n    {\n      \"value\": \"肥东县\",\n      \"label\": \"肥东县\" },\n    {\n      \"value\": \"肥西县\",\n      \"label\": \"肥西县\" },\n    {\n      \"value\": \"庐江县\",\n      \"label\": \"庐江县\" },\n    {\n      \"value\": \"巢湖市\",\n      \"label\": \"巢湖市\" }] },\n\n  {\n    \"value\": \"芜湖市\",\n    \"label\": \"芜湖市\",\n    \"children\": [{\n      \"value\": \"镜湖区\",\n      \"label\": \"镜湖区\" },\n    {\n      \"value\": \"弋江区\",\n      \"label\": \"弋江区\" },\n    {\n      \"value\": \"鸠江区\",\n      \"label\": \"鸠江区\" },\n    {\n      \"value\": \"三山区\",\n      \"label\": \"三山区\" },\n    {\n      \"value\": \"芜湖县\",\n      \"label\": \"芜湖县\" },\n    {\n      \"value\": \"繁昌县\",\n      \"label\": \"繁昌县\" },\n    {\n      \"value\": \"南陵县\",\n      \"label\": \"南陵县\" },\n    {\n      \"value\": \"无为县\",\n      \"label\": \"无为县\" }] },\n\n  {\n    \"value\": \"蚌埠市\",\n    \"label\": \"蚌埠市\",\n    \"children\": [{\n      \"value\": \"龙子湖区\",\n      \"label\": \"龙子湖区\" },\n    {\n      \"value\": \"蚌山区\",\n      \"label\": \"蚌山区\" },\n    {\n      \"value\": \"禹会区\",\n      \"label\": \"禹会区\" },\n    {\n      \"value\": \"淮上区\",\n      \"label\": \"淮上区\" },\n    {\n      \"value\": \"怀远县\",\n      \"label\": \"怀远县\" },\n    {\n      \"value\": \"五河县\",\n      \"label\": \"五河县\" },\n    {\n      \"value\": \"固镇县\",\n      \"label\": \"固镇县\" }] },\n\n  {\n    \"value\": \"淮南市\",\n    \"label\": \"淮南市\",\n    \"children\": [{\n      \"value\": \"大通区\",\n      \"label\": \"大通区\" },\n    {\n      \"value\": \"田家庵区\",\n      \"label\": \"田家庵区\" },\n    {\n      \"value\": \"谢家集区\",\n      \"label\": \"谢家集区\" },\n    {\n      \"value\": \"八公山区\",\n      \"label\": \"八公山区\" },\n    {\n      \"value\": \"潘集区\",\n      \"label\": \"潘集区\" },\n    {\n      \"value\": \"凤台县\",\n      \"label\": \"凤台县\" },\n    {\n      \"value\": \"寿县\",\n      \"label\": \"寿县\" }] },\n\n  {\n    \"value\": \"马鞍山市\",\n    \"label\": \"马鞍山市\",\n    \"children\": [{\n      \"value\": \"花山区\",\n      \"label\": \"花山区\" },\n    {\n      \"value\": \"雨山区\",\n      \"label\": \"雨山区\" },\n    {\n      \"value\": \"博望区\",\n      \"label\": \"博望区\" },\n    {\n      \"value\": \"当涂县\",\n      \"label\": \"当涂县\" },\n    {\n      \"value\": \"含山县\",\n      \"label\": \"含山县\" },\n    {\n      \"value\": \"和县\",\n      \"label\": \"和县\" }] },\n\n  {\n    \"value\": \"淮北市\",\n    \"label\": \"淮北市\",\n    \"children\": [{\n      \"value\": \"杜集区\",\n      \"label\": \"杜集区\" },\n    {\n      \"value\": \"相山区\",\n      \"label\": \"相山区\" },\n    {\n      \"value\": \"烈山区\",\n      \"label\": \"烈山区\" },\n    {\n      \"value\": \"濉溪县\",\n      \"label\": \"濉溪县\" }] },\n\n  {\n    \"value\": \"铜陵市\",\n    \"label\": \"铜陵市\",\n    \"children\": [{\n      \"value\": \"铜官区\",\n      \"label\": \"铜官区\" },\n    {\n      \"value\": \"义安区\",\n      \"label\": \"义安区\" },\n    {\n      \"value\": \"郊区\",\n      \"label\": \"郊区\" },\n    {\n      \"value\": \"枞阳县\",\n      \"label\": \"枞阳县\" }] },\n\n  {\n    \"value\": \"安庆市\",\n    \"label\": \"安庆市\",\n    \"children\": [{\n      \"value\": \"迎江区\",\n      \"label\": \"迎江区\" },\n    {\n      \"value\": \"大观区\",\n      \"label\": \"大观区\" },\n    {\n      \"value\": \"宜秀区\",\n      \"label\": \"宜秀区\" },\n    {\n      \"value\": \"怀宁县\",\n      \"label\": \"怀宁县\" },\n    {\n      \"value\": \"潜山县\",\n      \"label\": \"潜山县\" },\n    {\n      \"value\": \"太湖县\",\n      \"label\": \"太湖县\" },\n    {\n      \"value\": \"宿松县\",\n      \"label\": \"宿松县\" },\n    {\n      \"value\": \"望江县\",\n      \"label\": \"望江县\" },\n    {\n      \"value\": \"岳西县\",\n      \"label\": \"岳西县\" },\n    {\n      \"value\": \"桐城市\",\n      \"label\": \"桐城市\" }] },\n\n  {\n    \"value\": \"黄山市\",\n    \"label\": \"黄山市\",\n    \"children\": [{\n      \"value\": \"屯溪区\",\n      \"label\": \"屯溪区\" },\n    {\n      \"value\": \"黄山区\",\n      \"label\": \"黄山区\" },\n    {\n      \"value\": \"徽州区\",\n      \"label\": \"徽州区\" },\n    {\n      \"value\": \"歙县\",\n      \"label\": \"歙县\" },\n    {\n      \"value\": \"休宁县\",\n      \"label\": \"休宁县\" },\n    {\n      \"value\": \"黟县\",\n      \"label\": \"黟县\" },\n    {\n      \"value\": \"祁门县\",\n      \"label\": \"祁门县\" }] },\n\n  {\n    \"value\": \"滁州市\",\n    \"label\": \"滁州市\",\n    \"children\": [{\n      \"value\": \"琅琊区\",\n      \"label\": \"琅琊区\" },\n    {\n      \"value\": \"南谯区\",\n      \"label\": \"南谯区\" },\n    {\n      \"value\": \"来安县\",\n      \"label\": \"来安县\" },\n    {\n      \"value\": \"全椒县\",\n      \"label\": \"全椒县\" },\n    {\n      \"value\": \"定远县\",\n      \"label\": \"定远县\" },\n    {\n      \"value\": \"凤阳县\",\n      \"label\": \"凤阳县\" },\n    {\n      \"value\": \"天长市\",\n      \"label\": \"天长市\" },\n    {\n      \"value\": \"明光市\",\n      \"label\": \"明光市\" }] },\n\n  {\n    \"value\": \"阜阳市\",\n    \"label\": \"阜阳市\",\n    \"children\": [{\n      \"value\": \"颍州区\",\n      \"label\": \"颍州区\" },\n    {\n      \"value\": \"颍东区\",\n      \"label\": \"颍东区\" },\n    {\n      \"value\": \"颍泉区\",\n      \"label\": \"颍泉区\" },\n    {\n      \"value\": \"临泉县\",\n      \"label\": \"临泉县\" },\n    {\n      \"value\": \"太和县\",\n      \"label\": \"太和县\" },\n    {\n      \"value\": \"阜南县\",\n      \"label\": \"阜南县\" },\n    {\n      \"value\": \"颍上县\",\n      \"label\": \"颍上县\" },\n    {\n      \"value\": \"界首市\",\n      \"label\": \"界首市\" }] },\n\n  {\n    \"value\": \"宿州市\",\n    \"label\": \"宿州市\",\n    \"children\": [{\n      \"value\": \"埇桥区\",\n      \"label\": \"埇桥区\" },\n    {\n      \"value\": \"砀山县\",\n      \"label\": \"砀山县\" },\n    {\n      \"value\": \"萧县\",\n      \"label\": \"萧县\" },\n    {\n      \"value\": \"灵璧县\",\n      \"label\": \"灵璧县\" },\n    {\n      \"value\": \"泗县\",\n      \"label\": \"泗县\" }] },\n\n  {\n    \"value\": \"六安市\",\n    \"label\": \"六安市\",\n    \"children\": [{\n      \"value\": \"金安区\",\n      \"label\": \"金安区\" },\n    {\n      \"value\": \"裕安区\",\n      \"label\": \"裕安区\" },\n    {\n      \"value\": \"叶集区\",\n      \"label\": \"叶集区\" },\n    {\n      \"value\": \"霍邱县\",\n      \"label\": \"霍邱县\" },\n    {\n      \"value\": \"舒城县\",\n      \"label\": \"舒城县\" },\n    {\n      \"value\": \"金寨县\",\n      \"label\": \"金寨县\" },\n    {\n      \"value\": \"霍山县\",\n      \"label\": \"霍山县\" }] },\n\n  {\n    \"value\": \"亳州市\",\n    \"label\": \"亳州市\",\n    \"children\": [{\n      \"value\": \"谯城区\",\n      \"label\": \"谯城区\" },\n    {\n      \"value\": \"涡阳县\",\n      \"label\": \"涡阳县\" },\n    {\n      \"value\": \"蒙城县\",\n      \"label\": \"蒙城县\" },\n    {\n      \"value\": \"利辛县\",\n      \"label\": \"利辛县\" }] },\n\n  {\n    \"value\": \"池州市\",\n    \"label\": \"池州市\",\n    \"children\": [{\n      \"value\": \"贵池区\",\n      \"label\": \"贵池区\" },\n    {\n      \"value\": \"东至县\",\n      \"label\": \"东至县\" },\n    {\n      \"value\": \"石台县\",\n      \"label\": \"石台县\" },\n    {\n      \"value\": \"青阳县\",\n      \"label\": \"青阳县\" }] },\n\n  {\n    \"value\": \"宣城市\",\n    \"label\": \"宣城市\",\n    \"children\": [{\n      \"value\": \"宣州区\",\n      \"label\": \"宣州区\" },\n    {\n      \"value\": \"郎溪县\",\n      \"label\": \"郎溪县\" },\n    {\n      \"value\": \"广德县\",\n      \"label\": \"广德县\" },\n    {\n      \"value\": \"泾县\",\n      \"label\": \"泾县\" },\n    {\n      \"value\": \"绩溪县\",\n      \"label\": \"绩溪县\" },\n    {\n      \"value\": \"旌德县\",\n      \"label\": \"旌德县\" },\n    {\n      \"value\": \"宁国市\",\n      \"label\": \"宁国市\" }] }] },\n\n\n{\n  \"value\": \"福建省\",\n  \"label\": \"福建省\",\n  \"children\": [{\n    \"value\": \"福州市\",\n    \"label\": \"福州市\",\n    \"children\": [{\n      \"value\": \"鼓楼区\",\n      \"label\": \"鼓楼区\" },\n    {\n      \"value\": \"台江区\",\n      \"label\": \"台江区\" },\n    {\n      \"value\": \"仓山区\",\n      \"label\": \"仓山区\" },\n    {\n      \"value\": \"马尾区\",\n      \"label\": \"马尾区\" },\n    {\n      \"value\": \"晋安区\",\n      \"label\": \"晋安区\" },\n    {\n      \"value\": \"闽侯县\",\n      \"label\": \"闽侯县\" },\n    {\n      \"value\": \"连江县\",\n      \"label\": \"连江县\" },\n    {\n      \"value\": \"罗源县\",\n      \"label\": \"罗源县\" },\n    {\n      \"value\": \"闽清县\",\n      \"label\": \"闽清县\" },\n    {\n      \"value\": \"永泰县\",\n      \"label\": \"永泰县\" },\n    {\n      \"value\": \"平潭县\",\n      \"label\": \"平潭县\" },\n    {\n      \"value\": \"福清市\",\n      \"label\": \"福清市\" },\n    {\n      \"value\": \"长乐市\",\n      \"label\": \"长乐市\" }] },\n\n  {\n    \"value\": \"厦门市\",\n    \"label\": \"厦门市\",\n    \"children\": [{\n      \"value\": \"思明区\",\n      \"label\": \"思明区\" },\n    {\n      \"value\": \"海沧区\",\n      \"label\": \"海沧区\" },\n    {\n      \"value\": \"湖里区\",\n      \"label\": \"湖里区\" },\n    {\n      \"value\": \"集美区\",\n      \"label\": \"集美区\" },\n    {\n      \"value\": \"同安区\",\n      \"label\": \"同安区\" },\n    {\n      \"value\": \"翔安区\",\n      \"label\": \"翔安区\" }] },\n\n  {\n    \"value\": \"莆田市\",\n    \"label\": \"莆田市\",\n    \"children\": [{\n      \"value\": \"城厢区\",\n      \"label\": \"城厢区\" },\n    {\n      \"value\": \"涵江区\",\n      \"label\": \"涵江区\" },\n    {\n      \"value\": \"荔城区\",\n      \"label\": \"荔城区\" },\n    {\n      \"value\": \"秀屿区\",\n      \"label\": \"秀屿区\" },\n    {\n      \"value\": \"仙游县\",\n      \"label\": \"仙游县\" }] },\n\n  {\n    \"value\": \"三明市\",\n    \"label\": \"三明市\",\n    \"children\": [{\n      \"value\": \"梅列区\",\n      \"label\": \"梅列区\" },\n    {\n      \"value\": \"三元区\",\n      \"label\": \"三元区\" },\n    {\n      \"value\": \"明溪县\",\n      \"label\": \"明溪县\" },\n    {\n      \"value\": \"清流县\",\n      \"label\": \"清流县\" },\n    {\n      \"value\": \"宁化县\",\n      \"label\": \"宁化县\" },\n    {\n      \"value\": \"大田县\",\n      \"label\": \"大田县\" },\n    {\n      \"value\": \"尤溪县\",\n      \"label\": \"尤溪县\" },\n    {\n      \"value\": \"沙县\",\n      \"label\": \"沙县\" },\n    {\n      \"value\": \"将乐县\",\n      \"label\": \"将乐县\" },\n    {\n      \"value\": \"泰宁县\",\n      \"label\": \"泰宁县\" },\n    {\n      \"value\": \"建宁县\",\n      \"label\": \"建宁县\" },\n    {\n      \"value\": \"永安市\",\n      \"label\": \"永安市\" }] },\n\n  {\n    \"value\": \"泉州市\",\n    \"label\": \"泉州市\",\n    \"children\": [{\n      \"value\": \"鲤城区\",\n      \"label\": \"鲤城区\" },\n    {\n      \"value\": \"丰泽区\",\n      \"label\": \"丰泽区\" },\n    {\n      \"value\": \"洛江区\",\n      \"label\": \"洛江区\" },\n    {\n      \"value\": \"泉港区\",\n      \"label\": \"泉港区\" },\n    {\n      \"value\": \"惠安县\",\n      \"label\": \"惠安县\" },\n    {\n      \"value\": \"安溪县\",\n      \"label\": \"安溪县\" },\n    {\n      \"value\": \"永春县\",\n      \"label\": \"永春县\" },\n    {\n      \"value\": \"德化县\",\n      \"label\": \"德化县\" },\n    {\n      \"value\": \"金门县\",\n      \"label\": \"金门县\" },\n    {\n      \"value\": \"石狮市\",\n      \"label\": \"石狮市\" },\n    {\n      \"value\": \"晋江市\",\n      \"label\": \"晋江市\" },\n    {\n      \"value\": \"南安市\",\n      \"label\": \"南安市\" }] },\n\n  {\n    \"value\": \"漳州市\",\n    \"label\": \"漳州市\",\n    \"children\": [{\n      \"value\": \"芗城区\",\n      \"label\": \"芗城区\" },\n    {\n      \"value\": \"龙文区\",\n      \"label\": \"龙文区\" },\n    {\n      \"value\": \"云霄县\",\n      \"label\": \"云霄县\" },\n    {\n      \"value\": \"漳浦县\",\n      \"label\": \"漳浦县\" },\n    {\n      \"value\": \"诏安县\",\n      \"label\": \"诏安县\" },\n    {\n      \"value\": \"长泰县\",\n      \"label\": \"长泰县\" },\n    {\n      \"value\": \"东山县\",\n      \"label\": \"东山县\" },\n    {\n      \"value\": \"南靖县\",\n      \"label\": \"南靖县\" },\n    {\n      \"value\": \"平和县\",\n      \"label\": \"平和县\" },\n    {\n      \"value\": \"华安县\",\n      \"label\": \"华安县\" },\n    {\n      \"value\": \"龙海市\",\n      \"label\": \"龙海市\" }] },\n\n  {\n    \"value\": \"南平市\",\n    \"label\": \"南平市\",\n    \"children\": [{\n      \"value\": \"延平区\",\n      \"label\": \"延平区\" },\n    {\n      \"value\": \"建阳区\",\n      \"label\": \"建阳区\" },\n    {\n      \"value\": \"顺昌县\",\n      \"label\": \"顺昌县\" },\n    {\n      \"value\": \"浦城县\",\n      \"label\": \"浦城县\" },\n    {\n      \"value\": \"光泽县\",\n      \"label\": \"光泽县\" },\n    {\n      \"value\": \"松溪县\",\n      \"label\": \"松溪县\" },\n    {\n      \"value\": \"政和县\",\n      \"label\": \"政和县\" },\n    {\n      \"value\": \"邵武市\",\n      \"label\": \"邵武市\" },\n    {\n      \"value\": \"武夷山市\",\n      \"label\": \"武夷山市\" },\n    {\n      \"value\": \"建瓯市\",\n      \"label\": \"建瓯市\" }] },\n\n  {\n    \"value\": \"龙岩市\",\n    \"label\": \"龙岩市\",\n    \"children\": [{\n      \"value\": \"新罗区\",\n      \"label\": \"新罗区\" },\n    {\n      \"value\": \"永定区\",\n      \"label\": \"永定区\" },\n    {\n      \"value\": \"长汀县\",\n      \"label\": \"长汀县\" },\n    {\n      \"value\": \"上杭县\",\n      \"label\": \"上杭县\" },\n    {\n      \"value\": \"武平县\",\n      \"label\": \"武平县\" },\n    {\n      \"value\": \"连城县\",\n      \"label\": \"连城县\" },\n    {\n      \"value\": \"漳平市\",\n      \"label\": \"漳平市\" }] },\n\n  {\n    \"value\": \"宁德市\",\n    \"label\": \"宁德市\",\n    \"children\": [{\n      \"value\": \"蕉城区\",\n      \"label\": \"蕉城区\" },\n    {\n      \"value\": \"霞浦县\",\n      \"label\": \"霞浦县\" },\n    {\n      \"value\": \"古田县\",\n      \"label\": \"古田县\" },\n    {\n      \"value\": \"屏南县\",\n      \"label\": \"屏南县\" },\n    {\n      \"value\": \"寿宁县\",\n      \"label\": \"寿宁县\" },\n    {\n      \"value\": \"周宁县\",\n      \"label\": \"周宁县\" },\n    {\n      \"value\": \"柘荣县\",\n      \"label\": \"柘荣县\" },\n    {\n      \"value\": \"福安市\",\n      \"label\": \"福安市\" },\n    {\n      \"value\": \"福鼎市\",\n      \"label\": \"福鼎市\" }] }] },\n\n\n{\n  \"value\": \"江西省\",\n  \"label\": \"江西省\",\n  \"children\": [{\n    \"value\": \"南昌市\",\n    \"label\": \"南昌市\",\n    \"children\": [{\n      \"value\": \"东湖区\",\n      \"label\": \"东湖区\" },\n    {\n      \"value\": \"西湖区\",\n      \"label\": \"西湖区\" },\n    {\n      \"value\": \"青云谱区\",\n      \"label\": \"青云谱区\" },\n    {\n      \"value\": \"湾里区\",\n      \"label\": \"湾里区\" },\n    {\n      \"value\": \"青山湖区\",\n      \"label\": \"青山湖区\" },\n    {\n      \"value\": \"新建区\",\n      \"label\": \"新建区\" },\n    {\n      \"value\": \"南昌县\",\n      \"label\": \"南昌县\" },\n    {\n      \"value\": \"安义县\",\n      \"label\": \"安义县\" },\n    {\n      \"value\": \"进贤县\",\n      \"label\": \"进贤县\" }] },\n\n  {\n    \"value\": \"景德镇市\",\n    \"label\": \"景德镇市\",\n    \"children\": [{\n      \"value\": \"昌江区\",\n      \"label\": \"昌江区\" },\n    {\n      \"value\": \"珠山区\",\n      \"label\": \"珠山区\" },\n    {\n      \"value\": \"浮梁县\",\n      \"label\": \"浮梁县\" },\n    {\n      \"value\": \"乐平市\",\n      \"label\": \"乐平市\" }] },\n\n  {\n    \"value\": \"萍乡市\",\n    \"label\": \"萍乡市\",\n    \"children\": [{\n      \"value\": \"安源区\",\n      \"label\": \"安源区\" },\n    {\n      \"value\": \"湘东区\",\n      \"label\": \"湘东区\" },\n    {\n      \"value\": \"莲花县\",\n      \"label\": \"莲花县\" },\n    {\n      \"value\": \"上栗县\",\n      \"label\": \"上栗县\" },\n    {\n      \"value\": \"芦溪县\",\n      \"label\": \"芦溪县\" }] },\n\n  {\n    \"value\": \"九江市\",\n    \"label\": \"九江市\",\n    \"children\": [{\n      \"value\": \"濂溪区\",\n      \"label\": \"濂溪区\" },\n    {\n      \"value\": \"浔阳区\",\n      \"label\": \"浔阳区\" },\n    {\n      \"value\": \"九江县\",\n      \"label\": \"九江县\" },\n    {\n      \"value\": \"武宁县\",\n      \"label\": \"武宁县\" },\n    {\n      \"value\": \"修水县\",\n      \"label\": \"修水县\" },\n    {\n      \"value\": \"永修县\",\n      \"label\": \"永修县\" },\n    {\n      \"value\": \"德安县\",\n      \"label\": \"德安县\" },\n    {\n      \"value\": \"都昌县\",\n      \"label\": \"都昌县\" },\n    {\n      \"value\": \"湖口县\",\n      \"label\": \"湖口县\" },\n    {\n      \"value\": \"彭泽县\",\n      \"label\": \"彭泽县\" },\n    {\n      \"value\": \"瑞昌市\",\n      \"label\": \"瑞昌市\" },\n    {\n      \"value\": \"共青城市\",\n      \"label\": \"共青城市\" },\n    {\n      \"value\": \"庐山市\",\n      \"label\": \"庐山市\" }] },\n\n  {\n    \"value\": \"新余市\",\n    \"label\": \"新余市\",\n    \"children\": [{\n      \"value\": \"渝水区\",\n      \"label\": \"渝水区\" },\n    {\n      \"value\": \"分宜县\",\n      \"label\": \"分宜县\" }] },\n\n  {\n    \"value\": \"鹰潭市\",\n    \"label\": \"鹰潭市\",\n    \"children\": [{\n      \"value\": \"月湖区\",\n      \"label\": \"月湖区\" },\n    {\n      \"value\": \"余江县\",\n      \"label\": \"余江县\" },\n    {\n      \"value\": \"贵溪市\",\n      \"label\": \"贵溪市\" }] },\n\n  {\n    \"value\": \"赣州市\",\n    \"label\": \"赣州市\",\n    \"children\": [{\n      \"value\": \"章贡区\",\n      \"label\": \"章贡区\" },\n    {\n      \"value\": \"南康区\",\n      \"label\": \"南康区\" },\n    {\n      \"value\": \"赣县\",\n      \"label\": \"赣县\" },\n    {\n      \"value\": \"信丰县\",\n      \"label\": \"信丰县\" },\n    {\n      \"value\": \"大余县\",\n      \"label\": \"大余县\" },\n    {\n      \"value\": \"上犹县\",\n      \"label\": \"上犹县\" },\n    {\n      \"value\": \"崇义县\",\n      \"label\": \"崇义县\" },\n    {\n      \"value\": \"安远县\",\n      \"label\": \"安远县\" },\n    {\n      \"value\": \"龙南县\",\n      \"label\": \"龙南县\" },\n    {\n      \"value\": \"定南县\",\n      \"label\": \"定南县\" },\n    {\n      \"value\": \"全南县\",\n      \"label\": \"全南县\" },\n    {\n      \"value\": \"宁都县\",\n      \"label\": \"宁都县\" },\n    {\n      \"value\": \"于都县\",\n      \"label\": \"于都县\" },\n    {\n      \"value\": \"兴国县\",\n      \"label\": \"兴国县\" },\n    {\n      \"value\": \"会昌县\",\n      \"label\": \"会昌县\" },\n    {\n      \"value\": \"寻乌县\",\n      \"label\": \"寻乌县\" },\n    {\n      \"value\": \"石城县\",\n      \"label\": \"石城县\" },\n    {\n      \"value\": \"瑞金市\",\n      \"label\": \"瑞金市\" }] },\n\n  {\n    \"value\": \"吉安市\",\n    \"label\": \"吉安市\",\n    \"children\": [{\n      \"value\": \"吉州区\",\n      \"label\": \"吉州区\" },\n    {\n      \"value\": \"青原区\",\n      \"label\": \"青原区\" },\n    {\n      \"value\": \"吉安县\",\n      \"label\": \"吉安县\" },\n    {\n      \"value\": \"吉水县\",\n      \"label\": \"吉水县\" },\n    {\n      \"value\": \"峡江县\",\n      \"label\": \"峡江县\" },\n    {\n      \"value\": \"新干县\",\n      \"label\": \"新干县\" },\n    {\n      \"value\": \"永丰县\",\n      \"label\": \"永丰县\" },\n    {\n      \"value\": \"泰和县\",\n      \"label\": \"泰和县\" },\n    {\n      \"value\": \"遂川县\",\n      \"label\": \"遂川县\" },\n    {\n      \"value\": \"万安县\",\n      \"label\": \"万安县\" },\n    {\n      \"value\": \"安福县\",\n      \"label\": \"安福县\" },\n    {\n      \"value\": \"永新县\",\n      \"label\": \"永新县\" },\n    {\n      \"value\": \"井冈山市\",\n      \"label\": \"井冈山市\" }] },\n\n  {\n    \"value\": \"宜春市\",\n    \"label\": \"宜春市\",\n    \"children\": [{\n      \"value\": \"袁州区\",\n      \"label\": \"袁州区\" },\n    {\n      \"value\": \"奉新县\",\n      \"label\": \"奉新县\" },\n    {\n      \"value\": \"万载县\",\n      \"label\": \"万载县\" },\n    {\n      \"value\": \"上高县\",\n      \"label\": \"上高县\" },\n    {\n      \"value\": \"宜丰县\",\n      \"label\": \"宜丰县\" },\n    {\n      \"value\": \"靖安县\",\n      \"label\": \"靖安县\" },\n    {\n      \"value\": \"铜鼓县\",\n      \"label\": \"铜鼓县\" },\n    {\n      \"value\": \"丰城市\",\n      \"label\": \"丰城市\" },\n    {\n      \"value\": \"樟树市\",\n      \"label\": \"樟树市\" },\n    {\n      \"value\": \"高安市\",\n      \"label\": \"高安市\" }] },\n\n  {\n    \"value\": \"抚州市\",\n    \"label\": \"抚州市\",\n    \"children\": [{\n      \"value\": \"临川区\",\n      \"label\": \"临川区\" },\n    {\n      \"value\": \"南城县\",\n      \"label\": \"南城县\" },\n    {\n      \"value\": \"黎川县\",\n      \"label\": \"黎川县\" },\n    {\n      \"value\": \"南丰县\",\n      \"label\": \"南丰县\" },\n    {\n      \"value\": \"崇仁县\",\n      \"label\": \"崇仁县\" },\n    {\n      \"value\": \"乐安县\",\n      \"label\": \"乐安县\" },\n    {\n      \"value\": \"宜黄县\",\n      \"label\": \"宜黄县\" },\n    {\n      \"value\": \"金溪县\",\n      \"label\": \"金溪县\" },\n    {\n      \"value\": \"资溪县\",\n      \"label\": \"资溪县\" },\n    {\n      \"value\": \"东乡县\",\n      \"label\": \"东乡县\" },\n    {\n      \"value\": \"广昌县\",\n      \"label\": \"广昌县\" }] },\n\n  {\n    \"value\": \"上饶市\",\n    \"label\": \"上饶市\",\n    \"children\": [{\n      \"value\": \"信州区\",\n      \"label\": \"信州区\" },\n    {\n      \"value\": \"广丰区\",\n      \"label\": \"广丰区\" },\n    {\n      \"value\": \"上饶县\",\n      \"label\": \"上饶县\" },\n    {\n      \"value\": \"玉山县\",\n      \"label\": \"玉山县\" },\n    {\n      \"value\": \"铅山县\",\n      \"label\": \"铅山县\" },\n    {\n      \"value\": \"横峰县\",\n      \"label\": \"横峰县\" },\n    {\n      \"value\": \"弋阳县\",\n      \"label\": \"弋阳县\" },\n    {\n      \"value\": \"余干县\",\n      \"label\": \"余干县\" },\n    {\n      \"value\": \"鄱阳县\",\n      \"label\": \"鄱阳县\" },\n    {\n      \"value\": \"万年县\",\n      \"label\": \"万年县\" },\n    {\n      \"value\": \"婺源县\",\n      \"label\": \"婺源县\" },\n    {\n      \"value\": \"德兴市\",\n      \"label\": \"德兴市\" }] }] },\n\n\n{\n  \"value\": \"山东省\",\n  \"label\": \"山东省\",\n  \"children\": [{\n    \"value\": \"济南市\",\n    \"label\": \"济南市\",\n    \"children\": [{\n      \"value\": \"历下区\",\n      \"label\": \"历下区\" },\n    {\n      \"value\": \"市中区\",\n      \"label\": \"市中区\" },\n    {\n      \"value\": \"槐荫区\",\n      \"label\": \"槐荫区\" },\n    {\n      \"value\": \"天桥区\",\n      \"label\": \"天桥区\" },\n    {\n      \"value\": \"历城区\",\n      \"label\": \"历城区\" },\n    {\n      \"value\": \"长清区\",\n      \"label\": \"长清区\" },\n    {\n      \"value\": \"平阴县\",\n      \"label\": \"平阴县\" },\n    {\n      \"value\": \"济阳县\",\n      \"label\": \"济阳县\" },\n    {\n      \"value\": \"商河县\",\n      \"label\": \"商河县\" },\n    {\n      \"value\": \"章丘市\",\n      \"label\": \"章丘市\" }] },\n\n  {\n    \"value\": \"青岛市\",\n    \"label\": \"青岛市\",\n    \"children\": [{\n      \"value\": \"市南区\",\n      \"label\": \"市南区\" },\n    {\n      \"value\": \"市北区\",\n      \"label\": \"市北区\" },\n    {\n      \"value\": \"黄岛区\",\n      \"label\": \"黄岛区\" },\n    {\n      \"value\": \"崂山区\",\n      \"label\": \"崂山区\" },\n    {\n      \"value\": \"李沧区\",\n      \"label\": \"李沧区\" },\n    {\n      \"value\": \"城阳区\",\n      \"label\": \"城阳区\" },\n    {\n      \"value\": \"胶州市\",\n      \"label\": \"胶州市\" },\n    {\n      \"value\": \"即墨市\",\n      \"label\": \"即墨市\" },\n    {\n      \"value\": \"平度市\",\n      \"label\": \"平度市\" },\n    {\n      \"value\": \"莱西市\",\n      \"label\": \"莱西市\" }] },\n\n  {\n    \"value\": \"淄博市\",\n    \"label\": \"淄博市\",\n    \"children\": [{\n      \"value\": \"淄川区\",\n      \"label\": \"淄川区\" },\n    {\n      \"value\": \"张店区\",\n      \"label\": \"张店区\" },\n    {\n      \"value\": \"博山区\",\n      \"label\": \"博山区\" },\n    {\n      \"value\": \"临淄区\",\n      \"label\": \"临淄区\" },\n    {\n      \"value\": \"周村区\",\n      \"label\": \"周村区\" },\n    {\n      \"value\": \"桓台县\",\n      \"label\": \"桓台县\" },\n    {\n      \"value\": \"高青县\",\n      \"label\": \"高青县\" },\n    {\n      \"value\": \"沂源县\",\n      \"label\": \"沂源县\" }] },\n\n  {\n    \"value\": \"枣庄市\",\n    \"label\": \"枣庄市\",\n    \"children\": [{\n      \"value\": \"市中区\",\n      \"label\": \"市中区\" },\n    {\n      \"value\": \"薛城区\",\n      \"label\": \"薛城区\" },\n    {\n      \"value\": \"峄城区\",\n      \"label\": \"峄城区\" },\n    {\n      \"value\": \"台儿庄区\",\n      \"label\": \"台儿庄区\" },\n    {\n      \"value\": \"山亭区\",\n      \"label\": \"山亭区\" },\n    {\n      \"value\": \"滕州市\",\n      \"label\": \"滕州市\" }] },\n\n  {\n    \"value\": \"东营市\",\n    \"label\": \"东营市\",\n    \"children\": [{\n      \"value\": \"东营区\",\n      \"label\": \"东营区\" },\n    {\n      \"value\": \"河口区\",\n      \"label\": \"河口区\" },\n    {\n      \"value\": \"垦利区\",\n      \"label\": \"垦利区\" },\n    {\n      \"value\": \"利津县\",\n      \"label\": \"利津县\" },\n    {\n      \"value\": \"广饶县\",\n      \"label\": \"广饶县\" }] },\n\n  {\n    \"value\": \"烟台市\",\n    \"label\": \"烟台市\",\n    \"children\": [{\n      \"value\": \"芝罘区\",\n      \"label\": \"芝罘区\" },\n    {\n      \"value\": \"福山区\",\n      \"label\": \"福山区\" },\n    {\n      \"value\": \"牟平区\",\n      \"label\": \"牟平区\" },\n    {\n      \"value\": \"莱山区\",\n      \"label\": \"莱山区\" },\n    {\n      \"value\": \"长岛县\",\n      \"label\": \"长岛县\" },\n    {\n      \"value\": \"龙口市\",\n      \"label\": \"龙口市\" },\n    {\n      \"value\": \"莱阳市\",\n      \"label\": \"莱阳市\" },\n    {\n      \"value\": \"莱州市\",\n      \"label\": \"莱州市\" },\n    {\n      \"value\": \"蓬莱市\",\n      \"label\": \"蓬莱市\" },\n    {\n      \"value\": \"招远市\",\n      \"label\": \"招远市\" },\n    {\n      \"value\": \"栖霞市\",\n      \"label\": \"栖霞市\" },\n    {\n      \"value\": \"海阳市\",\n      \"label\": \"海阳市\" }] },\n\n  {\n    \"value\": \"潍坊市\",\n    \"label\": \"潍坊市\",\n    \"children\": [{\n      \"value\": \"潍城区\",\n      \"label\": \"潍城区\" },\n    {\n      \"value\": \"寒亭区\",\n      \"label\": \"寒亭区\" },\n    {\n      \"value\": \"坊子区\",\n      \"label\": \"坊子区\" },\n    {\n      \"value\": \"奎文区\",\n      \"label\": \"奎文区\" },\n    {\n      \"value\": \"临朐县\",\n      \"label\": \"临朐县\" },\n    {\n      \"value\": \"昌乐县\",\n      \"label\": \"昌乐县\" },\n    {\n      \"value\": \"青州市\",\n      \"label\": \"青州市\" },\n    {\n      \"value\": \"诸城市\",\n      \"label\": \"诸城市\" },\n    {\n      \"value\": \"寿光市\",\n      \"label\": \"寿光市\" },\n    {\n      \"value\": \"安丘市\",\n      \"label\": \"安丘市\" },\n    {\n      \"value\": \"高密市\",\n      \"label\": \"高密市\" },\n    {\n      \"value\": \"昌邑市\",\n      \"label\": \"昌邑市\" }] },\n\n  {\n    \"value\": \"济宁市\",\n    \"label\": \"济宁市\",\n    \"children\": [{\n      \"value\": \"任城区\",\n      \"label\": \"任城区\" },\n    {\n      \"value\": \"兖州区\",\n      \"label\": \"兖州区\" },\n    {\n      \"value\": \"微山县\",\n      \"label\": \"微山县\" },\n    {\n      \"value\": \"鱼台县\",\n      \"label\": \"鱼台县\" },\n    {\n      \"value\": \"金乡县\",\n      \"label\": \"金乡县\" },\n    {\n      \"value\": \"嘉祥县\",\n      \"label\": \"嘉祥县\" },\n    {\n      \"value\": \"汶上县\",\n      \"label\": \"汶上县\" },\n    {\n      \"value\": \"泗水县\",\n      \"label\": \"泗水县\" },\n    {\n      \"value\": \"梁山县\",\n      \"label\": \"梁山县\" },\n    {\n      \"value\": \"曲阜市\",\n      \"label\": \"曲阜市\" },\n    {\n      \"value\": \"邹城市\",\n      \"label\": \"邹城市\" }] },\n\n  {\n    \"value\": \"泰安市\",\n    \"label\": \"泰安市\",\n    \"children\": [{\n      \"value\": \"泰山区\",\n      \"label\": \"泰山区\" },\n    {\n      \"value\": \"岱岳区\",\n      \"label\": \"岱岳区\" },\n    {\n      \"value\": \"宁阳县\",\n      \"label\": \"宁阳县\" },\n    {\n      \"value\": \"东平县\",\n      \"label\": \"东平县\" },\n    {\n      \"value\": \"新泰市\",\n      \"label\": \"新泰市\" },\n    {\n      \"value\": \"肥城市\",\n      \"label\": \"肥城市\" }] },\n\n  {\n    \"value\": \"威海市\",\n    \"label\": \"威海市\",\n    \"children\": [{\n      \"value\": \"环翠区\",\n      \"label\": \"环翠区\" },\n    {\n      \"value\": \"文登区\",\n      \"label\": \"文登区\" },\n    {\n      \"value\": \"荣成市\",\n      \"label\": \"荣成市\" },\n    {\n      \"value\": \"乳山市\",\n      \"label\": \"乳山市\" }] },\n\n  {\n    \"value\": \"日照市\",\n    \"label\": \"日照市\",\n    \"children\": [{\n      \"value\": \"东港区\",\n      \"label\": \"东港区\" },\n    {\n      \"value\": \"岚山区\",\n      \"label\": \"岚山区\" },\n    {\n      \"value\": \"五莲县\",\n      \"label\": \"五莲县\" },\n    {\n      \"value\": \"莒县\",\n      \"label\": \"莒县\" }] },\n\n  {\n    \"value\": \"莱芜市\",\n    \"label\": \"莱芜市\",\n    \"children\": [{\n      \"value\": \"莱城区\",\n      \"label\": \"莱城区\" },\n    {\n      \"value\": \"钢城区\",\n      \"label\": \"钢城区\" }] },\n\n  {\n    \"value\": \"临沂市\",\n    \"label\": \"临沂市\",\n    \"children\": [{\n      \"value\": \"兰山区\",\n      \"label\": \"兰山区\" },\n    {\n      \"value\": \"罗庄区\",\n      \"label\": \"罗庄区\" },\n    {\n      \"value\": \"河东区\",\n      \"label\": \"河东区\" },\n    {\n      \"value\": \"沂南县\",\n      \"label\": \"沂南县\" },\n    {\n      \"value\": \"郯城县\",\n      \"label\": \"郯城县\" },\n    {\n      \"value\": \"沂水县\",\n      \"label\": \"沂水县\" },\n    {\n      \"value\": \"兰陵县\",\n      \"label\": \"兰陵县\" },\n    {\n      \"value\": \"费县\",\n      \"label\": \"费县\" },\n    {\n      \"value\": \"平邑县\",\n      \"label\": \"平邑县\" },\n    {\n      \"value\": \"莒南县\",\n      \"label\": \"莒南县\" },\n    {\n      \"value\": \"蒙阴县\",\n      \"label\": \"蒙阴县\" },\n    {\n      \"value\": \"临沭县\",\n      \"label\": \"临沭县\" }] },\n\n  {\n    \"value\": \"德州市\",\n    \"label\": \"德州市\",\n    \"children\": [{\n      \"value\": \"德城区\",\n      \"label\": \"德城区\" },\n    {\n      \"value\": \"陵城区\",\n      \"label\": \"陵城区\" },\n    {\n      \"value\": \"宁津县\",\n      \"label\": \"宁津县\" },\n    {\n      \"value\": \"庆云县\",\n      \"label\": \"庆云县\" },\n    {\n      \"value\": \"临邑县\",\n      \"label\": \"临邑县\" },\n    {\n      \"value\": \"齐河县\",\n      \"label\": \"齐河县\" },\n    {\n      \"value\": \"平原县\",\n      \"label\": \"平原县\" },\n    {\n      \"value\": \"夏津县\",\n      \"label\": \"夏津县\" },\n    {\n      \"value\": \"武城县\",\n      \"label\": \"武城县\" },\n    {\n      \"value\": \"乐陵市\",\n      \"label\": \"乐陵市\" },\n    {\n      \"value\": \"禹城市\",\n      \"label\": \"禹城市\" }] },\n\n  {\n    \"value\": \"聊城市\",\n    \"label\": \"聊城市\",\n    \"children\": [{\n      \"value\": \"东昌府区\",\n      \"label\": \"东昌府区\" },\n    {\n      \"value\": \"阳谷县\",\n      \"label\": \"阳谷县\" },\n    {\n      \"value\": \"莘县\",\n      \"label\": \"莘县\" },\n    {\n      \"value\": \"茌平县\",\n      \"label\": \"茌平县\" },\n    {\n      \"value\": \"东阿县\",\n      \"label\": \"东阿县\" },\n    {\n      \"value\": \"冠县\",\n      \"label\": \"冠县\" },\n    {\n      \"value\": \"高唐县\",\n      \"label\": \"高唐县\" },\n    {\n      \"value\": \"临清市\",\n      \"label\": \"临清市\" }] },\n\n  {\n    \"value\": \"滨州市\",\n    \"label\": \"滨州市\",\n    \"children\": [{\n      \"value\": \"滨城区\",\n      \"label\": \"滨城区\" },\n    {\n      \"value\": \"沾化区\",\n      \"label\": \"沾化区\" },\n    {\n      \"value\": \"惠民县\",\n      \"label\": \"惠民县\" },\n    {\n      \"value\": \"阳信县\",\n      \"label\": \"阳信县\" },\n    {\n      \"value\": \"无棣县\",\n      \"label\": \"无棣县\" },\n    {\n      \"value\": \"博兴县\",\n      \"label\": \"博兴县\" },\n    {\n      \"value\": \"邹平县\",\n      \"label\": \"邹平县\" }] },\n\n  {\n    \"value\": \"菏泽市\",\n    \"label\": \"菏泽市\",\n    \"children\": [{\n      \"value\": \"牡丹区\",\n      \"label\": \"牡丹区\" },\n    {\n      \"value\": \"定陶区\",\n      \"label\": \"定陶区\" },\n    {\n      \"value\": \"曹县\",\n      \"label\": \"曹县\" },\n    {\n      \"value\": \"单县\",\n      \"label\": \"单县\" },\n    {\n      \"value\": \"成武县\",\n      \"label\": \"成武县\" },\n    {\n      \"value\": \"巨野县\",\n      \"label\": \"巨野县\" },\n    {\n      \"value\": \"郓城县\",\n      \"label\": \"郓城县\" },\n    {\n      \"value\": \"鄄城县\",\n      \"label\": \"鄄城县\" },\n    {\n      \"value\": \"东明县\",\n      \"label\": \"东明县\" }] }] },\n\n\n{\n  \"value\": \"河南省\",\n  \"label\": \"河南省\",\n  \"children\": [{\n    \"value\": \"郑州市\",\n    \"label\": \"郑州市\",\n    \"children\": [{\n      \"value\": \"中原区\",\n      \"label\": \"中原区\" },\n    {\n      \"value\": \"二七区\",\n      \"label\": \"二七区\" },\n    {\n      \"value\": \"管城回族区\",\n      \"label\": \"管城回族区\" },\n    {\n      \"value\": \"金水区\",\n      \"label\": \"金水区\" },\n    {\n      \"value\": \"上街区\",\n      \"label\": \"上街区\" },\n    {\n      \"value\": \"惠济区\",\n      \"label\": \"惠济区\" },\n    {\n      \"value\": \"中牟县\",\n      \"label\": \"中牟县\" },\n    {\n      \"value\": \"巩义市\",\n      \"label\": \"巩义市\" },\n    {\n      \"value\": \"荥阳市\",\n      \"label\": \"荥阳市\" },\n    {\n      \"value\": \"新密市\",\n      \"label\": \"新密市\" },\n    {\n      \"value\": \"新郑市\",\n      \"label\": \"新郑市\" },\n    {\n      \"value\": \"登封市\",\n      \"label\": \"登封市\" }] },\n\n  {\n    \"value\": \"开封市\",\n    \"label\": \"开封市\",\n    \"children\": [{\n      \"value\": \"龙亭区\",\n      \"label\": \"龙亭区\" },\n    {\n      \"value\": \"顺河回族区\",\n      \"label\": \"顺河回族区\" },\n    {\n      \"value\": \"鼓楼区\",\n      \"label\": \"鼓楼区\" },\n    {\n      \"value\": \"禹王台区\",\n      \"label\": \"禹王台区\" },\n    {\n      \"value\": \"金明区\",\n      \"label\": \"金明区\" },\n    {\n      \"value\": \"祥符区\",\n      \"label\": \"祥符区\" },\n    {\n      \"value\": \"杞县\",\n      \"label\": \"杞县\" },\n    {\n      \"value\": \"通许县\",\n      \"label\": \"通许县\" },\n    {\n      \"value\": \"尉氏县\",\n      \"label\": \"尉氏县\" },\n    {\n      \"value\": \"兰考县\",\n      \"label\": \"兰考县\" }] },\n\n  {\n    \"value\": \"洛阳市\",\n    \"label\": \"洛阳市\",\n    \"children\": [{\n      \"value\": \"老城区\",\n      \"label\": \"老城区\" },\n    {\n      \"value\": \"西工区\",\n      \"label\": \"西工区\" },\n    {\n      \"value\": \"瀍河回族区\",\n      \"label\": \"瀍河回族区\" },\n    {\n      \"value\": \"涧西区\",\n      \"label\": \"涧西区\" },\n    {\n      \"value\": \"吉利区\",\n      \"label\": \"吉利区\" },\n    {\n      \"value\": \"洛龙区\",\n      \"label\": \"洛龙区\" },\n    {\n      \"value\": \"孟津县\",\n      \"label\": \"孟津县\" },\n    {\n      \"value\": \"新安县\",\n      \"label\": \"新安县\" },\n    {\n      \"value\": \"栾川县\",\n      \"label\": \"栾川县\" },\n    {\n      \"value\": \"嵩县\",\n      \"label\": \"嵩县\" },\n    {\n      \"value\": \"汝阳县\",\n      \"label\": \"汝阳县\" },\n    {\n      \"value\": \"宜阳县\",\n      \"label\": \"宜阳县\" },\n    {\n      \"value\": \"洛宁县\",\n      \"label\": \"洛宁县\" },\n    {\n      \"value\": \"伊川县\",\n      \"label\": \"伊川县\" },\n    {\n      \"value\": \"偃师市\",\n      \"label\": \"偃师市\" }] },\n\n  {\n    \"value\": \"平顶山市\",\n    \"label\": \"平顶山市\",\n    \"children\": [{\n      \"value\": \"新华区\",\n      \"label\": \"新华区\" },\n    {\n      \"value\": \"卫东区\",\n      \"label\": \"卫东区\" },\n    {\n      \"value\": \"石龙区\",\n      \"label\": \"石龙区\" },\n    {\n      \"value\": \"湛河区\",\n      \"label\": \"湛河区\" },\n    {\n      \"value\": \"宝丰县\",\n      \"label\": \"宝丰县\" },\n    {\n      \"value\": \"叶县\",\n      \"label\": \"叶县\" },\n    {\n      \"value\": \"鲁山县\",\n      \"label\": \"鲁山县\" },\n    {\n      \"value\": \"郏县\",\n      \"label\": \"郏县\" },\n    {\n      \"value\": \"舞钢市\",\n      \"label\": \"舞钢市\" },\n    {\n      \"value\": \"汝州市\",\n      \"label\": \"汝州市\" }] },\n\n  {\n    \"value\": \"安阳市\",\n    \"label\": \"安阳市\",\n    \"children\": [{\n      \"value\": \"文峰区\",\n      \"label\": \"文峰区\" },\n    {\n      \"value\": \"北关区\",\n      \"label\": \"北关区\" },\n    {\n      \"value\": \"殷都区\",\n      \"label\": \"殷都区\" },\n    {\n      \"value\": \"龙安区\",\n      \"label\": \"龙安区\" },\n    {\n      \"value\": \"安阳县\",\n      \"label\": \"安阳县\" },\n    {\n      \"value\": \"汤阴县\",\n      \"label\": \"汤阴县\" },\n    {\n      \"value\": \"滑县\",\n      \"label\": \"滑县\" },\n    {\n      \"value\": \"内黄县\",\n      \"label\": \"内黄县\" },\n    {\n      \"value\": \"林州市\",\n      \"label\": \"林州市\" }] },\n\n  {\n    \"value\": \"鹤壁市\",\n    \"label\": \"鹤壁市\",\n    \"children\": [{\n      \"value\": \"鹤山区\",\n      \"label\": \"鹤山区\" },\n    {\n      \"value\": \"山城区\",\n      \"label\": \"山城区\" },\n    {\n      \"value\": \"淇滨区\",\n      \"label\": \"淇滨区\" },\n    {\n      \"value\": \"浚县\",\n      \"label\": \"浚县\" },\n    {\n      \"value\": \"淇县\",\n      \"label\": \"淇县\" }] },\n\n  {\n    \"value\": \"新乡市\",\n    \"label\": \"新乡市\",\n    \"children\": [{\n      \"value\": \"红旗区\",\n      \"label\": \"红旗区\" },\n    {\n      \"value\": \"卫滨区\",\n      \"label\": \"卫滨区\" },\n    {\n      \"value\": \"凤泉区\",\n      \"label\": \"凤泉区\" },\n    {\n      \"value\": \"牧野区\",\n      \"label\": \"牧野区\" },\n    {\n      \"value\": \"新乡县\",\n      \"label\": \"新乡县\" },\n    {\n      \"value\": \"获嘉县\",\n      \"label\": \"获嘉县\" },\n    {\n      \"value\": \"原阳县\",\n      \"label\": \"原阳县\" },\n    {\n      \"value\": \"延津县\",\n      \"label\": \"延津县\" },\n    {\n      \"value\": \"封丘县\",\n      \"label\": \"封丘县\" },\n    {\n      \"value\": \"长垣县\",\n      \"label\": \"长垣县\" },\n    {\n      \"value\": \"卫辉市\",\n      \"label\": \"卫辉市\" },\n    {\n      \"value\": \"辉县市\",\n      \"label\": \"辉县市\" }] },\n\n  {\n    \"value\": \"焦作市\",\n    \"label\": \"焦作市\",\n    \"children\": [{\n      \"value\": \"解放区\",\n      \"label\": \"解放区\" },\n    {\n      \"value\": \"中站区\",\n      \"label\": \"中站区\" },\n    {\n      \"value\": \"马村区\",\n      \"label\": \"马村区\" },\n    {\n      \"value\": \"山阳区\",\n      \"label\": \"山阳区\" },\n    {\n      \"value\": \"修武县\",\n      \"label\": \"修武县\" },\n    {\n      \"value\": \"博爱县\",\n      \"label\": \"博爱县\" },\n    {\n      \"value\": \"武陟县\",\n      \"label\": \"武陟县\" },\n    {\n      \"value\": \"温县\",\n      \"label\": \"温县\" },\n    {\n      \"value\": \"沁阳市\",\n      \"label\": \"沁阳市\" },\n    {\n      \"value\": \"孟州市\",\n      \"label\": \"孟州市\" }] },\n\n  {\n    \"value\": \"濮阳市\",\n    \"label\": \"濮阳市\",\n    \"children\": [{\n      \"value\": \"华龙区\",\n      \"label\": \"华龙区\" },\n    {\n      \"value\": \"清丰县\",\n      \"label\": \"清丰县\" },\n    {\n      \"value\": \"南乐县\",\n      \"label\": \"南乐县\" },\n    {\n      \"value\": \"范县\",\n      \"label\": \"范县\" },\n    {\n      \"value\": \"台前县\",\n      \"label\": \"台前县\" },\n    {\n      \"value\": \"濮阳县\",\n      \"label\": \"濮阳县\" }] },\n\n  {\n    \"value\": \"许昌市\",\n    \"label\": \"许昌市\",\n    \"children\": [{\n      \"value\": \"魏都区\",\n      \"label\": \"魏都区\" },\n    {\n      \"value\": \"许昌县\",\n      \"label\": \"许昌县\" },\n    {\n      \"value\": \"鄢陵县\",\n      \"label\": \"鄢陵县\" },\n    {\n      \"value\": \"襄城县\",\n      \"label\": \"襄城县\" },\n    {\n      \"value\": \"禹州市\",\n      \"label\": \"禹州市\" },\n    {\n      \"value\": \"长葛市\",\n      \"label\": \"长葛市\" }] },\n\n  {\n    \"value\": \"漯河市\",\n    \"label\": \"漯河市\",\n    \"children\": [{\n      \"value\": \"源汇区\",\n      \"label\": \"源汇区\" },\n    {\n      \"value\": \"郾城区\",\n      \"label\": \"郾城区\" },\n    {\n      \"value\": \"召陵区\",\n      \"label\": \"召陵区\" },\n    {\n      \"value\": \"舞阳县\",\n      \"label\": \"舞阳县\" },\n    {\n      \"value\": \"临颍县\",\n      \"label\": \"临颍县\" }] },\n\n  {\n    \"value\": \"三门峡市\",\n    \"label\": \"三门峡市\",\n    \"children\": [{\n      \"value\": \"湖滨区\",\n      \"label\": \"湖滨区\" },\n    {\n      \"value\": \"陕州区\",\n      \"label\": \"陕州区\" },\n    {\n      \"value\": \"渑池县\",\n      \"label\": \"渑池县\" },\n    {\n      \"value\": \"卢氏县\",\n      \"label\": \"卢氏县\" },\n    {\n      \"value\": \"义马市\",\n      \"label\": \"义马市\" },\n    {\n      \"value\": \"灵宝市\",\n      \"label\": \"灵宝市\" }] },\n\n  {\n    \"value\": \"南阳市\",\n    \"label\": \"南阳市\",\n    \"children\": [{\n      \"value\": \"宛城区\",\n      \"label\": \"宛城区\" },\n    {\n      \"value\": \"卧龙区\",\n      \"label\": \"卧龙区\" },\n    {\n      \"value\": \"南召县\",\n      \"label\": \"南召县\" },\n    {\n      \"value\": \"方城县\",\n      \"label\": \"方城县\" },\n    {\n      \"value\": \"西峡县\",\n      \"label\": \"西峡县\" },\n    {\n      \"value\": \"镇平县\",\n      \"label\": \"镇平县\" },\n    {\n      \"value\": \"内乡县\",\n      \"label\": \"内乡县\" },\n    {\n      \"value\": \"淅川县\",\n      \"label\": \"淅川县\" },\n    {\n      \"value\": \"社旗县\",\n      \"label\": \"社旗县\" },\n    {\n      \"value\": \"唐河县\",\n      \"label\": \"唐河县\" },\n    {\n      \"value\": \"新野县\",\n      \"label\": \"新野县\" },\n    {\n      \"value\": \"桐柏县\",\n      \"label\": \"桐柏县\" },\n    {\n      \"value\": \"邓州市\",\n      \"label\": \"邓州市\" }] },\n\n  {\n    \"value\": \"商丘市\",\n    \"label\": \"商丘市\",\n    \"children\": [{\n      \"value\": \"梁园区\",\n      \"label\": \"梁园区\" },\n    {\n      \"value\": \"睢阳区\",\n      \"label\": \"睢阳区\" },\n    {\n      \"value\": \"民权县\",\n      \"label\": \"民权县\" },\n    {\n      \"value\": \"睢县\",\n      \"label\": \"睢县\" },\n    {\n      \"value\": \"宁陵县\",\n      \"label\": \"宁陵县\" },\n    {\n      \"value\": \"柘城县\",\n      \"label\": \"柘城县\" },\n    {\n      \"value\": \"虞城县\",\n      \"label\": \"虞城县\" },\n    {\n      \"value\": \"夏邑县\",\n      \"label\": \"夏邑县\" },\n    {\n      \"value\": \"永城市\",\n      \"label\": \"永城市\" }] },\n\n  {\n    \"value\": \"信阳市\",\n    \"label\": \"信阳市\",\n    \"children\": [{\n      \"value\": \"浉河区\",\n      \"label\": \"浉河区\" },\n    {\n      \"value\": \"平桥区\",\n      \"label\": \"平桥区\" },\n    {\n      \"value\": \"罗山县\",\n      \"label\": \"罗山县\" },\n    {\n      \"value\": \"光山县\",\n      \"label\": \"光山县\" },\n    {\n      \"value\": \"新县\",\n      \"label\": \"新县\" },\n    {\n      \"value\": \"商城县\",\n      \"label\": \"商城县\" },\n    {\n      \"value\": \"固始县\",\n      \"label\": \"固始县\" },\n    {\n      \"value\": \"潢川县\",\n      \"label\": \"潢川县\" },\n    {\n      \"value\": \"淮滨县\",\n      \"label\": \"淮滨县\" },\n    {\n      \"value\": \"息县\",\n      \"label\": \"息县\" }] },\n\n  {\n    \"value\": \"周口市\",\n    \"label\": \"周口市\",\n    \"children\": [{\n      \"value\": \"川汇区\",\n      \"label\": \"川汇区\" },\n    {\n      \"value\": \"扶沟县\",\n      \"label\": \"扶沟县\" },\n    {\n      \"value\": \"西华县\",\n      \"label\": \"西华县\" },\n    {\n      \"value\": \"商水县\",\n      \"label\": \"商水县\" },\n    {\n      \"value\": \"沈丘县\",\n      \"label\": \"沈丘县\" },\n    {\n      \"value\": \"郸城县\",\n      \"label\": \"郸城县\" },\n    {\n      \"value\": \"淮阳县\",\n      \"label\": \"淮阳县\" },\n    {\n      \"value\": \"太康县\",\n      \"label\": \"太康县\" },\n    {\n      \"value\": \"鹿邑县\",\n      \"label\": \"鹿邑县\" },\n    {\n      \"value\": \"项城市\",\n      \"label\": \"项城市\" }] },\n\n  {\n    \"value\": \"驻马店市\",\n    \"label\": \"驻马店市\",\n    \"children\": [{\n      \"value\": \"驿城区\",\n      \"label\": \"驿城区\" },\n    {\n      \"value\": \"西平县\",\n      \"label\": \"西平县\" },\n    {\n      \"value\": \"上蔡县\",\n      \"label\": \"上蔡县\" },\n    {\n      \"value\": \"平舆县\",\n      \"label\": \"平舆县\" },\n    {\n      \"value\": \"正阳县\",\n      \"label\": \"正阳县\" },\n    {\n      \"value\": \"确山县\",\n      \"label\": \"确山县\" },\n    {\n      \"value\": \"泌阳县\",\n      \"label\": \"泌阳县\" },\n    {\n      \"value\": \"汝南县\",\n      \"label\": \"汝南县\" },\n    {\n      \"value\": \"遂平县\",\n      \"label\": \"遂平县\" },\n    {\n      \"value\": \"新蔡县\",\n      \"label\": \"新蔡县\" }] },\n\n  {\n    \"value\": \"省直辖县级行政区划\",\n    \"label\": \"省直辖县级行政区划\",\n    \"children\": [{\n      \"value\": \"济源市\",\n      \"label\": \"济源市\" }] }] },\n\n\n{\n  \"value\": \"湖北省\",\n  \"label\": \"湖北省\",\n  \"children\": [{\n    \"value\": \"武汉市\",\n    \"label\": \"武汉市\",\n    \"children\": [{\n      \"value\": \"江岸区\",\n      \"label\": \"江岸区\" },\n    {\n      \"value\": \"江汉区\",\n      \"label\": \"江汉区\" },\n    {\n      \"value\": \"硚口区\",\n      \"label\": \"硚口区\" },\n    {\n      \"value\": \"汉阳区\",\n      \"label\": \"汉阳区\" },\n    {\n      \"value\": \"武昌区\",\n      \"label\": \"武昌区\" },\n    {\n      \"value\": \"青山区\",\n      \"label\": \"青山区\" },\n    {\n      \"value\": \"洪山区\",\n      \"label\": \"洪山区\" },\n    {\n      \"value\": \"东西湖区\",\n      \"label\": \"东西湖区\" },\n    {\n      \"value\": \"汉南区\",\n      \"label\": \"汉南区\" },\n    {\n      \"value\": \"蔡甸区\",\n      \"label\": \"蔡甸区\" },\n    {\n      \"value\": \"江夏区\",\n      \"label\": \"江夏区\" },\n    {\n      \"value\": \"黄陂区\",\n      \"label\": \"黄陂区\" },\n    {\n      \"value\": \"新洲区\",\n      \"label\": \"新洲区\" }] },\n\n  {\n    \"value\": \"黄石市\",\n    \"label\": \"黄石市\",\n    \"children\": [{\n      \"value\": \"黄石港区\",\n      \"label\": \"黄石港区\" },\n    {\n      \"value\": \"西塞山区\",\n      \"label\": \"西塞山区\" },\n    {\n      \"value\": \"下陆区\",\n      \"label\": \"下陆区\" },\n    {\n      \"value\": \"铁山区\",\n      \"label\": \"铁山区\" },\n    {\n      \"value\": \"阳新县\",\n      \"label\": \"阳新县\" },\n    {\n      \"value\": \"大冶市\",\n      \"label\": \"大冶市\" }] },\n\n  {\n    \"value\": \"十堰市\",\n    \"label\": \"十堰市\",\n    \"children\": [{\n      \"value\": \"茅箭区\",\n      \"label\": \"茅箭区\" },\n    {\n      \"value\": \"张湾区\",\n      \"label\": \"张湾区\" },\n    {\n      \"value\": \"郧阳区\",\n      \"label\": \"郧阳区\" },\n    {\n      \"value\": \"郧西县\",\n      \"label\": \"郧西县\" },\n    {\n      \"value\": \"竹山县\",\n      \"label\": \"竹山县\" },\n    {\n      \"value\": \"竹溪县\",\n      \"label\": \"竹溪县\" },\n    {\n      \"value\": \"房县\",\n      \"label\": \"房县\" },\n    {\n      \"value\": \"丹江口市\",\n      \"label\": \"丹江口市\" }] },\n\n  {\n    \"value\": \"宜昌市\",\n    \"label\": \"宜昌市\",\n    \"children\": [{\n      \"value\": \"西陵区\",\n      \"label\": \"西陵区\" },\n    {\n      \"value\": \"伍家岗区\",\n      \"label\": \"伍家岗区\" },\n    {\n      \"value\": \"点军区\",\n      \"label\": \"点军区\" },\n    {\n      \"value\": \"猇亭区\",\n      \"label\": \"猇亭区\" },\n    {\n      \"value\": \"夷陵区\",\n      \"label\": \"夷陵区\" },\n    {\n      \"value\": \"远安县\",\n      \"label\": \"远安县\" },\n    {\n      \"value\": \"兴山县\",\n      \"label\": \"兴山县\" },\n    {\n      \"value\": \"秭归县\",\n      \"label\": \"秭归县\" },\n    {\n      \"value\": \"长阳土家族自治县\",\n      \"label\": \"长阳土家族自治县\" },\n    {\n      \"value\": \"五峰土家族自治县\",\n      \"label\": \"五峰土家族自治县\" },\n    {\n      \"value\": \"宜都市\",\n      \"label\": \"宜都市\" },\n    {\n      \"value\": \"当阳市\",\n      \"label\": \"当阳市\" },\n    {\n      \"value\": \"枝江市\",\n      \"label\": \"枝江市\" }] },\n\n  {\n    \"value\": \"襄阳市\",\n    \"label\": \"襄阳市\",\n    \"children\": [{\n      \"value\": \"襄城区\",\n      \"label\": \"襄城区\" },\n    {\n      \"value\": \"樊城区\",\n      \"label\": \"樊城区\" },\n    {\n      \"value\": \"襄州区\",\n      \"label\": \"襄州区\" },\n    {\n      \"value\": \"南漳县\",\n      \"label\": \"南漳县\" },\n    {\n      \"value\": \"谷城县\",\n      \"label\": \"谷城县\" },\n    {\n      \"value\": \"保康县\",\n      \"label\": \"保康县\" },\n    {\n      \"value\": \"老河口市\",\n      \"label\": \"老河口市\" },\n    {\n      \"value\": \"枣阳市\",\n      \"label\": \"枣阳市\" },\n    {\n      \"value\": \"宜城市\",\n      \"label\": \"宜城市\" }] },\n\n  {\n    \"value\": \"鄂州市\",\n    \"label\": \"鄂州市\",\n    \"children\": [{\n      \"value\": \"梁子湖区\",\n      \"label\": \"梁子湖区\" },\n    {\n      \"value\": \"华容区\",\n      \"label\": \"华容区\" },\n    {\n      \"value\": \"鄂城区\",\n      \"label\": \"鄂城区\" }] },\n\n  {\n    \"value\": \"荆门市\",\n    \"label\": \"荆门市\",\n    \"children\": [{\n      \"value\": \"东宝区\",\n      \"label\": \"东宝区\" },\n    {\n      \"value\": \"掇刀区\",\n      \"label\": \"掇刀区\" },\n    {\n      \"value\": \"京山县\",\n      \"label\": \"京山县\" },\n    {\n      \"value\": \"沙洋县\",\n      \"label\": \"沙洋县\" },\n    {\n      \"value\": \"钟祥市\",\n      \"label\": \"钟祥市\" }] },\n\n  {\n    \"value\": \"孝感市\",\n    \"label\": \"孝感市\",\n    \"children\": [{\n      \"value\": \"孝南区\",\n      \"label\": \"孝南区\" },\n    {\n      \"value\": \"孝昌县\",\n      \"label\": \"孝昌县\" },\n    {\n      \"value\": \"大悟县\",\n      \"label\": \"大悟县\" },\n    {\n      \"value\": \"云梦县\",\n      \"label\": \"云梦县\" },\n    {\n      \"value\": \"应城市\",\n      \"label\": \"应城市\" },\n    {\n      \"value\": \"安陆市\",\n      \"label\": \"安陆市\" },\n    {\n      \"value\": \"汉川市\",\n      \"label\": \"汉川市\" }] },\n\n  {\n    \"value\": \"荆州市\",\n    \"label\": \"荆州市\",\n    \"children\": [{\n      \"value\": \"沙市区\",\n      \"label\": \"沙市区\" },\n    {\n      \"value\": \"荆州区\",\n      \"label\": \"荆州区\" },\n    {\n      \"value\": \"公安县\",\n      \"label\": \"公安县\" },\n    {\n      \"value\": \"监利县\",\n      \"label\": \"监利县\" },\n    {\n      \"value\": \"江陵县\",\n      \"label\": \"江陵县\" },\n    {\n      \"value\": \"石首市\",\n      \"label\": \"石首市\" },\n    {\n      \"value\": \"洪湖市\",\n      \"label\": \"洪湖市\" },\n    {\n      \"value\": \"松滋市\",\n      \"label\": \"松滋市\" }] },\n\n  {\n    \"value\": \"黄冈市\",\n    \"label\": \"黄冈市\",\n    \"children\": [{\n      \"value\": \"黄州区\",\n      \"label\": \"黄州区\" },\n    {\n      \"value\": \"团风县\",\n      \"label\": \"团风县\" },\n    {\n      \"value\": \"红安县\",\n      \"label\": \"红安县\" },\n    {\n      \"value\": \"罗田县\",\n      \"label\": \"罗田县\" },\n    {\n      \"value\": \"英山县\",\n      \"label\": \"英山县\" },\n    {\n      \"value\": \"浠水县\",\n      \"label\": \"浠水县\" },\n    {\n      \"value\": \"蕲春县\",\n      \"label\": \"蕲春县\" },\n    {\n      \"value\": \"黄梅县\",\n      \"label\": \"黄梅县\" },\n    {\n      \"value\": \"麻城市\",\n      \"label\": \"麻城市\" },\n    {\n      \"value\": \"武穴市\",\n      \"label\": \"武穴市\" }] },\n\n  {\n    \"value\": \"咸宁市\",\n    \"label\": \"咸宁市\",\n    \"children\": [{\n      \"value\": \"咸安区\",\n      \"label\": \"咸安区\" },\n    {\n      \"value\": \"嘉鱼县\",\n      \"label\": \"嘉鱼县\" },\n    {\n      \"value\": \"通城县\",\n      \"label\": \"通城县\" },\n    {\n      \"value\": \"崇阳县\",\n      \"label\": \"崇阳县\" },\n    {\n      \"value\": \"通山县\",\n      \"label\": \"通山县\" },\n    {\n      \"value\": \"赤壁市\",\n      \"label\": \"赤壁市\" }] },\n\n  {\n    \"value\": \"随州市\",\n    \"label\": \"随州市\",\n    \"children\": [{\n      \"value\": \"曾都区\",\n      \"label\": \"曾都区\" },\n    {\n      \"value\": \"随县\",\n      \"label\": \"随县\" },\n    {\n      \"value\": \"广水市\",\n      \"label\": \"广水市\" }] },\n\n  {\n    \"value\": \"恩施土家族苗族自治州\",\n    \"label\": \"恩施土家族苗族自治州\",\n    \"children\": [{\n      \"value\": \"恩施市\",\n      \"label\": \"恩施市\" },\n    {\n      \"value\": \"利川市\",\n      \"label\": \"利川市\" },\n    {\n      \"value\": \"建始县\",\n      \"label\": \"建始县\" },\n    {\n      \"value\": \"巴东县\",\n      \"label\": \"巴东县\" },\n    {\n      \"value\": \"宣恩县\",\n      \"label\": \"宣恩县\" },\n    {\n      \"value\": \"咸丰县\",\n      \"label\": \"咸丰县\" },\n    {\n      \"value\": \"来凤县\",\n      \"label\": \"来凤县\" },\n    {\n      \"value\": \"鹤峰县\",\n      \"label\": \"鹤峰县\" }] },\n\n  {\n    \"value\": \"省直辖县级行政区划\",\n    \"label\": \"省直辖县级行政区划\",\n    \"children\": [{\n      \"value\": \"仙桃市\",\n      \"label\": \"仙桃市\" },\n    {\n      \"value\": \"潜江市\",\n      \"label\": \"潜江市\" },\n    {\n      \"value\": \"天门市\",\n      \"label\": \"天门市\" },\n    {\n      \"value\": \"神农架林区\",\n      \"label\": \"神农架林区\" }] }] },\n\n\n{\n  \"value\": \"湖南省\",\n  \"label\": \"湖南省\",\n  \"children\": [{\n    \"value\": \"长沙市\",\n    \"label\": \"长沙市\",\n    \"children\": [{\n      \"value\": \"芙蓉区\",\n      \"label\": \"芙蓉区\" },\n    {\n      \"value\": \"天心区\",\n      \"label\": \"天心区\" },\n    {\n      \"value\": \"岳麓区\",\n      \"label\": \"岳麓区\" },\n    {\n      \"value\": \"开福区\",\n      \"label\": \"开福区\" },\n    {\n      \"value\": \"雨花区\",\n      \"label\": \"雨花区\" },\n    {\n      \"value\": \"望城区\",\n      \"label\": \"望城区\" },\n    {\n      \"value\": \"长沙县\",\n      \"label\": \"长沙县\" },\n    {\n      \"value\": \"宁乡县\",\n      \"label\": \"宁乡县\" },\n    {\n      \"value\": \"浏阳市\",\n      \"label\": \"浏阳市\" }] },\n\n  {\n    \"value\": \"株洲市\",\n    \"label\": \"株洲市\",\n    \"children\": [{\n      \"value\": \"荷塘区\",\n      \"label\": \"荷塘区\" },\n    {\n      \"value\": \"芦淞区\",\n      \"label\": \"芦淞区\" },\n    {\n      \"value\": \"石峰区\",\n      \"label\": \"石峰区\" },\n    {\n      \"value\": \"天元区\",\n      \"label\": \"天元区\" },\n    {\n      \"value\": \"株洲县\",\n      \"label\": \"株洲县\" },\n    {\n      \"value\": \"攸县\",\n      \"label\": \"攸县\" },\n    {\n      \"value\": \"茶陵县\",\n      \"label\": \"茶陵县\" },\n    {\n      \"value\": \"炎陵县\",\n      \"label\": \"炎陵县\" },\n    {\n      \"value\": \"醴陵市\",\n      \"label\": \"醴陵市\" }] },\n\n  {\n    \"value\": \"湘潭市\",\n    \"label\": \"湘潭市\",\n    \"children\": [{\n      \"value\": \"雨湖区\",\n      \"label\": \"雨湖区\" },\n    {\n      \"value\": \"岳塘区\",\n      \"label\": \"岳塘区\" },\n    {\n      \"value\": \"湘潭县\",\n      \"label\": \"湘潭县\" },\n    {\n      \"value\": \"湘乡市\",\n      \"label\": \"湘乡市\" },\n    {\n      \"value\": \"韶山市\",\n      \"label\": \"韶山市\" }] },\n\n  {\n    \"value\": \"衡阳市\",\n    \"label\": \"衡阳市\",\n    \"children\": [{\n      \"value\": \"珠晖区\",\n      \"label\": \"珠晖区\" },\n    {\n      \"value\": \"雁峰区\",\n      \"label\": \"雁峰区\" },\n    {\n      \"value\": \"石鼓区\",\n      \"label\": \"石鼓区\" },\n    {\n      \"value\": \"蒸湘区\",\n      \"label\": \"蒸湘区\" },\n    {\n      \"value\": \"南岳区\",\n      \"label\": \"南岳区\" },\n    {\n      \"value\": \"衡阳县\",\n      \"label\": \"衡阳县\" },\n    {\n      \"value\": \"衡南县\",\n      \"label\": \"衡南县\" },\n    {\n      \"value\": \"衡山县\",\n      \"label\": \"衡山县\" },\n    {\n      \"value\": \"衡东县\",\n      \"label\": \"衡东县\" },\n    {\n      \"value\": \"祁东县\",\n      \"label\": \"祁东县\" },\n    {\n      \"value\": \"耒阳市\",\n      \"label\": \"耒阳市\" },\n    {\n      \"value\": \"常宁市\",\n      \"label\": \"常宁市\" }] },\n\n  {\n    \"value\": \"邵阳市\",\n    \"label\": \"邵阳市\",\n    \"children\": [{\n      \"value\": \"双清区\",\n      \"label\": \"双清区\" },\n    {\n      \"value\": \"大祥区\",\n      \"label\": \"大祥区\" },\n    {\n      \"value\": \"北塔区\",\n      \"label\": \"北塔区\" },\n    {\n      \"value\": \"邵东县\",\n      \"label\": \"邵东县\" },\n    {\n      \"value\": \"新邵县\",\n      \"label\": \"新邵县\" },\n    {\n      \"value\": \"邵阳县\",\n      \"label\": \"邵阳县\" },\n    {\n      \"value\": \"隆回县\",\n      \"label\": \"隆回县\" },\n    {\n      \"value\": \"洞口县\",\n      \"label\": \"洞口县\" },\n    {\n      \"value\": \"绥宁县\",\n      \"label\": \"绥宁县\" },\n    {\n      \"value\": \"新宁县\",\n      \"label\": \"新宁县\" },\n    {\n      \"value\": \"城步苗族自治县\",\n      \"label\": \"城步苗族自治县\" },\n    {\n      \"value\": \"武冈市\",\n      \"label\": \"武冈市\" }] },\n\n  {\n    \"value\": \"岳阳市\",\n    \"label\": \"岳阳市\",\n    \"children\": [{\n      \"value\": \"岳阳楼区\",\n      \"label\": \"岳阳楼区\" },\n    {\n      \"value\": \"云溪区\",\n      \"label\": \"云溪区\" },\n    {\n      \"value\": \"君山区\",\n      \"label\": \"君山区\" },\n    {\n      \"value\": \"岳阳县\",\n      \"label\": \"岳阳县\" },\n    {\n      \"value\": \"华容县\",\n      \"label\": \"华容县\" },\n    {\n      \"value\": \"湘阴县\",\n      \"label\": \"湘阴县\" },\n    {\n      \"value\": \"平江县\",\n      \"label\": \"平江县\" },\n    {\n      \"value\": \"汨罗市\",\n      \"label\": \"汨罗市\" },\n    {\n      \"value\": \"临湘市\",\n      \"label\": \"临湘市\" }] },\n\n  {\n    \"value\": \"常德市\",\n    \"label\": \"常德市\",\n    \"children\": [{\n      \"value\": \"武陵区\",\n      \"label\": \"武陵区\" },\n    {\n      \"value\": \"鼎城区\",\n      \"label\": \"鼎城区\" },\n    {\n      \"value\": \"安乡县\",\n      \"label\": \"安乡县\" },\n    {\n      \"value\": \"汉寿县\",\n      \"label\": \"汉寿县\" },\n    {\n      \"value\": \"澧县\",\n      \"label\": \"澧县\" },\n    {\n      \"value\": \"临澧县\",\n      \"label\": \"临澧县\" },\n    {\n      \"value\": \"桃源县\",\n      \"label\": \"桃源县\" },\n    {\n      \"value\": \"石门县\",\n      \"label\": \"石门县\" },\n    {\n      \"value\": \"津市市\",\n      \"label\": \"津市市\" }] },\n\n  {\n    \"value\": \"张家界市\",\n    \"label\": \"张家界市\",\n    \"children\": [{\n      \"value\": \"永定区\",\n      \"label\": \"永定区\" },\n    {\n      \"value\": \"武陵源区\",\n      \"label\": \"武陵源区\" },\n    {\n      \"value\": \"慈利县\",\n      \"label\": \"慈利县\" },\n    {\n      \"value\": \"桑植县\",\n      \"label\": \"桑植县\" }] },\n\n  {\n    \"value\": \"益阳市\",\n    \"label\": \"益阳市\",\n    \"children\": [{\n      \"value\": \"资阳区\",\n      \"label\": \"资阳区\" },\n    {\n      \"value\": \"赫山区\",\n      \"label\": \"赫山区\" },\n    {\n      \"value\": \"南县\",\n      \"label\": \"南县\" },\n    {\n      \"value\": \"桃江县\",\n      \"label\": \"桃江县\" },\n    {\n      \"value\": \"安化县\",\n      \"label\": \"安化县\" },\n    {\n      \"value\": \"沅江市\",\n      \"label\": \"沅江市\" }] },\n\n  {\n    \"value\": \"郴州市\",\n    \"label\": \"郴州市\",\n    \"children\": [{\n      \"value\": \"北湖区\",\n      \"label\": \"北湖区\" },\n    {\n      \"value\": \"苏仙区\",\n      \"label\": \"苏仙区\" },\n    {\n      \"value\": \"桂阳县\",\n      \"label\": \"桂阳县\" },\n    {\n      \"value\": \"宜章县\",\n      \"label\": \"宜章县\" },\n    {\n      \"value\": \"永兴县\",\n      \"label\": \"永兴县\" },\n    {\n      \"value\": \"嘉禾县\",\n      \"label\": \"嘉禾县\" },\n    {\n      \"value\": \"临武县\",\n      \"label\": \"临武县\" },\n    {\n      \"value\": \"汝城县\",\n      \"label\": \"汝城县\" },\n    {\n      \"value\": \"桂东县\",\n      \"label\": \"桂东县\" },\n    {\n      \"value\": \"安仁县\",\n      \"label\": \"安仁县\" },\n    {\n      \"value\": \"资兴市\",\n      \"label\": \"资兴市\" }] },\n\n  {\n    \"value\": \"永州市\",\n    \"label\": \"永州市\",\n    \"children\": [{\n      \"value\": \"零陵区\",\n      \"label\": \"零陵区\" },\n    {\n      \"value\": \"冷水滩区\",\n      \"label\": \"冷水滩区\" },\n    {\n      \"value\": \"祁阳县\",\n      \"label\": \"祁阳县\" },\n    {\n      \"value\": \"东安县\",\n      \"label\": \"东安县\" },\n    {\n      \"value\": \"双牌县\",\n      \"label\": \"双牌县\" },\n    {\n      \"value\": \"道县\",\n      \"label\": \"道县\" },\n    {\n      \"value\": \"江永县\",\n      \"label\": \"江永县\" },\n    {\n      \"value\": \"宁远县\",\n      \"label\": \"宁远县\" },\n    {\n      \"value\": \"蓝山县\",\n      \"label\": \"蓝山县\" },\n    {\n      \"value\": \"新田县\",\n      \"label\": \"新田县\" },\n    {\n      \"value\": \"江华瑶族自治县\",\n      \"label\": \"江华瑶族自治县\" }] },\n\n  {\n    \"value\": \"怀化市\",\n    \"label\": \"怀化市\",\n    \"children\": [{\n      \"value\": \"鹤城区\",\n      \"label\": \"鹤城区\" },\n    {\n      \"value\": \"中方县\",\n      \"label\": \"中方县\" },\n    {\n      \"value\": \"沅陵县\",\n      \"label\": \"沅陵县\" },\n    {\n      \"value\": \"辰溪县\",\n      \"label\": \"辰溪县\" },\n    {\n      \"value\": \"溆浦县\",\n      \"label\": \"溆浦县\" },\n    {\n      \"value\": \"会同县\",\n      \"label\": \"会同县\" },\n    {\n      \"value\": \"麻阳苗族自治县\",\n      \"label\": \"麻阳苗族自治县\" },\n    {\n      \"value\": \"新晃侗族自治县\",\n      \"label\": \"新晃侗族自治县\" },\n    {\n      \"value\": \"芷江侗族自治县\",\n      \"label\": \"芷江侗族自治县\" },\n    {\n      \"value\": \"靖州苗族侗族自治县\",\n      \"label\": \"靖州苗族侗族自治县\" },\n    {\n      \"value\": \"通道侗族自治县\",\n      \"label\": \"通道侗族自治县\" },\n    {\n      \"value\": \"洪江市\",\n      \"label\": \"洪江市\" }] },\n\n  {\n    \"value\": \"娄底市\",\n    \"label\": \"娄底市\",\n    \"children\": [{\n      \"value\": \"娄星区\",\n      \"label\": \"娄星区\" },\n    {\n      \"value\": \"双峰县\",\n      \"label\": \"双峰县\" },\n    {\n      \"value\": \"新化县\",\n      \"label\": \"新化县\" },\n    {\n      \"value\": \"冷水江市\",\n      \"label\": \"冷水江市\" },\n    {\n      \"value\": \"涟源市\",\n      \"label\": \"涟源市\" }] },\n\n  {\n    \"value\": \"湘西土家族苗族自治州\",\n    \"label\": \"湘西土家族苗族自治州\",\n    \"children\": [{\n      \"value\": \"吉首市\",\n      \"label\": \"吉首市\" },\n    {\n      \"value\": \"泸溪县\",\n      \"label\": \"泸溪县\" },\n    {\n      \"value\": \"凤凰县\",\n      \"label\": \"凤凰县\" },\n    {\n      \"value\": \"花垣县\",\n      \"label\": \"花垣县\" },\n    {\n      \"value\": \"保靖县\",\n      \"label\": \"保靖县\" },\n    {\n      \"value\": \"古丈县\",\n      \"label\": \"古丈县\" },\n    {\n      \"value\": \"永顺县\",\n      \"label\": \"永顺县\" },\n    {\n      \"value\": \"龙山县\",\n      \"label\": \"龙山县\" }] }] },\n\n\n{\n  \"value\": \"广东省\",\n  \"label\": \"广东省\",\n  \"children\": [{\n    \"value\": \"广州市\",\n    \"label\": \"广州市\",\n    \"children\": [{\n      \"value\": \"荔湾区\",\n      \"label\": \"荔湾区\" },\n    {\n      \"value\": \"越秀区\",\n      \"label\": \"越秀区\" },\n    {\n      \"value\": \"海珠区\",\n      \"label\": \"海珠区\" },\n    {\n      \"value\": \"天河区\",\n      \"label\": \"天河区\" },\n    {\n      \"value\": \"白云区\",\n      \"label\": \"白云区\" },\n    {\n      \"value\": \"黄埔区\",\n      \"label\": \"黄埔区\" },\n    {\n      \"value\": \"番禺区\",\n      \"label\": \"番禺区\" },\n    {\n      \"value\": \"花都区\",\n      \"label\": \"花都区\" },\n    {\n      \"value\": \"南沙区\",\n      \"label\": \"南沙区\" },\n    {\n      \"value\": \"从化区\",\n      \"label\": \"从化区\" },\n    {\n      \"value\": \"增城区\",\n      \"label\": \"增城区\" }] },\n\n  {\n    \"value\": \"韶关市\",\n    \"label\": \"韶关市\",\n    \"children\": [{\n      \"value\": \"武江区\",\n      \"label\": \"武江区\" },\n    {\n      \"value\": \"浈江区\",\n      \"label\": \"浈江区\" },\n    {\n      \"value\": \"曲江区\",\n      \"label\": \"曲江区\" },\n    {\n      \"value\": \"始兴县\",\n      \"label\": \"始兴县\" },\n    {\n      \"value\": \"仁化县\",\n      \"label\": \"仁化县\" },\n    {\n      \"value\": \"翁源县\",\n      \"label\": \"翁源县\" },\n    {\n      \"value\": \"乳源瑶族自治县\",\n      \"label\": \"乳源瑶族自治县\" },\n    {\n      \"value\": \"新丰县\",\n      \"label\": \"新丰县\" },\n    {\n      \"value\": \"乐昌市\",\n      \"label\": \"乐昌市\" },\n    {\n      \"value\": \"南雄市\",\n      \"label\": \"南雄市\" }] },\n\n  {\n    \"value\": \"深圳市\",\n    \"label\": \"深圳市\",\n    \"children\": [{\n      \"value\": \"罗湖区\",\n      \"label\": \"罗湖区\" },\n    {\n      \"value\": \"福田区\",\n      \"label\": \"福田区\" },\n    {\n      \"value\": \"南山区\",\n      \"label\": \"南山区\" },\n    {\n      \"value\": \"宝安区\",\n      \"label\": \"宝安区\" },\n    {\n      \"value\": \"龙岗区\",\n      \"label\": \"龙岗区\" },\n    {\n      \"value\": \"盐田区\",\n      \"label\": \"盐田区\" }] },\n\n  {\n    \"value\": \"珠海市\",\n    \"label\": \"珠海市\",\n    \"children\": [{\n      \"value\": \"香洲区\",\n      \"label\": \"香洲区\" },\n    {\n      \"value\": \"斗门区\",\n      \"label\": \"斗门区\" },\n    {\n      \"value\": \"金湾区\",\n      \"label\": \"金湾区\" }] },\n\n  {\n    \"value\": \"汕头市\",\n    \"label\": \"汕头市\",\n    \"children\": [{\n      \"value\": \"龙湖区\",\n      \"label\": \"龙湖区\" },\n    {\n      \"value\": \"金平区\",\n      \"label\": \"金平区\" },\n    {\n      \"value\": \"濠江区\",\n      \"label\": \"濠江区\" },\n    {\n      \"value\": \"潮阳区\",\n      \"label\": \"潮阳区\" },\n    {\n      \"value\": \"潮南区\",\n      \"label\": \"潮南区\" },\n    {\n      \"value\": \"澄海区\",\n      \"label\": \"澄海区\" },\n    {\n      \"value\": \"南澳县\",\n      \"label\": \"南澳县\" }] },\n\n  {\n    \"value\": \"佛山市\",\n    \"label\": \"佛山市\",\n    \"children\": [{\n      \"value\": \"禅城区\",\n      \"label\": \"禅城区\" },\n    {\n      \"value\": \"南海区\",\n      \"label\": \"南海区\" },\n    {\n      \"value\": \"顺德区\",\n      \"label\": \"顺德区\" },\n    {\n      \"value\": \"三水区\",\n      \"label\": \"三水区\" },\n    {\n      \"value\": \"高明区\",\n      \"label\": \"高明区\" }] },\n\n  {\n    \"value\": \"江门市\",\n    \"label\": \"江门市\",\n    \"children\": [{\n      \"value\": \"蓬江区\",\n      \"label\": \"蓬江区\" },\n    {\n      \"value\": \"江海区\",\n      \"label\": \"江海区\" },\n    {\n      \"value\": \"新会区\",\n      \"label\": \"新会区\" },\n    {\n      \"value\": \"台山市\",\n      \"label\": \"台山市\" },\n    {\n      \"value\": \"开平市\",\n      \"label\": \"开平市\" },\n    {\n      \"value\": \"鹤山市\",\n      \"label\": \"鹤山市\" },\n    {\n      \"value\": \"恩平市\",\n      \"label\": \"恩平市\" }] },\n\n  {\n    \"value\": \"湛江市\",\n    \"label\": \"湛江市\",\n    \"children\": [{\n      \"value\": \"赤坎区\",\n      \"label\": \"赤坎区\" },\n    {\n      \"value\": \"霞山区\",\n      \"label\": \"霞山区\" },\n    {\n      \"value\": \"坡头区\",\n      \"label\": \"坡头区\" },\n    {\n      \"value\": \"麻章区\",\n      \"label\": \"麻章区\" },\n    {\n      \"value\": \"遂溪县\",\n      \"label\": \"遂溪县\" },\n    {\n      \"value\": \"徐闻县\",\n      \"label\": \"徐闻县\" },\n    {\n      \"value\": \"廉江市\",\n      \"label\": \"廉江市\" },\n    {\n      \"value\": \"雷州市\",\n      \"label\": \"雷州市\" },\n    {\n      \"value\": \"吴川市\",\n      \"label\": \"吴川市\" }] },\n\n  {\n    \"value\": \"茂名市\",\n    \"label\": \"茂名市\",\n    \"children\": [{\n      \"value\": \"茂南区\",\n      \"label\": \"茂南区\" },\n    {\n      \"value\": \"电白区\",\n      \"label\": \"电白区\" },\n    {\n      \"value\": \"高州市\",\n      \"label\": \"高州市\" },\n    {\n      \"value\": \"化州市\",\n      \"label\": \"化州市\" },\n    {\n      \"value\": \"信宜市\",\n      \"label\": \"信宜市\" }] },\n\n  {\n    \"value\": \"肇庆市\",\n    \"label\": \"肇庆市\",\n    \"children\": [{\n      \"value\": \"端州区\",\n      \"label\": \"端州区\" },\n    {\n      \"value\": \"鼎湖区\",\n      \"label\": \"鼎湖区\" },\n    {\n      \"value\": \"高要区\",\n      \"label\": \"高要区\" },\n    {\n      \"value\": \"广宁县\",\n      \"label\": \"广宁县\" },\n    {\n      \"value\": \"怀集县\",\n      \"label\": \"怀集县\" },\n    {\n      \"value\": \"封开县\",\n      \"label\": \"封开县\" },\n    {\n      \"value\": \"德庆县\",\n      \"label\": \"德庆县\" },\n    {\n      \"value\": \"四会市\",\n      \"label\": \"四会市\" }] },\n\n  {\n    \"value\": \"惠州市\",\n    \"label\": \"惠州市\",\n    \"children\": [{\n      \"value\": \"惠城区\",\n      \"label\": \"惠城区\" },\n    {\n      \"value\": \"惠阳区\",\n      \"label\": \"惠阳区\" },\n    {\n      \"value\": \"博罗县\",\n      \"label\": \"博罗县\" },\n    {\n      \"value\": \"惠东县\",\n      \"label\": \"惠东县\" },\n    {\n      \"value\": \"龙门县\",\n      \"label\": \"龙门县\" }] },\n\n  {\n    \"value\": \"梅州市\",\n    \"label\": \"梅州市\",\n    \"children\": [{\n      \"value\": \"梅江区\",\n      \"label\": \"梅江区\" },\n    {\n      \"value\": \"梅县区\",\n      \"label\": \"梅县区\" },\n    {\n      \"value\": \"大埔县\",\n      \"label\": \"大埔县\" },\n    {\n      \"value\": \"丰顺县\",\n      \"label\": \"丰顺县\" },\n    {\n      \"value\": \"五华县\",\n      \"label\": \"五华县\" },\n    {\n      \"value\": \"平远县\",\n      \"label\": \"平远县\" },\n    {\n      \"value\": \"蕉岭县\",\n      \"label\": \"蕉岭县\" },\n    {\n      \"value\": \"兴宁市\",\n      \"label\": \"兴宁市\" }] },\n\n  {\n    \"value\": \"汕尾市\",\n    \"label\": \"汕尾市\",\n    \"children\": [{\n      \"value\": \"城区\",\n      \"label\": \"城区\" },\n    {\n      \"value\": \"海丰县\",\n      \"label\": \"海丰县\" },\n    {\n      \"value\": \"陆河县\",\n      \"label\": \"陆河县\" },\n    {\n      \"value\": \"陆丰市\",\n      \"label\": \"陆丰市\" }] },\n\n  {\n    \"value\": \"河源市\",\n    \"label\": \"河源市\",\n    \"children\": [{\n      \"value\": \"源城区\",\n      \"label\": \"源城区\" },\n    {\n      \"value\": \"紫金县\",\n      \"label\": \"紫金县\" },\n    {\n      \"value\": \"龙川县\",\n      \"label\": \"龙川县\" },\n    {\n      \"value\": \"连平县\",\n      \"label\": \"连平县\" },\n    {\n      \"value\": \"和平县\",\n      \"label\": \"和平县\" },\n    {\n      \"value\": \"东源县\",\n      \"label\": \"东源县\" }] },\n\n  {\n    \"value\": \"阳江市\",\n    \"label\": \"阳江市\",\n    \"children\": [{\n      \"value\": \"江城区\",\n      \"label\": \"江城区\" },\n    {\n      \"value\": \"阳东区\",\n      \"label\": \"阳东区\" },\n    {\n      \"value\": \"阳西县\",\n      \"label\": \"阳西县\" },\n    {\n      \"value\": \"阳春市\",\n      \"label\": \"阳春市\" }] },\n\n  {\n    \"value\": \"清远市\",\n    \"label\": \"清远市\",\n    \"children\": [{\n      \"value\": \"清城区\",\n      \"label\": \"清城区\" },\n    {\n      \"value\": \"清新区\",\n      \"label\": \"清新区\" },\n    {\n      \"value\": \"佛冈县\",\n      \"label\": \"佛冈县\" },\n    {\n      \"value\": \"阳山县\",\n      \"label\": \"阳山县\" },\n    {\n      \"value\": \"连山壮族瑶族自治县\",\n      \"label\": \"连山壮族瑶族自治县\" },\n    {\n      \"value\": \"连南瑶族自治县\",\n      \"label\": \"连南瑶族自治县\" },\n    {\n      \"value\": \"英德市\",\n      \"label\": \"英德市\" },\n    {\n      \"value\": \"连州市\",\n      \"label\": \"连州市\" }] },\n\n  {\n    \"value\": \"东莞市\",\n    \"label\": \"东莞市\",\n    \"children\": [{\n      \"value\": \"东城街道\",\n      \"label\": \"东城街道\" },\n    {\n      \"value\": \"南城街道\",\n      \"label\": \"南城街道\" },\n    {\n      \"value\": \"万江街道\",\n      \"label\": \"万江街道\" },\n    {\n      \"value\": \"莞城街道\",\n      \"label\": \"莞城街道\" },\n    {\n      \"value\": \"石碣镇\",\n      \"label\": \"石碣镇\" },\n    {\n      \"value\": \"石龙镇\",\n      \"label\": \"石龙镇\" },\n    {\n      \"value\": \"茶山镇\",\n      \"label\": \"茶山镇\" },\n    {\n      \"value\": \"石排镇\",\n      \"label\": \"石排镇\" },\n    {\n      \"value\": \"企石镇\",\n      \"label\": \"企石镇\" },\n    {\n      \"value\": \"横沥镇\",\n      \"label\": \"横沥镇\" },\n    {\n      \"value\": \"桥头镇\",\n      \"label\": \"桥头镇\" },\n    {\n      \"value\": \"谢岗镇\",\n      \"label\": \"谢岗镇\" },\n    {\n      \"value\": \"东坑镇\",\n      \"label\": \"东坑镇\" },\n    {\n      \"value\": \"常平镇\",\n      \"label\": \"常平镇\" },\n    {\n      \"value\": \"寮步镇\",\n      \"label\": \"寮步镇\" },\n    {\n      \"value\": \"樟木头镇\",\n      \"label\": \"樟木头镇\" },\n    {\n      \"value\": \"大朗镇\",\n      \"label\": \"大朗镇\" },\n    {\n      \"value\": \"黄江镇\",\n      \"label\": \"黄江镇\" },\n    {\n      \"value\": \"清溪镇\",\n      \"label\": \"清溪镇\" },\n    {\n      \"value\": \"塘厦镇\",\n      \"label\": \"塘厦镇\" },\n    {\n      \"value\": \"凤岗镇\",\n      \"label\": \"凤岗镇\" },\n    {\n      \"value\": \"大岭山镇\",\n      \"label\": \"大岭山镇\" },\n    {\n      \"value\": \"长安镇\",\n      \"label\": \"长安镇\" },\n    {\n      \"value\": \"虎门镇\",\n      \"label\": \"虎门镇\" },\n    {\n      \"value\": \"厚街镇\",\n      \"label\": \"厚街镇\" },\n    {\n      \"value\": \"沙田镇\",\n      \"label\": \"沙田镇\" },\n    {\n      \"value\": \"道滘镇\",\n      \"label\": \"道滘镇\" },\n    {\n      \"value\": \"洪梅镇\",\n      \"label\": \"洪梅镇\" },\n    {\n      \"value\": \"麻涌镇\",\n      \"label\": \"麻涌镇\" },\n    {\n      \"value\": \"望牛墩镇\",\n      \"label\": \"望牛墩镇\" },\n    {\n      \"value\": \"中堂镇\",\n      \"label\": \"中堂镇\" },\n    {\n      \"value\": \"高埗镇\",\n      \"label\": \"高埗镇\" },\n    {\n      \"value\": \"松山湖管委会\",\n      \"label\": \"松山湖管委会\" },\n    {\n      \"value\": \"虎门港管委会\",\n      \"label\": \"虎门港管委会\" },\n    {\n      \"value\": \"东莞生态园\",\n      \"label\": \"东莞生态园\" }] },\n\n  {\n    \"value\": \"中山市\",\n    \"label\": \"中山市\",\n    \"children\": [{\n      \"value\": \"石岐区街道\",\n      \"label\": \"石岐区街道\" },\n    {\n      \"value\": \"东区街道\",\n      \"label\": \"东区街道\" },\n    {\n      \"value\": \"火炬开发区街道\",\n      \"label\": \"火炬开发区街道\" },\n    {\n      \"value\": \"西区街道\",\n      \"label\": \"西区街道\" },\n    {\n      \"value\": \"南区街道\",\n      \"label\": \"南区街道\" },\n    {\n      \"value\": \"五桂山街道\",\n      \"label\": \"五桂山街道\" },\n    {\n      \"value\": \"小榄镇\",\n      \"label\": \"小榄镇\" },\n    {\n      \"value\": \"黄圃镇\",\n      \"label\": \"黄圃镇\" },\n    {\n      \"value\": \"民众镇\",\n      \"label\": \"民众镇\" },\n    {\n      \"value\": \"东凤镇\",\n      \"label\": \"东凤镇\" },\n    {\n      \"value\": \"东升镇\",\n      \"label\": \"东升镇\" },\n    {\n      \"value\": \"古镇镇\",\n      \"label\": \"古镇镇\" },\n    {\n      \"value\": \"沙溪镇\",\n      \"label\": \"沙溪镇\" },\n    {\n      \"value\": \"坦洲镇\",\n      \"label\": \"坦洲镇\" },\n    {\n      \"value\": \"港口镇\",\n      \"label\": \"港口镇\" },\n    {\n      \"value\": \"三角镇\",\n      \"label\": \"三角镇\" },\n    {\n      \"value\": \"横栏镇\",\n      \"label\": \"横栏镇\" },\n    {\n      \"value\": \"南头镇\",\n      \"label\": \"南头镇\" },\n    {\n      \"value\": \"阜沙镇\",\n      \"label\": \"阜沙镇\" },\n    {\n      \"value\": \"南朗镇\",\n      \"label\": \"南朗镇\" },\n    {\n      \"value\": \"三乡镇\",\n      \"label\": \"三乡镇\" },\n    {\n      \"value\": \"板芙镇\",\n      \"label\": \"板芙镇\" },\n    {\n      \"value\": \"大涌镇\",\n      \"label\": \"大涌镇\" },\n    {\n      \"value\": \"神湾镇\",\n      \"label\": \"神湾镇\" }] },\n\n  {\n    \"value\": \"潮州市\",\n    \"label\": \"潮州市\",\n    \"children\": [{\n      \"value\": \"湘桥区\",\n      \"label\": \"湘桥区\" },\n    {\n      \"value\": \"潮安区\",\n      \"label\": \"潮安区\" },\n    {\n      \"value\": \"饶平县\",\n      \"label\": \"饶平县\" }] },\n\n  {\n    \"value\": \"揭阳市\",\n    \"label\": \"揭阳市\",\n    \"children\": [{\n      \"value\": \"榕城区\",\n      \"label\": \"榕城区\" },\n    {\n      \"value\": \"揭东区\",\n      \"label\": \"揭东区\" },\n    {\n      \"value\": \"揭西县\",\n      \"label\": \"揭西县\" },\n    {\n      \"value\": \"惠来县\",\n      \"label\": \"惠来县\" },\n    {\n      \"value\": \"普宁市\",\n      \"label\": \"普宁市\" }] },\n\n  {\n    \"value\": \"云浮市\",\n    \"label\": \"云浮市\",\n    \"children\": [{\n      \"value\": \"云城区\",\n      \"label\": \"云城区\" },\n    {\n      \"value\": \"云安区\",\n      \"label\": \"云安区\" },\n    {\n      \"value\": \"新兴县\",\n      \"label\": \"新兴县\" },\n    {\n      \"value\": \"郁南县\",\n      \"label\": \"郁南县\" },\n    {\n      \"value\": \"罗定市\",\n      \"label\": \"罗定市\" }] }] },\n\n\n{\n  \"value\": \"广西壮族自治区\",\n  \"label\": \"广西壮族自治区\",\n  \"children\": [{\n    \"value\": \"南宁市\",\n    \"label\": \"南宁市\",\n    \"children\": [{\n      \"value\": \"兴宁区\",\n      \"label\": \"兴宁区\" },\n    {\n      \"value\": \"青秀区\",\n      \"label\": \"青秀区\" },\n    {\n      \"value\": \"江南区\",\n      \"label\": \"江南区\" },\n    {\n      \"value\": \"西乡塘区\",\n      \"label\": \"西乡塘区\" },\n    {\n      \"value\": \"良庆区\",\n      \"label\": \"良庆区\" },\n    {\n      \"value\": \"邕宁区\",\n      \"label\": \"邕宁区\" },\n    {\n      \"value\": \"武鸣区\",\n      \"label\": \"武鸣区\" },\n    {\n      \"value\": \"隆安县\",\n      \"label\": \"隆安县\" },\n    {\n      \"value\": \"马山县\",\n      \"label\": \"马山县\" },\n    {\n      \"value\": \"上林县\",\n      \"label\": \"上林县\" },\n    {\n      \"value\": \"宾阳县\",\n      \"label\": \"宾阳县\" },\n    {\n      \"value\": \"横县\",\n      \"label\": \"横县\" }] },\n\n  {\n    \"value\": \"柳州市\",\n    \"label\": \"柳州市\",\n    \"children\": [{\n      \"value\": \"城中区\",\n      \"label\": \"城中区\" },\n    {\n      \"value\": \"鱼峰区\",\n      \"label\": \"鱼峰区\" },\n    {\n      \"value\": \"柳南区\",\n      \"label\": \"柳南区\" },\n    {\n      \"value\": \"柳北区\",\n      \"label\": \"柳北区\" },\n    {\n      \"value\": \"柳江区\",\n      \"label\": \"柳江区\" },\n    {\n      \"value\": \"柳城县\",\n      \"label\": \"柳城县\" },\n    {\n      \"value\": \"鹿寨县\",\n      \"label\": \"鹿寨县\" },\n    {\n      \"value\": \"融安县\",\n      \"label\": \"融安县\" },\n    {\n      \"value\": \"融水苗族自治县\",\n      \"label\": \"融水苗族自治县\" },\n    {\n      \"value\": \"三江侗族自治县\",\n      \"label\": \"三江侗族自治县\" }] },\n\n  {\n    \"value\": \"桂林市\",\n    \"label\": \"桂林市\",\n    \"children\": [{\n      \"value\": \"秀峰区\",\n      \"label\": \"秀峰区\" },\n    {\n      \"value\": \"叠彩区\",\n      \"label\": \"叠彩区\" },\n    {\n      \"value\": \"象山区\",\n      \"label\": \"象山区\" },\n    {\n      \"value\": \"七星区\",\n      \"label\": \"七星区\" },\n    {\n      \"value\": \"雁山区\",\n      \"label\": \"雁山区\" },\n    {\n      \"value\": \"临桂区\",\n      \"label\": \"临桂区\" },\n    {\n      \"value\": \"阳朔县\",\n      \"label\": \"阳朔县\" },\n    {\n      \"value\": \"灵川县\",\n      \"label\": \"灵川县\" },\n    {\n      \"value\": \"全州县\",\n      \"label\": \"全州县\" },\n    {\n      \"value\": \"兴安县\",\n      \"label\": \"兴安县\" },\n    {\n      \"value\": \"永福县\",\n      \"label\": \"永福县\" },\n    {\n      \"value\": \"灌阳县\",\n      \"label\": \"灌阳县\" },\n    {\n      \"value\": \"龙胜各族自治县\",\n      \"label\": \"龙胜各族自治县\" },\n    {\n      \"value\": \"资源县\",\n      \"label\": \"资源县\" },\n    {\n      \"value\": \"平乐县\",\n      \"label\": \"平乐县\" },\n    {\n      \"value\": \"荔浦县\",\n      \"label\": \"荔浦县\" },\n    {\n      \"value\": \"恭城瑶族自治县\",\n      \"label\": \"恭城瑶族自治县\" }] },\n\n  {\n    \"value\": \"梧州市\",\n    \"label\": \"梧州市\",\n    \"children\": [{\n      \"value\": \"万秀区\",\n      \"label\": \"万秀区\" },\n    {\n      \"value\": \"长洲区\",\n      \"label\": \"长洲区\" },\n    {\n      \"value\": \"龙圩区\",\n      \"label\": \"龙圩区\" },\n    {\n      \"value\": \"苍梧县\",\n      \"label\": \"苍梧县\" },\n    {\n      \"value\": \"藤县\",\n      \"label\": \"藤县\" },\n    {\n      \"value\": \"蒙山县\",\n      \"label\": \"蒙山县\" },\n    {\n      \"value\": \"岑溪市\",\n      \"label\": \"岑溪市\" }] },\n\n  {\n    \"value\": \"北海市\",\n    \"label\": \"北海市\",\n    \"children\": [{\n      \"value\": \"海城区\",\n      \"label\": \"海城区\" },\n    {\n      \"value\": \"银海区\",\n      \"label\": \"银海区\" },\n    {\n      \"value\": \"铁山港区\",\n      \"label\": \"铁山港区\" },\n    {\n      \"value\": \"合浦县\",\n      \"label\": \"合浦县\" }] },\n\n  {\n    \"value\": \"防城港市\",\n    \"label\": \"防城港市\",\n    \"children\": [{\n      \"value\": \"港口区\",\n      \"label\": \"港口区\" },\n    {\n      \"value\": \"防城区\",\n      \"label\": \"防城区\" },\n    {\n      \"value\": \"上思县\",\n      \"label\": \"上思县\" },\n    {\n      \"value\": \"东兴市\",\n      \"label\": \"东兴市\" }] },\n\n  {\n    \"value\": \"钦州市\",\n    \"label\": \"钦州市\",\n    \"children\": [{\n      \"value\": \"钦南区\",\n      \"label\": \"钦南区\" },\n    {\n      \"value\": \"钦北区\",\n      \"label\": \"钦北区\" },\n    {\n      \"value\": \"灵山县\",\n      \"label\": \"灵山县\" },\n    {\n      \"value\": \"浦北县\",\n      \"label\": \"浦北县\" }] },\n\n  {\n    \"value\": \"贵港市\",\n    \"label\": \"贵港市\",\n    \"children\": [{\n      \"value\": \"港北区\",\n      \"label\": \"港北区\" },\n    {\n      \"value\": \"港南区\",\n      \"label\": \"港南区\" },\n    {\n      \"value\": \"覃塘区\",\n      \"label\": \"覃塘区\" },\n    {\n      \"value\": \"平南县\",\n      \"label\": \"平南县\" },\n    {\n      \"value\": \"桂平市\",\n      \"label\": \"桂平市\" }] },\n\n  {\n    \"value\": \"玉林市\",\n    \"label\": \"玉林市\",\n    \"children\": [{\n      \"value\": \"玉州区\",\n      \"label\": \"玉州区\" },\n    {\n      \"value\": \"福绵区\",\n      \"label\": \"福绵区\" },\n    {\n      \"value\": \"容县\",\n      \"label\": \"容县\" },\n    {\n      \"value\": \"陆川县\",\n      \"label\": \"陆川县\" },\n    {\n      \"value\": \"博白县\",\n      \"label\": \"博白县\" },\n    {\n      \"value\": \"兴业县\",\n      \"label\": \"兴业县\" },\n    {\n      \"value\": \"北流市\",\n      \"label\": \"北流市\" }] },\n\n  {\n    \"value\": \"百色市\",\n    \"label\": \"百色市\",\n    \"children\": [{\n      \"value\": \"右江区\",\n      \"label\": \"右江区\" },\n    {\n      \"value\": \"田阳县\",\n      \"label\": \"田阳县\" },\n    {\n      \"value\": \"田东县\",\n      \"label\": \"田东县\" },\n    {\n      \"value\": \"平果县\",\n      \"label\": \"平果县\" },\n    {\n      \"value\": \"德保县\",\n      \"label\": \"德保县\" },\n    {\n      \"value\": \"那坡县\",\n      \"label\": \"那坡县\" },\n    {\n      \"value\": \"凌云县\",\n      \"label\": \"凌云县\" },\n    {\n      \"value\": \"乐业县\",\n      \"label\": \"乐业县\" },\n    {\n      \"value\": \"田林县\",\n      \"label\": \"田林县\" },\n    {\n      \"value\": \"西林县\",\n      \"label\": \"西林县\" },\n    {\n      \"value\": \"隆林各族自治县\",\n      \"label\": \"隆林各族自治县\" },\n    {\n      \"value\": \"靖西市\",\n      \"label\": \"靖西市\" }] },\n\n  {\n    \"value\": \"贺州市\",\n    \"label\": \"贺州市\",\n    \"children\": [{\n      \"value\": \"八步区\",\n      \"label\": \"八步区\" },\n    {\n      \"value\": \"平桂区\",\n      \"label\": \"平桂区\" },\n    {\n      \"value\": \"昭平县\",\n      \"label\": \"昭平县\" },\n    {\n      \"value\": \"钟山县\",\n      \"label\": \"钟山县\" },\n    {\n      \"value\": \"富川瑶族自治县\",\n      \"label\": \"富川瑶族自治县\" }] },\n\n  {\n    \"value\": \"河池市\",\n    \"label\": \"河池市\",\n    \"children\": [{\n      \"value\": \"金城江区\",\n      \"label\": \"金城江区\" },\n    {\n      \"value\": \"南丹县\",\n      \"label\": \"南丹县\" },\n    {\n      \"value\": \"天峨县\",\n      \"label\": \"天峨县\" },\n    {\n      \"value\": \"凤山县\",\n      \"label\": \"凤山县\" },\n    {\n      \"value\": \"东兰县\",\n      \"label\": \"东兰县\" },\n    {\n      \"value\": \"罗城仫佬族自治县\",\n      \"label\": \"罗城仫佬族自治县\" },\n    {\n      \"value\": \"环江毛南族自治县\",\n      \"label\": \"环江毛南族自治县\" },\n    {\n      \"value\": \"巴马瑶族自治县\",\n      \"label\": \"巴马瑶族自治县\" },\n    {\n      \"value\": \"都安瑶族自治县\",\n      \"label\": \"都安瑶族自治县\" },\n    {\n      \"value\": \"大化瑶族自治县\",\n      \"label\": \"大化瑶族自治县\" },\n    {\n      \"value\": \"宜州市\",\n      \"label\": \"宜州市\" }] },\n\n  {\n    \"value\": \"来宾市\",\n    \"label\": \"来宾市\",\n    \"children\": [{\n      \"value\": \"兴宾区\",\n      \"label\": \"兴宾区\" },\n    {\n      \"value\": \"忻城县\",\n      \"label\": \"忻城县\" },\n    {\n      \"value\": \"象州县\",\n      \"label\": \"象州县\" },\n    {\n      \"value\": \"武宣县\",\n      \"label\": \"武宣县\" },\n    {\n      \"value\": \"金秀瑶族自治县\",\n      \"label\": \"金秀瑶族自治县\" },\n    {\n      \"value\": \"合山市\",\n      \"label\": \"合山市\" }] },\n\n  {\n    \"value\": \"崇左市\",\n    \"label\": \"崇左市\",\n    \"children\": [{\n      \"value\": \"江州区\",\n      \"label\": \"江州区\" },\n    {\n      \"value\": \"扶绥县\",\n      \"label\": \"扶绥县\" },\n    {\n      \"value\": \"宁明县\",\n      \"label\": \"宁明县\" },\n    {\n      \"value\": \"龙州县\",\n      \"label\": \"龙州县\" },\n    {\n      \"value\": \"大新县\",\n      \"label\": \"大新县\" },\n    {\n      \"value\": \"天等县\",\n      \"label\": \"天等县\" },\n    {\n      \"value\": \"凭祥市\",\n      \"label\": \"凭祥市\" }] }] },\n\n\n{\n  \"value\": \"海南省\",\n  \"label\": \"海南省\",\n  \"children\": [{\n    \"value\": \"海口市\",\n    \"label\": \"海口市\",\n    \"children\": [{\n      \"value\": \"秀英区\",\n      \"label\": \"秀英区\" },\n    {\n      \"value\": \"龙华区\",\n      \"label\": \"龙华区\" },\n    {\n      \"value\": \"琼山区\",\n      \"label\": \"琼山区\" },\n    {\n      \"value\": \"美兰区\",\n      \"label\": \"美兰区\" }] },\n\n  {\n    \"value\": \"三亚市\",\n    \"label\": \"三亚市\",\n    \"children\": [{\n      \"value\": \"市辖区\",\n      \"label\": \"市辖区\" },\n    {\n      \"value\": \"海棠区\",\n      \"label\": \"海棠区\" },\n    {\n      \"value\": \"吉阳区\",\n      \"label\": \"吉阳区\" },\n    {\n      \"value\": \"天涯区\",\n      \"label\": \"天涯区\" },\n    {\n      \"value\": \"崖州区\",\n      \"label\": \"崖州区\" }] },\n\n  {\n    \"value\": \"三沙市\",\n    \"label\": \"三沙市\",\n    \"children\": [{\n      \"value\": \"西沙群岛\",\n      \"label\": \"西沙群岛\" },\n    {\n      \"value\": \"南沙群岛\",\n      \"label\": \"南沙群岛\" },\n    {\n      \"value\": \"中沙群岛的岛礁及其海域\",\n      \"label\": \"中沙群岛的岛礁及其海域\" }] },\n\n  {\n    \"value\": \"儋州市\",\n    \"label\": \"儋州市\",\n    \"children\": [{\n      \"value\": \"那大镇\",\n      \"label\": \"那大镇\" },\n    {\n      \"value\": \"和庆镇\",\n      \"label\": \"和庆镇\" },\n    {\n      \"value\": \"南丰镇\",\n      \"label\": \"南丰镇\" },\n    {\n      \"value\": \"大成镇\",\n      \"label\": \"大成镇\" },\n    {\n      \"value\": \"雅星镇\",\n      \"label\": \"雅星镇\" },\n    {\n      \"value\": \"兰洋镇\",\n      \"label\": \"兰洋镇\" },\n    {\n      \"value\": \"光村镇\",\n      \"label\": \"光村镇\" },\n    {\n      \"value\": \"木棠镇\",\n      \"label\": \"木棠镇\" },\n    {\n      \"value\": \"海头镇\",\n      \"label\": \"海头镇\" },\n    {\n      \"value\": \"峨蔓镇\",\n      \"label\": \"峨蔓镇\" },\n    {\n      \"value\": \"三都镇\",\n      \"label\": \"三都镇\" },\n    {\n      \"value\": \"王五镇\",\n      \"label\": \"王五镇\" },\n    {\n      \"value\": \"白马井镇\",\n      \"label\": \"白马井镇\" },\n    {\n      \"value\": \"中和镇\",\n      \"label\": \"中和镇\" },\n    {\n      \"value\": \"排浦镇\",\n      \"label\": \"排浦镇\" },\n    {\n      \"value\": \"东成镇\",\n      \"label\": \"东成镇\" },\n    {\n      \"value\": \"新州镇\",\n      \"label\": \"新州镇\" },\n    {\n      \"value\": \"国营西培农场\",\n      \"label\": \"国营西培农场\" },\n    {\n      \"value\": \"国营西联农场\",\n      \"label\": \"国营西联农场\" },\n    {\n      \"value\": \"国营蓝洋农场\",\n      \"label\": \"国营蓝洋农场\" },\n    {\n      \"value\": \"国营八一农场\",\n      \"label\": \"国营八一农场\" },\n    {\n      \"value\": \"洋浦经济开发区\",\n      \"label\": \"洋浦经济开发区\" },\n    {\n      \"value\": \"华南热作学院\",\n      \"label\": \"华南热作学院\" }] },\n\n  {\n    \"value\": \"省直辖县级行政区划\",\n    \"label\": \"省直辖县级行政区划\",\n    \"children\": [{\n      \"value\": \"五指山市\",\n      \"label\": \"五指山市\" },\n    {\n      \"value\": \"琼海市\",\n      \"label\": \"琼海市\" },\n    {\n      \"value\": \"文昌市\",\n      \"label\": \"文昌市\" },\n    {\n      \"value\": \"万宁市\",\n      \"label\": \"万宁市\" },\n    {\n      \"value\": \"东方市\",\n      \"label\": \"东方市\" },\n    {\n      \"value\": \"定安县\",\n      \"label\": \"定安县\" },\n    {\n      \"value\": \"屯昌县\",\n      \"label\": \"屯昌县\" },\n    {\n      \"value\": \"澄迈县\",\n      \"label\": \"澄迈县\" },\n    {\n      \"value\": \"临高县\",\n      \"label\": \"临高县\" },\n    {\n      \"value\": \"白沙黎族自治县\",\n      \"label\": \"白沙黎族自治县\" },\n    {\n      \"value\": \"昌江黎族自治县\",\n      \"label\": \"昌江黎族自治县\" },\n    {\n      \"value\": \"乐东黎族自治县\",\n      \"label\": \"乐东黎族自治县\" },\n    {\n      \"value\": \"陵水黎族自治县\",\n      \"label\": \"陵水黎族自治县\" },\n    {\n      \"value\": \"保亭黎族苗族自治县\",\n      \"label\": \"保亭黎族苗族自治县\" },\n    {\n      \"value\": \"琼中黎族苗族自治县\",\n      \"label\": \"琼中黎族苗族自治县\" }] }] },\n\n\n{\n  \"value\": \"重庆市\",\n  \"label\": \"重庆市\",\n  \"children\": [{\n    \"value\": \"市辖区\",\n    \"label\": \"市辖区\",\n    \"children\": [{\n      \"value\": \"万州区\",\n      \"label\": \"万州区\" },\n    {\n      \"value\": \"涪陵区\",\n      \"label\": \"涪陵区\" },\n    {\n      \"value\": \"渝中区\",\n      \"label\": \"渝中区\" },\n    {\n      \"value\": \"大渡口区\",\n      \"label\": \"大渡口区\" },\n    {\n      \"value\": \"江北区\",\n      \"label\": \"江北区\" },\n    {\n      \"value\": \"沙坪坝区\",\n      \"label\": \"沙坪坝区\" },\n    {\n      \"value\": \"九龙坡区\",\n      \"label\": \"九龙坡区\" },\n    {\n      \"value\": \"南岸区\",\n      \"label\": \"南岸区\" },\n    {\n      \"value\": \"北碚区\",\n      \"label\": \"北碚区\" },\n    {\n      \"value\": \"綦江区\",\n      \"label\": \"綦江区\" },\n    {\n      \"value\": \"大足区\",\n      \"label\": \"大足区\" },\n    {\n      \"value\": \"渝北区\",\n      \"label\": \"渝北区\" },\n    {\n      \"value\": \"巴南区\",\n      \"label\": \"巴南区\" },\n    {\n      \"value\": \"黔江区\",\n      \"label\": \"黔江区\" },\n    {\n      \"value\": \"长寿区\",\n      \"label\": \"长寿区\" },\n    {\n      \"value\": \"江津区\",\n      \"label\": \"江津区\" },\n    {\n      \"value\": \"合川区\",\n      \"label\": \"合川区\" },\n    {\n      \"value\": \"永川区\",\n      \"label\": \"永川区\" },\n    {\n      \"value\": \"南川区\",\n      \"label\": \"南川区\" },\n    {\n      \"value\": \"璧山区\",\n      \"label\": \"璧山区\" },\n    {\n      \"value\": \"铜梁区\",\n      \"label\": \"铜梁区\" },\n    {\n      \"value\": \"潼南区\",\n      \"label\": \"潼南区\" },\n    {\n      \"value\": \"荣昌区\",\n      \"label\": \"荣昌区\" },\n    {\n      \"value\": \"开州区\",\n      \"label\": \"开州区\" }] },\n\n  {\n    \"value\": \"县\",\n    \"label\": \"县\",\n    \"children\": [{\n      \"value\": \"梁平县\",\n      \"label\": \"梁平县\" },\n    {\n      \"value\": \"城口县\",\n      \"label\": \"城口县\" },\n    {\n      \"value\": \"丰都县\",\n      \"label\": \"丰都县\" },\n    {\n      \"value\": \"垫江县\",\n      \"label\": \"垫江县\" },\n    {\n      \"value\": \"武隆县\",\n      \"label\": \"武隆县\" },\n    {\n      \"value\": \"忠县\",\n      \"label\": \"忠县\" },\n    {\n      \"value\": \"云阳县\",\n      \"label\": \"云阳县\" },\n    {\n      \"value\": \"奉节县\",\n      \"label\": \"奉节县\" },\n    {\n      \"value\": \"巫山县\",\n      \"label\": \"巫山县\" },\n    {\n      \"value\": \"巫溪县\",\n      \"label\": \"巫溪县\" },\n    {\n      \"value\": \"石柱土家族自治县\",\n      \"label\": \"石柱土家族自治县\" },\n    {\n      \"value\": \"秀山土家族苗族自治县\",\n      \"label\": \"秀山土家族苗族自治县\" },\n    {\n      \"value\": \"酉阳土家族苗族自治县\",\n      \"label\": \"酉阳土家族苗族自治县\" },\n    {\n      \"value\": \"彭水苗族土家族自治县\",\n      \"label\": \"彭水苗族土家族自治县\" }] }] },\n\n\n{\n  \"value\": \"四川省\",\n  \"label\": \"四川省\",\n  \"children\": [{\n    \"value\": \"成都市\",\n    \"label\": \"成都市\",\n    \"children\": [{\n      \"value\": \"锦江区\",\n      \"label\": \"锦江区\" },\n    {\n      \"value\": \"青羊区\",\n      \"label\": \"青羊区\" },\n    {\n      \"value\": \"金牛区\",\n      \"label\": \"金牛区\" },\n    {\n      \"value\": \"武侯区\",\n      \"label\": \"武侯区\" },\n    {\n      \"value\": \"成华区\",\n      \"label\": \"成华区\" },\n    {\n      \"value\": \"龙泉驿区\",\n      \"label\": \"龙泉驿区\" },\n    {\n      \"value\": \"青白江区\",\n      \"label\": \"青白江区\" },\n    {\n      \"value\": \"新都区\",\n      \"label\": \"新都区\" },\n    {\n      \"value\": \"温江区\",\n      \"label\": \"温江区\" },\n    {\n      \"value\": \"双流区\",\n      \"label\": \"双流区\" },\n    {\n      \"value\": \"金堂县\",\n      \"label\": \"金堂县\" },\n    {\n      \"value\": \"郫县\",\n      \"label\": \"郫县\" },\n    {\n      \"value\": \"大邑县\",\n      \"label\": \"大邑县\" },\n    {\n      \"value\": \"蒲江县\",\n      \"label\": \"蒲江县\" },\n    {\n      \"value\": \"新津县\",\n      \"label\": \"新津县\" },\n    {\n      \"value\": \"都江堰市\",\n      \"label\": \"都江堰市\" },\n    {\n      \"value\": \"彭州市\",\n      \"label\": \"彭州市\" },\n    {\n      \"value\": \"邛崃市\",\n      \"label\": \"邛崃市\" },\n    {\n      \"value\": \"崇州市\",\n      \"label\": \"崇州市\" },\n    {\n      \"value\": \"简阳市\",\n      \"label\": \"简阳市\" }] },\n\n  {\n    \"value\": \"自贡市\",\n    \"label\": \"自贡市\",\n    \"children\": [{\n      \"value\": \"自流井区\",\n      \"label\": \"自流井区\" },\n    {\n      \"value\": \"贡井区\",\n      \"label\": \"贡井区\" },\n    {\n      \"value\": \"大安区\",\n      \"label\": \"大安区\" },\n    {\n      \"value\": \"沿滩区\",\n      \"label\": \"沿滩区\" },\n    {\n      \"value\": \"荣县\",\n      \"label\": \"荣县\" },\n    {\n      \"value\": \"富顺县\",\n      \"label\": \"富顺县\" }] },\n\n  {\n    \"value\": \"攀枝花市\",\n    \"label\": \"攀枝花市\",\n    \"children\": [{\n      \"value\": \"东区\",\n      \"label\": \"东区\" },\n    {\n      \"value\": \"西区\",\n      \"label\": \"西区\" },\n    {\n      \"value\": \"仁和区\",\n      \"label\": \"仁和区\" },\n    {\n      \"value\": \"米易县\",\n      \"label\": \"米易县\" },\n    {\n      \"value\": \"盐边县\",\n      \"label\": \"盐边县\" }] },\n\n  {\n    \"value\": \"泸州市\",\n    \"label\": \"泸州市\",\n    \"children\": [{\n      \"value\": \"江阳区\",\n      \"label\": \"江阳区\" },\n    {\n      \"value\": \"纳溪区\",\n      \"label\": \"纳溪区\" },\n    {\n      \"value\": \"龙马潭区\",\n      \"label\": \"龙马潭区\" },\n    {\n      \"value\": \"泸县\",\n      \"label\": \"泸县\" },\n    {\n      \"value\": \"合江县\",\n      \"label\": \"合江县\" },\n    {\n      \"value\": \"叙永县\",\n      \"label\": \"叙永县\" },\n    {\n      \"value\": \"古蔺县\",\n      \"label\": \"古蔺县\" }] },\n\n  {\n    \"value\": \"德阳市\",\n    \"label\": \"德阳市\",\n    \"children\": [{\n      \"value\": \"旌阳区\",\n      \"label\": \"旌阳区\" },\n    {\n      \"value\": \"中江县\",\n      \"label\": \"中江县\" },\n    {\n      \"value\": \"罗江县\",\n      \"label\": \"罗江县\" },\n    {\n      \"value\": \"广汉市\",\n      \"label\": \"广汉市\" },\n    {\n      \"value\": \"什邡市\",\n      \"label\": \"什邡市\" },\n    {\n      \"value\": \"绵竹市\",\n      \"label\": \"绵竹市\" }] },\n\n  {\n    \"value\": \"绵阳市\",\n    \"label\": \"绵阳市\",\n    \"children\": [{\n      \"value\": \"涪城区\",\n      \"label\": \"涪城区\" },\n    {\n      \"value\": \"游仙区\",\n      \"label\": \"游仙区\" },\n    {\n      \"value\": \"安州区\",\n      \"label\": \"安州区\" },\n    {\n      \"value\": \"三台县\",\n      \"label\": \"三台县\" },\n    {\n      \"value\": \"盐亭县\",\n      \"label\": \"盐亭县\" },\n    {\n      \"value\": \"梓潼县\",\n      \"label\": \"梓潼县\" },\n    {\n      \"value\": \"北川羌族自治县\",\n      \"label\": \"北川羌族自治县\" },\n    {\n      \"value\": \"平武县\",\n      \"label\": \"平武县\" },\n    {\n      \"value\": \"江油市\",\n      \"label\": \"江油市\" }] },\n\n  {\n    \"value\": \"广元市\",\n    \"label\": \"广元市\",\n    \"children\": [{\n      \"value\": \"利州区\",\n      \"label\": \"利州区\" },\n    {\n      \"value\": \"昭化区\",\n      \"label\": \"昭化区\" },\n    {\n      \"value\": \"朝天区\",\n      \"label\": \"朝天区\" },\n    {\n      \"value\": \"旺苍县\",\n      \"label\": \"旺苍县\" },\n    {\n      \"value\": \"青川县\",\n      \"label\": \"青川县\" },\n    {\n      \"value\": \"剑阁县\",\n      \"label\": \"剑阁县\" },\n    {\n      \"value\": \"苍溪县\",\n      \"label\": \"苍溪县\" }] },\n\n  {\n    \"value\": \"遂宁市\",\n    \"label\": \"遂宁市\",\n    \"children\": [{\n      \"value\": \"船山区\",\n      \"label\": \"船山区\" },\n    {\n      \"value\": \"安居区\",\n      \"label\": \"安居区\" },\n    {\n      \"value\": \"蓬溪县\",\n      \"label\": \"蓬溪县\" },\n    {\n      \"value\": \"射洪县\",\n      \"label\": \"射洪县\" },\n    {\n      \"value\": \"大英县\",\n      \"label\": \"大英县\" }] },\n\n  {\n    \"value\": \"内江市\",\n    \"label\": \"内江市\",\n    \"children\": [{\n      \"value\": \"市中区\",\n      \"label\": \"市中区\" },\n    {\n      \"value\": \"东兴区\",\n      \"label\": \"东兴区\" },\n    {\n      \"value\": \"威远县\",\n      \"label\": \"威远县\" },\n    {\n      \"value\": \"资中县\",\n      \"label\": \"资中县\" },\n    {\n      \"value\": \"隆昌县\",\n      \"label\": \"隆昌县\" }] },\n\n  {\n    \"value\": \"乐山市\",\n    \"label\": \"乐山市\",\n    \"children\": [{\n      \"value\": \"市中区\",\n      \"label\": \"市中区\" },\n    {\n      \"value\": \"沙湾区\",\n      \"label\": \"沙湾区\" },\n    {\n      \"value\": \"五通桥区\",\n      \"label\": \"五通桥区\" },\n    {\n      \"value\": \"金口河区\",\n      \"label\": \"金口河区\" },\n    {\n      \"value\": \"犍为县\",\n      \"label\": \"犍为县\" },\n    {\n      \"value\": \"井研县\",\n      \"label\": \"井研县\" },\n    {\n      \"value\": \"夹江县\",\n      \"label\": \"夹江县\" },\n    {\n      \"value\": \"沐川县\",\n      \"label\": \"沐川县\" },\n    {\n      \"value\": \"峨边彝族自治县\",\n      \"label\": \"峨边彝族自治县\" },\n    {\n      \"value\": \"马边彝族自治县\",\n      \"label\": \"马边彝族自治县\" },\n    {\n      \"value\": \"峨眉山市\",\n      \"label\": \"峨眉山市\" }] },\n\n  {\n    \"value\": \"南充市\",\n    \"label\": \"南充市\",\n    \"children\": [{\n      \"value\": \"顺庆区\",\n      \"label\": \"顺庆区\" },\n    {\n      \"value\": \"高坪区\",\n      \"label\": \"高坪区\" },\n    {\n      \"value\": \"嘉陵区\",\n      \"label\": \"嘉陵区\" },\n    {\n      \"value\": \"南部县\",\n      \"label\": \"南部县\" },\n    {\n      \"value\": \"营山县\",\n      \"label\": \"营山县\" },\n    {\n      \"value\": \"蓬安县\",\n      \"label\": \"蓬安县\" },\n    {\n      \"value\": \"仪陇县\",\n      \"label\": \"仪陇县\" },\n    {\n      \"value\": \"西充县\",\n      \"label\": \"西充县\" },\n    {\n      \"value\": \"阆中市\",\n      \"label\": \"阆中市\" }] },\n\n  {\n    \"value\": \"眉山市\",\n    \"label\": \"眉山市\",\n    \"children\": [{\n      \"value\": \"东坡区\",\n      \"label\": \"东坡区\" },\n    {\n      \"value\": \"彭山区\",\n      \"label\": \"彭山区\" },\n    {\n      \"value\": \"仁寿县\",\n      \"label\": \"仁寿县\" },\n    {\n      \"value\": \"洪雅县\",\n      \"label\": \"洪雅县\" },\n    {\n      \"value\": \"丹棱县\",\n      \"label\": \"丹棱县\" },\n    {\n      \"value\": \"青神县\",\n      \"label\": \"青神县\" }] },\n\n  {\n    \"value\": \"宜宾市\",\n    \"label\": \"宜宾市\",\n    \"children\": [{\n      \"value\": \"翠屏区\",\n      \"label\": \"翠屏区\" },\n    {\n      \"value\": \"南溪区\",\n      \"label\": \"南溪区\" },\n    {\n      \"value\": \"宜宾县\",\n      \"label\": \"宜宾县\" },\n    {\n      \"value\": \"江安县\",\n      \"label\": \"江安县\" },\n    {\n      \"value\": \"长宁县\",\n      \"label\": \"长宁县\" },\n    {\n      \"value\": \"高县\",\n      \"label\": \"高县\" },\n    {\n      \"value\": \"珙县\",\n      \"label\": \"珙县\" },\n    {\n      \"value\": \"筠连县\",\n      \"label\": \"筠连县\" },\n    {\n      \"value\": \"兴文县\",\n      \"label\": \"兴文县\" },\n    {\n      \"value\": \"屏山县\",\n      \"label\": \"屏山县\" }] },\n\n  {\n    \"value\": \"广安市\",\n    \"label\": \"广安市\",\n    \"children\": [{\n      \"value\": \"广安区\",\n      \"label\": \"广安区\" },\n    {\n      \"value\": \"前锋区\",\n      \"label\": \"前锋区\" },\n    {\n      \"value\": \"岳池县\",\n      \"label\": \"岳池县\" },\n    {\n      \"value\": \"武胜县\",\n      \"label\": \"武胜县\" },\n    {\n      \"value\": \"邻水县\",\n      \"label\": \"邻水县\" },\n    {\n      \"value\": \"华蓥市\",\n      \"label\": \"华蓥市\" }] },\n\n  {\n    \"value\": \"达州市\",\n    \"label\": \"达州市\",\n    \"children\": [{\n      \"value\": \"通川区\",\n      \"label\": \"通川区\" },\n    {\n      \"value\": \"达川区\",\n      \"label\": \"达川区\" },\n    {\n      \"value\": \"宣汉县\",\n      \"label\": \"宣汉县\" },\n    {\n      \"value\": \"开江县\",\n      \"label\": \"开江县\" },\n    {\n      \"value\": \"大竹县\",\n      \"label\": \"大竹县\" },\n    {\n      \"value\": \"渠县\",\n      \"label\": \"渠县\" },\n    {\n      \"value\": \"万源市\",\n      \"label\": \"万源市\" }] },\n\n  {\n    \"value\": \"雅安市\",\n    \"label\": \"雅安市\",\n    \"children\": [{\n      \"value\": \"雨城区\",\n      \"label\": \"雨城区\" },\n    {\n      \"value\": \"名山区\",\n      \"label\": \"名山区\" },\n    {\n      \"value\": \"荥经县\",\n      \"label\": \"荥经县\" },\n    {\n      \"value\": \"汉源县\",\n      \"label\": \"汉源县\" },\n    {\n      \"value\": \"石棉县\",\n      \"label\": \"石棉县\" },\n    {\n      \"value\": \"天全县\",\n      \"label\": \"天全县\" },\n    {\n      \"value\": \"芦山县\",\n      \"label\": \"芦山县\" },\n    {\n      \"value\": \"宝兴县\",\n      \"label\": \"宝兴县\" }] },\n\n  {\n    \"value\": \"巴中市\",\n    \"label\": \"巴中市\",\n    \"children\": [{\n      \"value\": \"巴州区\",\n      \"label\": \"巴州区\" },\n    {\n      \"value\": \"恩阳区\",\n      \"label\": \"恩阳区\" },\n    {\n      \"value\": \"通江县\",\n      \"label\": \"通江县\" },\n    {\n      \"value\": \"南江县\",\n      \"label\": \"南江县\" },\n    {\n      \"value\": \"平昌县\",\n      \"label\": \"平昌县\" }] },\n\n  {\n    \"value\": \"资阳市\",\n    \"label\": \"资阳市\",\n    \"children\": [{\n      \"value\": \"雁江区\",\n      \"label\": \"雁江区\" },\n    {\n      \"value\": \"安岳县\",\n      \"label\": \"安岳县\" },\n    {\n      \"value\": \"乐至县\",\n      \"label\": \"乐至县\" }] },\n\n  {\n    \"value\": \"阿坝藏族羌族自治州\",\n    \"label\": \"阿坝藏族羌族自治州\",\n    \"children\": [{\n      \"value\": \"马尔康市\",\n      \"label\": \"马尔康市\" },\n    {\n      \"value\": \"汶川县\",\n      \"label\": \"汶川县\" },\n    {\n      \"value\": \"理县\",\n      \"label\": \"理县\" },\n    {\n      \"value\": \"茂县\",\n      \"label\": \"茂县\" },\n    {\n      \"value\": \"松潘县\",\n      \"label\": \"松潘县\" },\n    {\n      \"value\": \"九寨沟县\",\n      \"label\": \"九寨沟县\" },\n    {\n      \"value\": \"金川县\",\n      \"label\": \"金川县\" },\n    {\n      \"value\": \"小金县\",\n      \"label\": \"小金县\" },\n    {\n      \"value\": \"黑水县\",\n      \"label\": \"黑水县\" },\n    {\n      \"value\": \"壤塘县\",\n      \"label\": \"壤塘县\" },\n    {\n      \"value\": \"阿坝县\",\n      \"label\": \"阿坝县\" },\n    {\n      \"value\": \"若尔盖县\",\n      \"label\": \"若尔盖县\" },\n    {\n      \"value\": \"红原县\",\n      \"label\": \"红原县\" }] },\n\n  {\n    \"value\": \"甘孜藏族自治州\",\n    \"label\": \"甘孜藏族自治州\",\n    \"children\": [{\n      \"value\": \"康定市\",\n      \"label\": \"康定市\" },\n    {\n      \"value\": \"泸定县\",\n      \"label\": \"泸定县\" },\n    {\n      \"value\": \"丹巴县\",\n      \"label\": \"丹巴县\" },\n    {\n      \"value\": \"九龙县\",\n      \"label\": \"九龙县\" },\n    {\n      \"value\": \"雅江县\",\n      \"label\": \"雅江县\" },\n    {\n      \"value\": \"道孚县\",\n      \"label\": \"道孚县\" },\n    {\n      \"value\": \"炉霍县\",\n      \"label\": \"炉霍县\" },\n    {\n      \"value\": \"甘孜县\",\n      \"label\": \"甘孜县\" },\n    {\n      \"value\": \"新龙县\",\n      \"label\": \"新龙县\" },\n    {\n      \"value\": \"德格县\",\n      \"label\": \"德格县\" },\n    {\n      \"value\": \"白玉县\",\n      \"label\": \"白玉县\" },\n    {\n      \"value\": \"石渠县\",\n      \"label\": \"石渠县\" },\n    {\n      \"value\": \"色达县\",\n      \"label\": \"色达县\" },\n    {\n      \"value\": \"理塘县\",\n      \"label\": \"理塘县\" },\n    {\n      \"value\": \"巴塘县\",\n      \"label\": \"巴塘县\" },\n    {\n      \"value\": \"乡城县\",\n      \"label\": \"乡城县\" },\n    {\n      \"value\": \"稻城县\",\n      \"label\": \"稻城县\" },\n    {\n      \"value\": \"得荣县\",\n      \"label\": \"得荣县\" }] },\n\n  {\n    \"value\": \"凉山彝族自治州\",\n    \"label\": \"凉山彝族自治州\",\n    \"children\": [{\n      \"value\": \"西昌市\",\n      \"label\": \"西昌市\" },\n    {\n      \"value\": \"木里藏族自治县\",\n      \"label\": \"木里藏族自治县\" },\n    {\n      \"value\": \"盐源县\",\n      \"label\": \"盐源县\" },\n    {\n      \"value\": \"德昌县\",\n      \"label\": \"德昌县\" },\n    {\n      \"value\": \"会理县\",\n      \"label\": \"会理县\" },\n    {\n      \"value\": \"会东县\",\n      \"label\": \"会东县\" },\n    {\n      \"value\": \"宁南县\",\n      \"label\": \"宁南县\" },\n    {\n      \"value\": \"普格县\",\n      \"label\": \"普格县\" },\n    {\n      \"value\": \"布拖县\",\n      \"label\": \"布拖县\" },\n    {\n      \"value\": \"金阳县\",\n      \"label\": \"金阳县\" },\n    {\n      \"value\": \"昭觉县\",\n      \"label\": \"昭觉县\" },\n    {\n      \"value\": \"喜德县\",\n      \"label\": \"喜德县\" },\n    {\n      \"value\": \"冕宁县\",\n      \"label\": \"冕宁县\" },\n    {\n      \"value\": \"越西县\",\n      \"label\": \"越西县\" },\n    {\n      \"value\": \"甘洛县\",\n      \"label\": \"甘洛县\" },\n    {\n      \"value\": \"美姑县\",\n      \"label\": \"美姑县\" },\n    {\n      \"value\": \"雷波县\",\n      \"label\": \"雷波县\" }] }] },\n\n\n{\n  \"value\": \"贵州省\",\n  \"label\": \"贵州省\",\n  \"children\": [{\n    \"value\": \"贵阳市\",\n    \"label\": \"贵阳市\",\n    \"children\": [{\n      \"value\": \"南明区\",\n      \"label\": \"南明区\" },\n    {\n      \"value\": \"云岩区\",\n      \"label\": \"云岩区\" },\n    {\n      \"value\": \"花溪区\",\n      \"label\": \"花溪区\" },\n    {\n      \"value\": \"乌当区\",\n      \"label\": \"乌当区\" },\n    {\n      \"value\": \"白云区\",\n      \"label\": \"白云区\" },\n    {\n      \"value\": \"观山湖区\",\n      \"label\": \"观山湖区\" },\n    {\n      \"value\": \"开阳县\",\n      \"label\": \"开阳县\" },\n    {\n      \"value\": \"息烽县\",\n      \"label\": \"息烽县\" },\n    {\n      \"value\": \"修文县\",\n      \"label\": \"修文县\" },\n    {\n      \"value\": \"清镇市\",\n      \"label\": \"清镇市\" }] },\n\n  {\n    \"value\": \"六盘水市\",\n    \"label\": \"六盘水市\",\n    \"children\": [{\n      \"value\": \"钟山区\",\n      \"label\": \"钟山区\" },\n    {\n      \"value\": \"六枝特区\",\n      \"label\": \"六枝特区\" },\n    {\n      \"value\": \"水城县\",\n      \"label\": \"水城县\" },\n    {\n      \"value\": \"盘县\",\n      \"label\": \"盘县\" }] },\n\n  {\n    \"value\": \"遵义市\",\n    \"label\": \"遵义市\",\n    \"children\": [{\n      \"value\": \"红花岗区\",\n      \"label\": \"红花岗区\" },\n    {\n      \"value\": \"汇川区\",\n      \"label\": \"汇川区\" },\n    {\n      \"value\": \"播州区\",\n      \"label\": \"播州区\" },\n    {\n      \"value\": \"桐梓县\",\n      \"label\": \"桐梓县\" },\n    {\n      \"value\": \"绥阳县\",\n      \"label\": \"绥阳县\" },\n    {\n      \"value\": \"正安县\",\n      \"label\": \"正安县\" },\n    {\n      \"value\": \"道真仡佬族苗族自治县\",\n      \"label\": \"道真仡佬族苗族自治县\" },\n    {\n      \"value\": \"务川仡佬族苗族自治县\",\n      \"label\": \"务川仡佬族苗族自治县\" },\n    {\n      \"value\": \"凤冈县\",\n      \"label\": \"凤冈县\" },\n    {\n      \"value\": \"湄潭县\",\n      \"label\": \"湄潭县\" },\n    {\n      \"value\": \"余庆县\",\n      \"label\": \"余庆县\" },\n    {\n      \"value\": \"习水县\",\n      \"label\": \"习水县\" },\n    {\n      \"value\": \"赤水市\",\n      \"label\": \"赤水市\" },\n    {\n      \"value\": \"仁怀市\",\n      \"label\": \"仁怀市\" }] },\n\n  {\n    \"value\": \"安顺市\",\n    \"label\": \"安顺市\",\n    \"children\": [{\n      \"value\": \"西秀区\",\n      \"label\": \"西秀区\" },\n    {\n      \"value\": \"平坝区\",\n      \"label\": \"平坝区\" },\n    {\n      \"value\": \"普定县\",\n      \"label\": \"普定县\" },\n    {\n      \"value\": \"镇宁布依族苗族自治县\",\n      \"label\": \"镇宁布依族苗族自治县\" },\n    {\n      \"value\": \"关岭布依族苗族自治县\",\n      \"label\": \"关岭布依族苗族自治县\" },\n    {\n      \"value\": \"紫云苗族布依族自治县\",\n      \"label\": \"紫云苗族布依族自治县\" }] },\n\n  {\n    \"value\": \"毕节市\",\n    \"label\": \"毕节市\",\n    \"children\": [{\n      \"value\": \"七星关区\",\n      \"label\": \"七星关区\" },\n    {\n      \"value\": \"大方县\",\n      \"label\": \"大方县\" },\n    {\n      \"value\": \"黔西县\",\n      \"label\": \"黔西县\" },\n    {\n      \"value\": \"金沙县\",\n      \"label\": \"金沙县\" },\n    {\n      \"value\": \"织金县\",\n      \"label\": \"织金县\" },\n    {\n      \"value\": \"纳雍县\",\n      \"label\": \"纳雍县\" },\n    {\n      \"value\": \"威宁彝族回族苗族自治县\",\n      \"label\": \"威宁彝族回族苗族自治县\" },\n    {\n      \"value\": \"赫章县\",\n      \"label\": \"赫章县\" }] },\n\n  {\n    \"value\": \"铜仁市\",\n    \"label\": \"铜仁市\",\n    \"children\": [{\n      \"value\": \"碧江区\",\n      \"label\": \"碧江区\" },\n    {\n      \"value\": \"万山区\",\n      \"label\": \"万山区\" },\n    {\n      \"value\": \"江口县\",\n      \"label\": \"江口县\" },\n    {\n      \"value\": \"玉屏侗族自治县\",\n      \"label\": \"玉屏侗族自治县\" },\n    {\n      \"value\": \"石阡县\",\n      \"label\": \"石阡县\" },\n    {\n      \"value\": \"思南县\",\n      \"label\": \"思南县\" },\n    {\n      \"value\": \"印江土家族苗族自治县\",\n      \"label\": \"印江土家族苗族自治县\" },\n    {\n      \"value\": \"德江县\",\n      \"label\": \"德江县\" },\n    {\n      \"value\": \"沿河土家族自治县\",\n      \"label\": \"沿河土家族自治县\" },\n    {\n      \"value\": \"松桃苗族自治县\",\n      \"label\": \"松桃苗族自治县\" }] },\n\n  {\n    \"value\": \"黔西南布依族苗族自治州\",\n    \"label\": \"黔西南布依族苗族自治州\",\n    \"children\": [{\n      \"value\": \"兴义市\",\n      \"label\": \"兴义市\" },\n    {\n      \"value\": \"兴仁县\",\n      \"label\": \"兴仁县\" },\n    {\n      \"value\": \"普安县\",\n      \"label\": \"普安县\" },\n    {\n      \"value\": \"晴隆县\",\n      \"label\": \"晴隆县\" },\n    {\n      \"value\": \"贞丰县\",\n      \"label\": \"贞丰县\" },\n    {\n      \"value\": \"望谟县\",\n      \"label\": \"望谟县\" },\n    {\n      \"value\": \"册亨县\",\n      \"label\": \"册亨县\" },\n    {\n      \"value\": \"安龙县\",\n      \"label\": \"安龙县\" }] },\n\n  {\n    \"value\": \"黔东南苗族侗族自治州\",\n    \"label\": \"黔东南苗族侗族自治州\",\n    \"children\": [{\n      \"value\": \"凯里市\",\n      \"label\": \"凯里市\" },\n    {\n      \"value\": \"黄平县\",\n      \"label\": \"黄平县\" },\n    {\n      \"value\": \"施秉县\",\n      \"label\": \"施秉县\" },\n    {\n      \"value\": \"三穗县\",\n      \"label\": \"三穗县\" },\n    {\n      \"value\": \"镇远县\",\n      \"label\": \"镇远县\" },\n    {\n      \"value\": \"岑巩县\",\n      \"label\": \"岑巩县\" },\n    {\n      \"value\": \"天柱县\",\n      \"label\": \"天柱县\" },\n    {\n      \"value\": \"锦屏县\",\n      \"label\": \"锦屏县\" },\n    {\n      \"value\": \"剑河县\",\n      \"label\": \"剑河县\" },\n    {\n      \"value\": \"台江县\",\n      \"label\": \"台江县\" },\n    {\n      \"value\": \"黎平县\",\n      \"label\": \"黎平县\" },\n    {\n      \"value\": \"榕江县\",\n      \"label\": \"榕江县\" },\n    {\n      \"value\": \"从江县\",\n      \"label\": \"从江县\" },\n    {\n      \"value\": \"雷山县\",\n      \"label\": \"雷山县\" },\n    {\n      \"value\": \"麻江县\",\n      \"label\": \"麻江县\" },\n    {\n      \"value\": \"丹寨县\",\n      \"label\": \"丹寨县\" }] },\n\n  {\n    \"value\": \"黔南布依族苗族自治州\",\n    \"label\": \"黔南布依族苗族自治州\",\n    \"children\": [{\n      \"value\": \"都匀市\",\n      \"label\": \"都匀市\" },\n    {\n      \"value\": \"福泉市\",\n      \"label\": \"福泉市\" },\n    {\n      \"value\": \"荔波县\",\n      \"label\": \"荔波县\" },\n    {\n      \"value\": \"贵定县\",\n      \"label\": \"贵定县\" },\n    {\n      \"value\": \"瓮安县\",\n      \"label\": \"瓮安县\" },\n    {\n      \"value\": \"独山县\",\n      \"label\": \"独山县\" },\n    {\n      \"value\": \"平塘县\",\n      \"label\": \"平塘县\" },\n    {\n      \"value\": \"罗甸县\",\n      \"label\": \"罗甸县\" },\n    {\n      \"value\": \"长顺县\",\n      \"label\": \"长顺县\" },\n    {\n      \"value\": \"龙里县\",\n      \"label\": \"龙里县\" },\n    {\n      \"value\": \"惠水县\",\n      \"label\": \"惠水县\" },\n    {\n      \"value\": \"三都水族自治县\",\n      \"label\": \"三都水族自治县\" }] }] },\n\n\n{\n  \"value\": \"云南省\",\n  \"label\": \"云南省\",\n  \"children\": [{\n    \"value\": \"昆明市\",\n    \"label\": \"昆明市\",\n    \"children\": [{\n      \"value\": \"五华区\",\n      \"label\": \"五华区\" },\n    {\n      \"value\": \"盘龙区\",\n      \"label\": \"盘龙区\" },\n    {\n      \"value\": \"官渡区\",\n      \"label\": \"官渡区\" },\n    {\n      \"value\": \"西山区\",\n      \"label\": \"西山区\" },\n    {\n      \"value\": \"东川区\",\n      \"label\": \"东川区\" },\n    {\n      \"value\": \"呈贡区\",\n      \"label\": \"呈贡区\" },\n    {\n      \"value\": \"晋宁县\",\n      \"label\": \"晋宁县\" },\n    {\n      \"value\": \"富民县\",\n      \"label\": \"富民县\" },\n    {\n      \"value\": \"宜良县\",\n      \"label\": \"宜良县\" },\n    {\n      \"value\": \"石林彝族自治县\",\n      \"label\": \"石林彝族自治县\" },\n    {\n      \"value\": \"嵩明县\",\n      \"label\": \"嵩明县\" },\n    {\n      \"value\": \"禄劝彝族苗族自治县\",\n      \"label\": \"禄劝彝族苗族自治县\" },\n    {\n      \"value\": \"寻甸回族彝族自治县\",\n      \"label\": \"寻甸回族彝族自治县\" },\n    {\n      \"value\": \"安宁市\",\n      \"label\": \"安宁市\" }] },\n\n  {\n    \"value\": \"曲靖市\",\n    \"label\": \"曲靖市\",\n    \"children\": [{\n      \"value\": \"麒麟区\",\n      \"label\": \"麒麟区\" },\n    {\n      \"value\": \"沾益区\",\n      \"label\": \"沾益区\" },\n    {\n      \"value\": \"马龙县\",\n      \"label\": \"马龙县\" },\n    {\n      \"value\": \"陆良县\",\n      \"label\": \"陆良县\" },\n    {\n      \"value\": \"师宗县\",\n      \"label\": \"师宗县\" },\n    {\n      \"value\": \"罗平县\",\n      \"label\": \"罗平县\" },\n    {\n      \"value\": \"富源县\",\n      \"label\": \"富源县\" },\n    {\n      \"value\": \"会泽县\",\n      \"label\": \"会泽县\" },\n    {\n      \"value\": \"宣威市\",\n      \"label\": \"宣威市\" }] },\n\n  {\n    \"value\": \"玉溪市\",\n    \"label\": \"玉溪市\",\n    \"children\": [{\n      \"value\": \"红塔区\",\n      \"label\": \"红塔区\" },\n    {\n      \"value\": \"江川区\",\n      \"label\": \"江川区\" },\n    {\n      \"value\": \"澄江县\",\n      \"label\": \"澄江县\" },\n    {\n      \"value\": \"通海县\",\n      \"label\": \"通海县\" },\n    {\n      \"value\": \"华宁县\",\n      \"label\": \"华宁县\" },\n    {\n      \"value\": \"易门县\",\n      \"label\": \"易门县\" },\n    {\n      \"value\": \"峨山彝族自治县\",\n      \"label\": \"峨山彝族自治县\" },\n    {\n      \"value\": \"新平彝族傣族自治县\",\n      \"label\": \"新平彝族傣族自治县\" },\n    {\n      \"value\": \"元江哈尼族彝族傣族自治县\",\n      \"label\": \"元江哈尼族彝族傣族自治县\" }] },\n\n  {\n    \"value\": \"保山市\",\n    \"label\": \"保山市\",\n    \"children\": [{\n      \"value\": \"隆阳区\",\n      \"label\": \"隆阳区\" },\n    {\n      \"value\": \"施甸县\",\n      \"label\": \"施甸县\" },\n    {\n      \"value\": \"龙陵县\",\n      \"label\": \"龙陵县\" },\n    {\n      \"value\": \"昌宁县\",\n      \"label\": \"昌宁县\" },\n    {\n      \"value\": \"腾冲市\",\n      \"label\": \"腾冲市\" }] },\n\n  {\n    \"value\": \"昭通市\",\n    \"label\": \"昭通市\",\n    \"children\": [{\n      \"value\": \"昭阳区\",\n      \"label\": \"昭阳区\" },\n    {\n      \"value\": \"鲁甸县\",\n      \"label\": \"鲁甸县\" },\n    {\n      \"value\": \"巧家县\",\n      \"label\": \"巧家县\" },\n    {\n      \"value\": \"盐津县\",\n      \"label\": \"盐津县\" },\n    {\n      \"value\": \"大关县\",\n      \"label\": \"大关县\" },\n    {\n      \"value\": \"永善县\",\n      \"label\": \"永善县\" },\n    {\n      \"value\": \"绥江县\",\n      \"label\": \"绥江县\" },\n    {\n      \"value\": \"镇雄县\",\n      \"label\": \"镇雄县\" },\n    {\n      \"value\": \"彝良县\",\n      \"label\": \"彝良县\" },\n    {\n      \"value\": \"威信县\",\n      \"label\": \"威信县\" },\n    {\n      \"value\": \"水富县\",\n      \"label\": \"水富县\" }] },\n\n  {\n    \"value\": \"丽江市\",\n    \"label\": \"丽江市\",\n    \"children\": [{\n      \"value\": \"古城区\",\n      \"label\": \"古城区\" },\n    {\n      \"value\": \"玉龙纳西族自治县\",\n      \"label\": \"玉龙纳西族自治县\" },\n    {\n      \"value\": \"永胜县\",\n      \"label\": \"永胜县\" },\n    {\n      \"value\": \"华坪县\",\n      \"label\": \"华坪县\" },\n    {\n      \"value\": \"宁蒗彝族自治县\",\n      \"label\": \"宁蒗彝族自治县\" }] },\n\n  {\n    \"value\": \"普洱市\",\n    \"label\": \"普洱市\",\n    \"children\": [{\n      \"value\": \"思茅区\",\n      \"label\": \"思茅区\" },\n    {\n      \"value\": \"宁洱哈尼族彝族自治县\",\n      \"label\": \"宁洱哈尼族彝族自治县\" },\n    {\n      \"value\": \"墨江哈尼族自治县\",\n      \"label\": \"墨江哈尼族自治县\" },\n    {\n      \"value\": \"景东彝族自治县\",\n      \"label\": \"景东彝族自治县\" },\n    {\n      \"value\": \"景谷傣族彝族自治县\",\n      \"label\": \"景谷傣族彝族自治县\" },\n    {\n      \"value\": \"镇沅彝族哈尼族拉祜族自治县\",\n      \"label\": \"镇沅彝族哈尼族拉祜族自治县\" },\n    {\n      \"value\": \"江城哈尼族彝族自治县\",\n      \"label\": \"江城哈尼族彝族自治县\" },\n    {\n      \"value\": \"孟连傣族拉祜族佤族自治县\",\n      \"label\": \"孟连傣族拉祜族佤族自治县\" },\n    {\n      \"value\": \"澜沧拉祜族自治县\",\n      \"label\": \"澜沧拉祜族自治县\" },\n    {\n      \"value\": \"西盟佤族自治县\",\n      \"label\": \"西盟佤族自治县\" }] },\n\n  {\n    \"value\": \"临沧市\",\n    \"label\": \"临沧市\",\n    \"children\": [{\n      \"value\": \"临翔区\",\n      \"label\": \"临翔区\" },\n    {\n      \"value\": \"凤庆县\",\n      \"label\": \"凤庆县\" },\n    {\n      \"value\": \"云县\",\n      \"label\": \"云县\" },\n    {\n      \"value\": \"永德县\",\n      \"label\": \"永德县\" },\n    {\n      \"value\": \"镇康县\",\n      \"label\": \"镇康县\" },\n    {\n      \"value\": \"双江拉祜族佤族布朗族傣族自治县\",\n      \"label\": \"双江拉祜族佤族布朗族傣族自治县\" },\n    {\n      \"value\": \"耿马傣族佤族自治县\",\n      \"label\": \"耿马傣族佤族自治县\" },\n    {\n      \"value\": \"沧源佤族自治县\",\n      \"label\": \"沧源佤族自治县\" }] },\n\n  {\n    \"value\": \"楚雄彝族自治州\",\n    \"label\": \"楚雄彝族自治州\",\n    \"children\": [{\n      \"value\": \"楚雄市\",\n      \"label\": \"楚雄市\" },\n    {\n      \"value\": \"双柏县\",\n      \"label\": \"双柏县\" },\n    {\n      \"value\": \"牟定县\",\n      \"label\": \"牟定县\" },\n    {\n      \"value\": \"南华县\",\n      \"label\": \"南华县\" },\n    {\n      \"value\": \"姚安县\",\n      \"label\": \"姚安县\" },\n    {\n      \"value\": \"大姚县\",\n      \"label\": \"大姚县\" },\n    {\n      \"value\": \"永仁县\",\n      \"label\": \"永仁县\" },\n    {\n      \"value\": \"元谋县\",\n      \"label\": \"元谋县\" },\n    {\n      \"value\": \"武定县\",\n      \"label\": \"武定县\" },\n    {\n      \"value\": \"禄丰县\",\n      \"label\": \"禄丰县\" }] },\n\n  {\n    \"value\": \"红河哈尼族彝族自治州\",\n    \"label\": \"红河哈尼族彝族自治州\",\n    \"children\": [{\n      \"value\": \"个旧市\",\n      \"label\": \"个旧市\" },\n    {\n      \"value\": \"开远市\",\n      \"label\": \"开远市\" },\n    {\n      \"value\": \"蒙自市\",\n      \"label\": \"蒙自市\" },\n    {\n      \"value\": \"弥勒市\",\n      \"label\": \"弥勒市\" },\n    {\n      \"value\": \"屏边苗族自治县\",\n      \"label\": \"屏边苗族自治县\" },\n    {\n      \"value\": \"建水县\",\n      \"label\": \"建水县\" },\n    {\n      \"value\": \"石屏县\",\n      \"label\": \"石屏县\" },\n    {\n      \"value\": \"泸西县\",\n      \"label\": \"泸西县\" },\n    {\n      \"value\": \"元阳县\",\n      \"label\": \"元阳县\" },\n    {\n      \"value\": \"红河县\",\n      \"label\": \"红河县\" },\n    {\n      \"value\": \"金平苗族瑶族傣族自治县\",\n      \"label\": \"金平苗族瑶族傣族自治县\" },\n    {\n      \"value\": \"绿春县\",\n      \"label\": \"绿春县\" },\n    {\n      \"value\": \"河口瑶族自治县\",\n      \"label\": \"河口瑶族自治县\" }] },\n\n  {\n    \"value\": \"文山壮族苗族自治州\",\n    \"label\": \"文山壮族苗族自治州\",\n    \"children\": [{\n      \"value\": \"文山市\",\n      \"label\": \"文山市\" },\n    {\n      \"value\": \"砚山县\",\n      \"label\": \"砚山县\" },\n    {\n      \"value\": \"西畴县\",\n      \"label\": \"西畴县\" },\n    {\n      \"value\": \"麻栗坡县\",\n      \"label\": \"麻栗坡县\" },\n    {\n      \"value\": \"马关县\",\n      \"label\": \"马关县\" },\n    {\n      \"value\": \"丘北县\",\n      \"label\": \"丘北县\" },\n    {\n      \"value\": \"广南县\",\n      \"label\": \"广南县\" },\n    {\n      \"value\": \"富宁县\",\n      \"label\": \"富宁县\" }] },\n\n  {\n    \"value\": \"西双版纳傣族自治州\",\n    \"label\": \"西双版纳傣族自治州\",\n    \"children\": [{\n      \"value\": \"景洪市\",\n      \"label\": \"景洪市\" },\n    {\n      \"value\": \"勐海县\",\n      \"label\": \"勐海县\" },\n    {\n      \"value\": \"勐腊县\",\n      \"label\": \"勐腊县\" }] },\n\n  {\n    \"value\": \"大理白族自治州\",\n    \"label\": \"大理白族自治州\",\n    \"children\": [{\n      \"value\": \"大理市\",\n      \"label\": \"大理市\" },\n    {\n      \"value\": \"漾濞彝族自治县\",\n      \"label\": \"漾濞彝族自治县\" },\n    {\n      \"value\": \"祥云县\",\n      \"label\": \"祥云县\" },\n    {\n      \"value\": \"宾川县\",\n      \"label\": \"宾川县\" },\n    {\n      \"value\": \"弥渡县\",\n      \"label\": \"弥渡县\" },\n    {\n      \"value\": \"南涧彝族自治县\",\n      \"label\": \"南涧彝族自治县\" },\n    {\n      \"value\": \"巍山彝族回族自治县\",\n      \"label\": \"巍山彝族回族自治县\" },\n    {\n      \"value\": \"永平县\",\n      \"label\": \"永平县\" },\n    {\n      \"value\": \"云龙县\",\n      \"label\": \"云龙县\" },\n    {\n      \"value\": \"洱源县\",\n      \"label\": \"洱源县\" },\n    {\n      \"value\": \"剑川县\",\n      \"label\": \"剑川县\" },\n    {\n      \"value\": \"鹤庆县\",\n      \"label\": \"鹤庆县\" }] },\n\n  {\n    \"value\": \"德宏傣族景颇族自治州\",\n    \"label\": \"德宏傣族景颇族自治州\",\n    \"children\": [{\n      \"value\": \"瑞丽市\",\n      \"label\": \"瑞丽市\" },\n    {\n      \"value\": \"芒市\",\n      \"label\": \"芒市\" },\n    {\n      \"value\": \"梁河县\",\n      \"label\": \"梁河县\" },\n    {\n      \"value\": \"盈江县\",\n      \"label\": \"盈江县\" },\n    {\n      \"value\": \"陇川县\",\n      \"label\": \"陇川县\" }] },\n\n  {\n    \"value\": \"怒江傈僳族自治州\",\n    \"label\": \"怒江傈僳族自治州\",\n    \"children\": [{\n      \"value\": \"泸水市\",\n      \"label\": \"泸水市\" },\n    {\n      \"value\": \"福贡县\",\n      \"label\": \"福贡县\" },\n    {\n      \"value\": \"贡山独龙族怒族自治县\",\n      \"label\": \"贡山独龙族怒族自治县\" },\n    {\n      \"value\": \"兰坪白族普米族自治县\",\n      \"label\": \"兰坪白族普米族自治县\" }] },\n\n  {\n    \"value\": \"迪庆藏族自治州\",\n    \"label\": \"迪庆藏族自治州\",\n    \"children\": [{\n      \"value\": \"香格里拉市\",\n      \"label\": \"香格里拉市\" },\n    {\n      \"value\": \"德钦县\",\n      \"label\": \"德钦县\" },\n    {\n      \"value\": \"维西傈僳族自治县\",\n      \"label\": \"维西傈僳族自治县\" }] }] },\n\n\n{\n  \"value\": \"西藏自治区\",\n  \"label\": \"西藏自治区\",\n  \"children\": [{\n    \"value\": \"拉萨市\",\n    \"label\": \"拉萨市\",\n    \"children\": [{\n      \"value\": \"城关区\",\n      \"label\": \"城关区\" },\n    {\n      \"value\": \"堆龙德庆区\",\n      \"label\": \"堆龙德庆区\" },\n    {\n      \"value\": \"林周县\",\n      \"label\": \"林周县\" },\n    {\n      \"value\": \"当雄县\",\n      \"label\": \"当雄县\" },\n    {\n      \"value\": \"尼木县\",\n      \"label\": \"尼木县\" },\n    {\n      \"value\": \"曲水县\",\n      \"label\": \"曲水县\" },\n    {\n      \"value\": \"达孜县\",\n      \"label\": \"达孜县\" },\n    {\n      \"value\": \"墨竹工卡县\",\n      \"label\": \"墨竹工卡县\" }] },\n\n  {\n    \"value\": \"日喀则市\",\n    \"label\": \"日喀则市\",\n    \"children\": [{\n      \"value\": \"桑珠孜区\",\n      \"label\": \"桑珠孜区\" },\n    {\n      \"value\": \"南木林县\",\n      \"label\": \"南木林县\" },\n    {\n      \"value\": \"江孜县\",\n      \"label\": \"江孜县\" },\n    {\n      \"value\": \"定日县\",\n      \"label\": \"定日县\" },\n    {\n      \"value\": \"萨迦县\",\n      \"label\": \"萨迦县\" },\n    {\n      \"value\": \"拉孜县\",\n      \"label\": \"拉孜县\" },\n    {\n      \"value\": \"昂仁县\",\n      \"label\": \"昂仁县\" },\n    {\n      \"value\": \"谢通门县\",\n      \"label\": \"谢通门县\" },\n    {\n      \"value\": \"白朗县\",\n      \"label\": \"白朗县\" },\n    {\n      \"value\": \"仁布县\",\n      \"label\": \"仁布县\" },\n    {\n      \"value\": \"康马县\",\n      \"label\": \"康马县\" },\n    {\n      \"value\": \"定结县\",\n      \"label\": \"定结县\" },\n    {\n      \"value\": \"仲巴县\",\n      \"label\": \"仲巴县\" },\n    {\n      \"value\": \"亚东县\",\n      \"label\": \"亚东县\" },\n    {\n      \"value\": \"吉隆县\",\n      \"label\": \"吉隆县\" },\n    {\n      \"value\": \"聂拉木县\",\n      \"label\": \"聂拉木县\" },\n    {\n      \"value\": \"萨嘎县\",\n      \"label\": \"萨嘎县\" },\n    {\n      \"value\": \"岗巴县\",\n      \"label\": \"岗巴县\" }] },\n\n  {\n    \"value\": \"昌都市\",\n    \"label\": \"昌都市\",\n    \"children\": [{\n      \"value\": \"卡若区\",\n      \"label\": \"卡若区\" },\n    {\n      \"value\": \"江达县\",\n      \"label\": \"江达县\" },\n    {\n      \"value\": \"贡觉县\",\n      \"label\": \"贡觉县\" },\n    {\n      \"value\": \"类乌齐县\",\n      \"label\": \"类乌齐县\" },\n    {\n      \"value\": \"丁青县\",\n      \"label\": \"丁青县\" },\n    {\n      \"value\": \"察雅县\",\n      \"label\": \"察雅县\" },\n    {\n      \"value\": \"八宿县\",\n      \"label\": \"八宿县\" },\n    {\n      \"value\": \"左贡县\",\n      \"label\": \"左贡县\" },\n    {\n      \"value\": \"芒康县\",\n      \"label\": \"芒康县\" },\n    {\n      \"value\": \"洛隆县\",\n      \"label\": \"洛隆县\" },\n    {\n      \"value\": \"边坝县\",\n      \"label\": \"边坝县\" }] },\n\n  {\n    \"value\": \"林芝市\",\n    \"label\": \"林芝市\",\n    \"children\": [{\n      \"value\": \"巴宜区\",\n      \"label\": \"巴宜区\" },\n    {\n      \"value\": \"工布江达县\",\n      \"label\": \"工布江达县\" },\n    {\n      \"value\": \"米林县\",\n      \"label\": \"米林县\" },\n    {\n      \"value\": \"墨脱县\",\n      \"label\": \"墨脱县\" },\n    {\n      \"value\": \"波密县\",\n      \"label\": \"波密县\" },\n    {\n      \"value\": \"察隅县\",\n      \"label\": \"察隅县\" },\n    {\n      \"value\": \"朗县\",\n      \"label\": \"朗县\" }] },\n\n  {\n    \"value\": \"山南市\",\n    \"label\": \"山南市\",\n    \"children\": [{\n      \"value\": \"乃东区\",\n      \"label\": \"乃东区\" },\n    {\n      \"value\": \"扎囊县\",\n      \"label\": \"扎囊县\" },\n    {\n      \"value\": \"贡嘎县\",\n      \"label\": \"贡嘎县\" },\n    {\n      \"value\": \"桑日县\",\n      \"label\": \"桑日县\" },\n    {\n      \"value\": \"琼结县\",\n      \"label\": \"琼结县\" },\n    {\n      \"value\": \"曲松县\",\n      \"label\": \"曲松县\" },\n    {\n      \"value\": \"措美县\",\n      \"label\": \"措美县\" },\n    {\n      \"value\": \"洛扎县\",\n      \"label\": \"洛扎县\" },\n    {\n      \"value\": \"加查县\",\n      \"label\": \"加查县\" },\n    {\n      \"value\": \"隆子县\",\n      \"label\": \"隆子县\" },\n    {\n      \"value\": \"错那县\",\n      \"label\": \"错那县\" },\n    {\n      \"value\": \"浪卡子县\",\n      \"label\": \"浪卡子县\" }] },\n\n  {\n    \"value\": \"那曲地区\",\n    \"label\": \"那曲地区\",\n    \"children\": [{\n      \"value\": \"那曲县\",\n      \"label\": \"那曲县\" },\n    {\n      \"value\": \"嘉黎县\",\n      \"label\": \"嘉黎县\" },\n    {\n      \"value\": \"比如县\",\n      \"label\": \"比如县\" },\n    {\n      \"value\": \"聂荣县\",\n      \"label\": \"聂荣县\" },\n    {\n      \"value\": \"安多县\",\n      \"label\": \"安多县\" },\n    {\n      \"value\": \"申扎县\",\n      \"label\": \"申扎县\" },\n    {\n      \"value\": \"索县\",\n      \"label\": \"索县\" },\n    {\n      \"value\": \"班戈县\",\n      \"label\": \"班戈县\" },\n    {\n      \"value\": \"巴青县\",\n      \"label\": \"巴青县\" },\n    {\n      \"value\": \"尼玛县\",\n      \"label\": \"尼玛县\" },\n    {\n      \"value\": \"双湖县\",\n      \"label\": \"双湖县\" }] },\n\n  {\n    \"value\": \"阿里地区\",\n    \"label\": \"阿里地区\",\n    \"children\": [{\n      \"value\": \"普兰县\",\n      \"label\": \"普兰县\" },\n    {\n      \"value\": \"札达县\",\n      \"label\": \"札达县\" },\n    {\n      \"value\": \"噶尔县\",\n      \"label\": \"噶尔县\" },\n    {\n      \"value\": \"日土县\",\n      \"label\": \"日土县\" },\n    {\n      \"value\": \"革吉县\",\n      \"label\": \"革吉县\" },\n    {\n      \"value\": \"改则县\",\n      \"label\": \"改则县\" },\n    {\n      \"value\": \"措勤县\",\n      \"label\": \"措勤县\" }] }] },\n\n\n{\n  \"value\": \"陕西省\",\n  \"label\": \"陕西省\",\n  \"children\": [{\n    \"value\": \"西安市\",\n    \"label\": \"西安市\",\n    \"children\": [{\n      \"value\": \"新城区\",\n      \"label\": \"新城区\" },\n    {\n      \"value\": \"碑林区\",\n      \"label\": \"碑林区\" },\n    {\n      \"value\": \"莲湖区\",\n      \"label\": \"莲湖区\" },\n    {\n      \"value\": \"灞桥区\",\n      \"label\": \"灞桥区\" },\n    {\n      \"value\": \"未央区\",\n      \"label\": \"未央区\" },\n    {\n      \"value\": \"雁塔区\",\n      \"label\": \"雁塔区\" },\n    {\n      \"value\": \"阎良区\",\n      \"label\": \"阎良区\" },\n    {\n      \"value\": \"临潼区\",\n      \"label\": \"临潼区\" },\n    {\n      \"value\": \"长安区\",\n      \"label\": \"长安区\" },\n    {\n      \"value\": \"高陵区\",\n      \"label\": \"高陵区\" },\n    {\n      \"value\": \"蓝田县\",\n      \"label\": \"蓝田县\" },\n    {\n      \"value\": \"周至县\",\n      \"label\": \"周至县\" },\n    {\n      \"value\": \"户县\",\n      \"label\": \"户县\" }] },\n\n  {\n    \"value\": \"铜川市\",\n    \"label\": \"铜川市\",\n    \"children\": [{\n      \"value\": \"王益区\",\n      \"label\": \"王益区\" },\n    {\n      \"value\": \"印台区\",\n      \"label\": \"印台区\" },\n    {\n      \"value\": \"耀州区\",\n      \"label\": \"耀州区\" },\n    {\n      \"value\": \"宜君县\",\n      \"label\": \"宜君县\" }] },\n\n  {\n    \"value\": \"宝鸡市\",\n    \"label\": \"宝鸡市\",\n    \"children\": [{\n      \"value\": \"渭滨区\",\n      \"label\": \"渭滨区\" },\n    {\n      \"value\": \"金台区\",\n      \"label\": \"金台区\" },\n    {\n      \"value\": \"陈仓区\",\n      \"label\": \"陈仓区\" },\n    {\n      \"value\": \"凤翔县\",\n      \"label\": \"凤翔县\" },\n    {\n      \"value\": \"岐山县\",\n      \"label\": \"岐山县\" },\n    {\n      \"value\": \"扶风县\",\n      \"label\": \"扶风县\" },\n    {\n      \"value\": \"眉县\",\n      \"label\": \"眉县\" },\n    {\n      \"value\": \"陇县\",\n      \"label\": \"陇县\" },\n    {\n      \"value\": \"千阳县\",\n      \"label\": \"千阳县\" },\n    {\n      \"value\": \"麟游县\",\n      \"label\": \"麟游县\" },\n    {\n      \"value\": \"凤县\",\n      \"label\": \"凤县\" },\n    {\n      \"value\": \"太白县\",\n      \"label\": \"太白县\" }] },\n\n  {\n    \"value\": \"咸阳市\",\n    \"label\": \"咸阳市\",\n    \"children\": [{\n      \"value\": \"秦都区\",\n      \"label\": \"秦都区\" },\n    {\n      \"value\": \"杨陵区\",\n      \"label\": \"杨陵区\" },\n    {\n      \"value\": \"渭城区\",\n      \"label\": \"渭城区\" },\n    {\n      \"value\": \"三原县\",\n      \"label\": \"三原县\" },\n    {\n      \"value\": \"泾阳县\",\n      \"label\": \"泾阳县\" },\n    {\n      \"value\": \"乾县\",\n      \"label\": \"乾县\" },\n    {\n      \"value\": \"礼泉县\",\n      \"label\": \"礼泉县\" },\n    {\n      \"value\": \"永寿县\",\n      \"label\": \"永寿县\" },\n    {\n      \"value\": \"彬县\",\n      \"label\": \"彬县\" },\n    {\n      \"value\": \"长武县\",\n      \"label\": \"长武县\" },\n    {\n      \"value\": \"旬邑县\",\n      \"label\": \"旬邑县\" },\n    {\n      \"value\": \"淳化县\",\n      \"label\": \"淳化县\" },\n    {\n      \"value\": \"武功县\",\n      \"label\": \"武功县\" },\n    {\n      \"value\": \"兴平市\",\n      \"label\": \"兴平市\" }] },\n\n  {\n    \"value\": \"渭南市\",\n    \"label\": \"渭南市\",\n    \"children\": [{\n      \"value\": \"临渭区\",\n      \"label\": \"临渭区\" },\n    {\n      \"value\": \"华州区\",\n      \"label\": \"华州区\" },\n    {\n      \"value\": \"潼关县\",\n      \"label\": \"潼关县\" },\n    {\n      \"value\": \"大荔县\",\n      \"label\": \"大荔县\" },\n    {\n      \"value\": \"合阳县\",\n      \"label\": \"合阳县\" },\n    {\n      \"value\": \"澄城县\",\n      \"label\": \"澄城县\" },\n    {\n      \"value\": \"蒲城县\",\n      \"label\": \"蒲城县\" },\n    {\n      \"value\": \"白水县\",\n      \"label\": \"白水县\" },\n    {\n      \"value\": \"富平县\",\n      \"label\": \"富平县\" },\n    {\n      \"value\": \"韩城市\",\n      \"label\": \"韩城市\" },\n    {\n      \"value\": \"华阴市\",\n      \"label\": \"华阴市\" }] },\n\n  {\n    \"value\": \"延安市\",\n    \"label\": \"延安市\",\n    \"children\": [{\n      \"value\": \"宝塔区\",\n      \"label\": \"宝塔区\" },\n    {\n      \"value\": \"安塞区\",\n      \"label\": \"安塞区\" },\n    {\n      \"value\": \"延长县\",\n      \"label\": \"延长县\" },\n    {\n      \"value\": \"延川县\",\n      \"label\": \"延川县\" },\n    {\n      \"value\": \"子长县\",\n      \"label\": \"子长县\" },\n    {\n      \"value\": \"志丹县\",\n      \"label\": \"志丹县\" },\n    {\n      \"value\": \"吴起县\",\n      \"label\": \"吴起县\" },\n    {\n      \"value\": \"甘泉县\",\n      \"label\": \"甘泉县\" },\n    {\n      \"value\": \"富县\",\n      \"label\": \"富县\" },\n    {\n      \"value\": \"洛川县\",\n      \"label\": \"洛川县\" },\n    {\n      \"value\": \"宜川县\",\n      \"label\": \"宜川县\" },\n    {\n      \"value\": \"黄龙县\",\n      \"label\": \"黄龙县\" },\n    {\n      \"value\": \"黄陵县\",\n      \"label\": \"黄陵县\" }] },\n\n  {\n    \"value\": \"汉中市\",\n    \"label\": \"汉中市\",\n    \"children\": [{\n      \"value\": \"汉台区\",\n      \"label\": \"汉台区\" },\n    {\n      \"value\": \"南郑县\",\n      \"label\": \"南郑县\" },\n    {\n      \"value\": \"城固县\",\n      \"label\": \"城固县\" },\n    {\n      \"value\": \"洋县\",\n      \"label\": \"洋县\" },\n    {\n      \"value\": \"西乡县\",\n      \"label\": \"西乡县\" },\n    {\n      \"value\": \"勉县\",\n      \"label\": \"勉县\" },\n    {\n      \"value\": \"宁强县\",\n      \"label\": \"宁强县\" },\n    {\n      \"value\": \"略阳县\",\n      \"label\": \"略阳县\" },\n    {\n      \"value\": \"镇巴县\",\n      \"label\": \"镇巴县\" },\n    {\n      \"value\": \"留坝县\",\n      \"label\": \"留坝县\" },\n    {\n      \"value\": \"佛坪县\",\n      \"label\": \"佛坪县\" }] },\n\n  {\n    \"value\": \"榆林市\",\n    \"label\": \"榆林市\",\n    \"children\": [{\n      \"value\": \"榆阳区\",\n      \"label\": \"榆阳区\" },\n    {\n      \"value\": \"横山区\",\n      \"label\": \"横山区\" },\n    {\n      \"value\": \"神木县\",\n      \"label\": \"神木县\" },\n    {\n      \"value\": \"府谷县\",\n      \"label\": \"府谷县\" },\n    {\n      \"value\": \"靖边县\",\n      \"label\": \"靖边县\" },\n    {\n      \"value\": \"定边县\",\n      \"label\": \"定边县\" },\n    {\n      \"value\": \"绥德县\",\n      \"label\": \"绥德县\" },\n    {\n      \"value\": \"米脂县\",\n      \"label\": \"米脂县\" },\n    {\n      \"value\": \"佳县\",\n      \"label\": \"佳县\" },\n    {\n      \"value\": \"吴堡县\",\n      \"label\": \"吴堡县\" },\n    {\n      \"value\": \"清涧县\",\n      \"label\": \"清涧县\" },\n    {\n      \"value\": \"子洲县\",\n      \"label\": \"子洲县\" }] },\n\n  {\n    \"value\": \"安康市\",\n    \"label\": \"安康市\",\n    \"children\": [{\n      \"value\": \"汉滨区\",\n      \"label\": \"汉滨区\" },\n    {\n      \"value\": \"汉阴县\",\n      \"label\": \"汉阴县\" },\n    {\n      \"value\": \"石泉县\",\n      \"label\": \"石泉县\" },\n    {\n      \"value\": \"宁陕县\",\n      \"label\": \"宁陕县\" },\n    {\n      \"value\": \"紫阳县\",\n      \"label\": \"紫阳县\" },\n    {\n      \"value\": \"岚皋县\",\n      \"label\": \"岚皋县\" },\n    {\n      \"value\": \"平利县\",\n      \"label\": \"平利县\" },\n    {\n      \"value\": \"镇坪县\",\n      \"label\": \"镇坪县\" },\n    {\n      \"value\": \"旬阳县\",\n      \"label\": \"旬阳县\" },\n    {\n      \"value\": \"白河县\",\n      \"label\": \"白河县\" }] },\n\n  {\n    \"value\": \"商洛市\",\n    \"label\": \"商洛市\",\n    \"children\": [{\n      \"value\": \"商州区\",\n      \"label\": \"商州区\" },\n    {\n      \"value\": \"洛南县\",\n      \"label\": \"洛南县\" },\n    {\n      \"value\": \"丹凤县\",\n      \"label\": \"丹凤县\" },\n    {\n      \"value\": \"商南县\",\n      \"label\": \"商南县\" },\n    {\n      \"value\": \"山阳县\",\n      \"label\": \"山阳县\" },\n    {\n      \"value\": \"镇安县\",\n      \"label\": \"镇安县\" },\n    {\n      \"value\": \"柞水县\",\n      \"label\": \"柞水县\" }] }] },\n\n\n{\n  \"value\": \"甘肃省\",\n  \"label\": \"甘肃省\",\n  \"children\": [{\n    \"value\": \"兰州市\",\n    \"label\": \"兰州市\",\n    \"children\": [{\n      \"value\": \"城关区\",\n      \"label\": \"城关区\" },\n    {\n      \"value\": \"七里河区\",\n      \"label\": \"七里河区\" },\n    {\n      \"value\": \"西固区\",\n      \"label\": \"西固区\" },\n    {\n      \"value\": \"安宁区\",\n      \"label\": \"安宁区\" },\n    {\n      \"value\": \"红古区\",\n      \"label\": \"红古区\" },\n    {\n      \"value\": \"永登县\",\n      \"label\": \"永登县\" },\n    {\n      \"value\": \"皋兰县\",\n      \"label\": \"皋兰县\" },\n    {\n      \"value\": \"榆中县\",\n      \"label\": \"榆中县\" }] },\n\n  {\n    \"value\": \"嘉峪关市\",\n    \"label\": \"嘉峪关市\",\n    \"children\": [{\n      \"value\": \"新城镇\",\n      \"label\": \"新城镇\" },\n    {\n      \"value\": \"峪泉镇\",\n      \"label\": \"峪泉镇\" },\n    {\n      \"value\": \"文殊镇\",\n      \"label\": \"文殊镇\" },\n    {\n      \"value\": \"雄关区\",\n      \"label\": \"雄关区\" },\n    {\n      \"value\": \"镜铁区\",\n      \"label\": \"镜铁区\" },\n    {\n      \"value\": \"长城区\",\n      \"label\": \"长城区\" }] },\n\n  {\n    \"value\": \"金昌市\",\n    \"label\": \"金昌市\",\n    \"children\": [{\n      \"value\": \"金川区\",\n      \"label\": \"金川区\" },\n    {\n      \"value\": \"永昌县\",\n      \"label\": \"永昌县\" }] },\n\n  {\n    \"value\": \"白银市\",\n    \"label\": \"白银市\",\n    \"children\": [{\n      \"value\": \"白银区\",\n      \"label\": \"白银区\" },\n    {\n      \"value\": \"平川区\",\n      \"label\": \"平川区\" },\n    {\n      \"value\": \"靖远县\",\n      \"label\": \"靖远县\" },\n    {\n      \"value\": \"会宁县\",\n      \"label\": \"会宁县\" },\n    {\n      \"value\": \"景泰县\",\n      \"label\": \"景泰县\" }] },\n\n  {\n    \"value\": \"天水市\",\n    \"label\": \"天水市\",\n    \"children\": [{\n      \"value\": \"秦州区\",\n      \"label\": \"秦州区\" },\n    {\n      \"value\": \"麦积区\",\n      \"label\": \"麦积区\" },\n    {\n      \"value\": \"清水县\",\n      \"label\": \"清水县\" },\n    {\n      \"value\": \"秦安县\",\n      \"label\": \"秦安县\" },\n    {\n      \"value\": \"甘谷县\",\n      \"label\": \"甘谷县\" },\n    {\n      \"value\": \"武山县\",\n      \"label\": \"武山县\" },\n    {\n      \"value\": \"张家川回族自治县\",\n      \"label\": \"张家川回族自治县\" }] },\n\n  {\n    \"value\": \"武威市\",\n    \"label\": \"武威市\",\n    \"children\": [{\n      \"value\": \"凉州区\",\n      \"label\": \"凉州区\" },\n    {\n      \"value\": \"民勤县\",\n      \"label\": \"民勤县\" },\n    {\n      \"value\": \"古浪县\",\n      \"label\": \"古浪县\" },\n    {\n      \"value\": \"天祝藏族自治县\",\n      \"label\": \"天祝藏族自治县\" }] },\n\n  {\n    \"value\": \"张掖市\",\n    \"label\": \"张掖市\",\n    \"children\": [{\n      \"value\": \"甘州区\",\n      \"label\": \"甘州区\" },\n    {\n      \"value\": \"肃南裕固族自治县\",\n      \"label\": \"肃南裕固族自治县\" },\n    {\n      \"value\": \"民乐县\",\n      \"label\": \"民乐县\" },\n    {\n      \"value\": \"临泽县\",\n      \"label\": \"临泽县\" },\n    {\n      \"value\": \"高台县\",\n      \"label\": \"高台县\" },\n    {\n      \"value\": \"山丹县\",\n      \"label\": \"山丹县\" }] },\n\n  {\n    \"value\": \"平凉市\",\n    \"label\": \"平凉市\",\n    \"children\": [{\n      \"value\": \"崆峒区\",\n      \"label\": \"崆峒区\" },\n    {\n      \"value\": \"泾川县\",\n      \"label\": \"泾川县\" },\n    {\n      \"value\": \"灵台县\",\n      \"label\": \"灵台县\" },\n    {\n      \"value\": \"崇信县\",\n      \"label\": \"崇信县\" },\n    {\n      \"value\": \"华亭县\",\n      \"label\": \"华亭县\" },\n    {\n      \"value\": \"庄浪县\",\n      \"label\": \"庄浪县\" },\n    {\n      \"value\": \"静宁县\",\n      \"label\": \"静宁县\" }] },\n\n  {\n    \"value\": \"酒泉市\",\n    \"label\": \"酒泉市\",\n    \"children\": [{\n      \"value\": \"肃州区\",\n      \"label\": \"肃州区\" },\n    {\n      \"value\": \"金塔县\",\n      \"label\": \"金塔县\" },\n    {\n      \"value\": \"瓜州县\",\n      \"label\": \"瓜州县\" },\n    {\n      \"value\": \"肃北蒙古族自治县\",\n      \"label\": \"肃北蒙古族自治县\" },\n    {\n      \"value\": \"阿克塞哈萨克族自治县\",\n      \"label\": \"阿克塞哈萨克族自治县\" },\n    {\n      \"value\": \"玉门市\",\n      \"label\": \"玉门市\" },\n    {\n      \"value\": \"敦煌市\",\n      \"label\": \"敦煌市\" }] },\n\n  {\n    \"value\": \"庆阳市\",\n    \"label\": \"庆阳市\",\n    \"children\": [{\n      \"value\": \"西峰区\",\n      \"label\": \"西峰区\" },\n    {\n      \"value\": \"庆城县\",\n      \"label\": \"庆城县\" },\n    {\n      \"value\": \"环县\",\n      \"label\": \"环县\" },\n    {\n      \"value\": \"华池县\",\n      \"label\": \"华池县\" },\n    {\n      \"value\": \"合水县\",\n      \"label\": \"合水县\" },\n    {\n      \"value\": \"正宁县\",\n      \"label\": \"正宁县\" },\n    {\n      \"value\": \"宁县\",\n      \"label\": \"宁县\" },\n    {\n      \"value\": \"镇原县\",\n      \"label\": \"镇原县\" }] },\n\n  {\n    \"value\": \"定西市\",\n    \"label\": \"定西市\",\n    \"children\": [{\n      \"value\": \"安定区\",\n      \"label\": \"安定区\" },\n    {\n      \"value\": \"通渭县\",\n      \"label\": \"通渭县\" },\n    {\n      \"value\": \"陇西县\",\n      \"label\": \"陇西县\" },\n    {\n      \"value\": \"渭源县\",\n      \"label\": \"渭源县\" },\n    {\n      \"value\": \"临洮县\",\n      \"label\": \"临洮县\" },\n    {\n      \"value\": \"漳县\",\n      \"label\": \"漳县\" },\n    {\n      \"value\": \"岷县\",\n      \"label\": \"岷县\" }] },\n\n  {\n    \"value\": \"陇南市\",\n    \"label\": \"陇南市\",\n    \"children\": [{\n      \"value\": \"武都区\",\n      \"label\": \"武都区\" },\n    {\n      \"value\": \"成县\",\n      \"label\": \"成县\" },\n    {\n      \"value\": \"文县\",\n      \"label\": \"文县\" },\n    {\n      \"value\": \"宕昌县\",\n      \"label\": \"宕昌县\" },\n    {\n      \"value\": \"康县\",\n      \"label\": \"康县\" },\n    {\n      \"value\": \"西和县\",\n      \"label\": \"西和县\" },\n    {\n      \"value\": \"礼县\",\n      \"label\": \"礼县\" },\n    {\n      \"value\": \"徽县\",\n      \"label\": \"徽县\" },\n    {\n      \"value\": \"两当县\",\n      \"label\": \"两当县\" }] },\n\n  {\n    \"value\": \"临夏回族自治州\",\n    \"label\": \"临夏回族自治州\",\n    \"children\": [{\n      \"value\": \"临夏市\",\n      \"label\": \"临夏市\" },\n    {\n      \"value\": \"临夏县\",\n      \"label\": \"临夏县\" },\n    {\n      \"value\": \"康乐县\",\n      \"label\": \"康乐县\" },\n    {\n      \"value\": \"永靖县\",\n      \"label\": \"永靖县\" },\n    {\n      \"value\": \"广河县\",\n      \"label\": \"广河县\" },\n    {\n      \"value\": \"和政县\",\n      \"label\": \"和政县\" },\n    {\n      \"value\": \"东乡族自治县\",\n      \"label\": \"东乡族自治县\" },\n    {\n      \"value\": \"积石山保安族东乡族撒拉族自治县\",\n      \"label\": \"积石山保安族东乡族撒拉族自治县\" }] },\n\n  {\n    \"value\": \"甘南藏族自治州\",\n    \"label\": \"甘南藏族自治州\",\n    \"children\": [{\n      \"value\": \"合作市\",\n      \"label\": \"合作市\" },\n    {\n      \"value\": \"临潭县\",\n      \"label\": \"临潭县\" },\n    {\n      \"value\": \"卓尼县\",\n      \"label\": \"卓尼县\" },\n    {\n      \"value\": \"舟曲县\",\n      \"label\": \"舟曲县\" },\n    {\n      \"value\": \"迭部县\",\n      \"label\": \"迭部县\" },\n    {\n      \"value\": \"玛曲县\",\n      \"label\": \"玛曲县\" },\n    {\n      \"value\": \"碌曲县\",\n      \"label\": \"碌曲县\" },\n    {\n      \"value\": \"夏河县\",\n      \"label\": \"夏河县\" }] }] },\n\n\n{\n  \"value\": \"青海省\",\n  \"label\": \"青海省\",\n  \"children\": [{\n    \"value\": \"西宁市\",\n    \"label\": \"西宁市\",\n    \"children\": [{\n      \"value\": \"城东区\",\n      \"label\": \"城东区\" },\n    {\n      \"value\": \"城中区\",\n      \"label\": \"城中区\" },\n    {\n      \"value\": \"城西区\",\n      \"label\": \"城西区\" },\n    {\n      \"value\": \"城北区\",\n      \"label\": \"城北区\" },\n    {\n      \"value\": \"大通回族土族自治县\",\n      \"label\": \"大通回族土族自治县\" },\n    {\n      \"value\": \"湟中县\",\n      \"label\": \"湟中县\" },\n    {\n      \"value\": \"湟源县\",\n      \"label\": \"湟源县\" }] },\n\n  {\n    \"value\": \"海东市\",\n    \"label\": \"海东市\",\n    \"children\": [{\n      \"value\": \"乐都区\",\n      \"label\": \"乐都区\" },\n    {\n      \"value\": \"平安区\",\n      \"label\": \"平安区\" },\n    {\n      \"value\": \"民和回族土族自治县\",\n      \"label\": \"民和回族土族自治县\" },\n    {\n      \"value\": \"互助土族自治县\",\n      \"label\": \"互助土族自治县\" },\n    {\n      \"value\": \"化隆回族自治县\",\n      \"label\": \"化隆回族自治县\" },\n    {\n      \"value\": \"循化撒拉族自治县\",\n      \"label\": \"循化撒拉族自治县\" }] },\n\n  {\n    \"value\": \"海北藏族自治州\",\n    \"label\": \"海北藏族自治州\",\n    \"children\": [{\n      \"value\": \"门源回族自治县\",\n      \"label\": \"门源回族自治县\" },\n    {\n      \"value\": \"祁连县\",\n      \"label\": \"祁连县\" },\n    {\n      \"value\": \"海晏县\",\n      \"label\": \"海晏县\" },\n    {\n      \"value\": \"刚察县\",\n      \"label\": \"刚察县\" }] },\n\n  {\n    \"value\": \"黄南藏族自治州\",\n    \"label\": \"黄南藏族自治州\",\n    \"children\": [{\n      \"value\": \"同仁县\",\n      \"label\": \"同仁县\" },\n    {\n      \"value\": \"尖扎县\",\n      \"label\": \"尖扎县\" },\n    {\n      \"value\": \"泽库县\",\n      \"label\": \"泽库县\" },\n    {\n      \"value\": \"河南蒙古族自治县\",\n      \"label\": \"河南蒙古族自治县\" }] },\n\n  {\n    \"value\": \"海南藏族自治州\",\n    \"label\": \"海南藏族自治州\",\n    \"children\": [{\n      \"value\": \"共和县\",\n      \"label\": \"共和县\" },\n    {\n      \"value\": \"同德县\",\n      \"label\": \"同德县\" },\n    {\n      \"value\": \"贵德县\",\n      \"label\": \"贵德县\" },\n    {\n      \"value\": \"兴海县\",\n      \"label\": \"兴海县\" },\n    {\n      \"value\": \"贵南县\",\n      \"label\": \"贵南县\" }] },\n\n  {\n    \"value\": \"果洛藏族自治州\",\n    \"label\": \"果洛藏族自治州\",\n    \"children\": [{\n      \"value\": \"玛沁县\",\n      \"label\": \"玛沁县\" },\n    {\n      \"value\": \"班玛县\",\n      \"label\": \"班玛县\" },\n    {\n      \"value\": \"甘德县\",\n      \"label\": \"甘德县\" },\n    {\n      \"value\": \"达日县\",\n      \"label\": \"达日县\" },\n    {\n      \"value\": \"久治县\",\n      \"label\": \"久治县\" },\n    {\n      \"value\": \"玛多县\",\n      \"label\": \"玛多县\" }] },\n\n  {\n    \"value\": \"玉树藏族自治州\",\n    \"label\": \"玉树藏族自治州\",\n    \"children\": [{\n      \"value\": \"玉树市\",\n      \"label\": \"玉树市\" },\n    {\n      \"value\": \"杂多县\",\n      \"label\": \"杂多县\" },\n    {\n      \"value\": \"称多县\",\n      \"label\": \"称多县\" },\n    {\n      \"value\": \"治多县\",\n      \"label\": \"治多县\" },\n    {\n      \"value\": \"囊谦县\",\n      \"label\": \"囊谦县\" },\n    {\n      \"value\": \"曲麻莱县\",\n      \"label\": \"曲麻莱县\" }] },\n\n  {\n    \"value\": \"海西蒙古族藏族自治州\",\n    \"label\": \"海西蒙古族藏族自治州\",\n    \"children\": [{\n      \"value\": \"格尔木市\",\n      \"label\": \"格尔木市\" },\n    {\n      \"value\": \"德令哈市\",\n      \"label\": \"德令哈市\" },\n    {\n      \"value\": \"乌兰县\",\n      \"label\": \"乌兰县\" },\n    {\n      \"value\": \"都兰县\",\n      \"label\": \"都兰县\" },\n    {\n      \"value\": \"天峻县\",\n      \"label\": \"天峻县\" }] }] },\n\n\n{\n  \"value\": \"宁夏回族自治区\",\n  \"label\": \"宁夏回族自治区\",\n  \"children\": [{\n    \"value\": \"银川市\",\n    \"label\": \"银川市\",\n    \"children\": [{\n      \"value\": \"兴庆区\",\n      \"label\": \"兴庆区\" },\n    {\n      \"value\": \"西夏区\",\n      \"label\": \"西夏区\" },\n    {\n      \"value\": \"金凤区\",\n      \"label\": \"金凤区\" },\n    {\n      \"value\": \"永宁县\",\n      \"label\": \"永宁县\" },\n    {\n      \"value\": \"贺兰县\",\n      \"label\": \"贺兰县\" },\n    {\n      \"value\": \"灵武市\",\n      \"label\": \"灵武市\" }] },\n\n  {\n    \"value\": \"石嘴山市\",\n    \"label\": \"石嘴山市\",\n    \"children\": [{\n      \"value\": \"大武口区\",\n      \"label\": \"大武口区\" },\n    {\n      \"value\": \"惠农区\",\n      \"label\": \"惠农区\" },\n    {\n      \"value\": \"平罗县\",\n      \"label\": \"平罗县\" }] },\n\n  {\n    \"value\": \"吴忠市\",\n    \"label\": \"吴忠市\",\n    \"children\": [{\n      \"value\": \"利通区\",\n      \"label\": \"利通区\" },\n    {\n      \"value\": \"红寺堡区\",\n      \"label\": \"红寺堡区\" },\n    {\n      \"value\": \"盐池县\",\n      \"label\": \"盐池县\" },\n    {\n      \"value\": \"同心县\",\n      \"label\": \"同心县\" },\n    {\n      \"value\": \"青铜峡市\",\n      \"label\": \"青铜峡市\" }] },\n\n  {\n    \"value\": \"固原市\",\n    \"label\": \"固原市\",\n    \"children\": [{\n      \"value\": \"原州区\",\n      \"label\": \"原州区\" },\n    {\n      \"value\": \"西吉县\",\n      \"label\": \"西吉县\" },\n    {\n      \"value\": \"隆德县\",\n      \"label\": \"隆德县\" },\n    {\n      \"value\": \"泾源县\",\n      \"label\": \"泾源县\" },\n    {\n      \"value\": \"彭阳县\",\n      \"label\": \"彭阳县\" }] },\n\n  {\n    \"value\": \"中卫市\",\n    \"label\": \"中卫市\",\n    \"children\": [{\n      \"value\": \"沙坡头区\",\n      \"label\": \"沙坡头区\" },\n    {\n      \"value\": \"中宁县\",\n      \"label\": \"中宁县\" },\n    {\n      \"value\": \"海原县\",\n      \"label\": \"海原县\" }] }] },\n\n\n{\n  \"value\": \"新疆维吾尔自治区\",\n  \"label\": \"新疆维吾尔自治区\",\n  \"children\": [{\n    \"value\": \"乌鲁木齐市\",\n    \"label\": \"乌鲁木齐市\",\n    \"children\": [{\n      \"value\": \"天山区\",\n      \"label\": \"天山区\" },\n    {\n      \"value\": \"沙依巴克区\",\n      \"label\": \"沙依巴克区\" },\n    {\n      \"value\": \"新市区\",\n      \"label\": \"新市区\" },\n    {\n      \"value\": \"水磨沟区\",\n      \"label\": \"水磨沟区\" },\n    {\n      \"value\": \"头屯河区\",\n      \"label\": \"头屯河区\" },\n    {\n      \"value\": \"达坂城区\",\n      \"label\": \"达坂城区\" },\n    {\n      \"value\": \"米东区\",\n      \"label\": \"米东区\" },\n    {\n      \"value\": \"乌鲁木齐县\",\n      \"label\": \"乌鲁木齐县\" }] },\n\n  {\n    \"value\": \"克拉玛依市\",\n    \"label\": \"克拉玛依市\",\n    \"children\": [{\n      \"value\": \"独山子区\",\n      \"label\": \"独山子区\" },\n    {\n      \"value\": \"克拉玛依区\",\n      \"label\": \"克拉玛依区\" },\n    {\n      \"value\": \"白碱滩区\",\n      \"label\": \"白碱滩区\" },\n    {\n      \"value\": \"乌尔禾区\",\n      \"label\": \"乌尔禾区\" }] },\n\n  {\n    \"value\": \"吐鲁番市\",\n    \"label\": \"吐鲁番市\",\n    \"children\": [{\n      \"value\": \"高昌区\",\n      \"label\": \"高昌区\" },\n    {\n      \"value\": \"鄯善县\",\n      \"label\": \"鄯善县\" },\n    {\n      \"value\": \"托克逊县\",\n      \"label\": \"托克逊县\" }] },\n\n  {\n    \"value\": \"哈密市\",\n    \"label\": \"哈密市\",\n    \"children\": [{\n      \"value\": \"伊州区\",\n      \"label\": \"伊州区\" },\n    {\n      \"value\": \"巴里坤哈萨克自治县\",\n      \"label\": \"巴里坤哈萨克自治县\" },\n    {\n      \"value\": \"伊吾县\",\n      \"label\": \"伊吾县\" }] },\n\n  {\n    \"value\": \"昌吉回族自治州\",\n    \"label\": \"昌吉回族自治州\",\n    \"children\": [{\n      \"value\": \"昌吉市\",\n      \"label\": \"昌吉市\" },\n    {\n      \"value\": \"阜康市\",\n      \"label\": \"阜康市\" },\n    {\n      \"value\": \"呼图壁县\",\n      \"label\": \"呼图壁县\" },\n    {\n      \"value\": \"玛纳斯县\",\n      \"label\": \"玛纳斯县\" },\n    {\n      \"value\": \"奇台县\",\n      \"label\": \"奇台县\" },\n    {\n      \"value\": \"吉木萨尔县\",\n      \"label\": \"吉木萨尔县\" },\n    {\n      \"value\": \"木垒哈萨克自治县\",\n      \"label\": \"木垒哈萨克自治县\" }] },\n\n  {\n    \"value\": \"博尔塔拉蒙古自治州\",\n    \"label\": \"博尔塔拉蒙古自治州\",\n    \"children\": [{\n      \"value\": \"博乐市\",\n      \"label\": \"博乐市\" },\n    {\n      \"value\": \"阿拉山口市\",\n      \"label\": \"阿拉山口市\" },\n    {\n      \"value\": \"精河县\",\n      \"label\": \"精河县\" },\n    {\n      \"value\": \"温泉县\",\n      \"label\": \"温泉县\" }] },\n\n  {\n    \"value\": \"巴音郭楞蒙古自治州\",\n    \"label\": \"巴音郭楞蒙古自治州\",\n    \"children\": [{\n      \"value\": \"库尔勒市\",\n      \"label\": \"库尔勒市\" },\n    {\n      \"value\": \"轮台县\",\n      \"label\": \"轮台县\" },\n    {\n      \"value\": \"尉犁县\",\n      \"label\": \"尉犁县\" },\n    {\n      \"value\": \"若羌县\",\n      \"label\": \"若羌县\" },\n    {\n      \"value\": \"且末县\",\n      \"label\": \"且末县\" },\n    {\n      \"value\": \"焉耆回族自治县\",\n      \"label\": \"焉耆回族自治县\" },\n    {\n      \"value\": \"和静县\",\n      \"label\": \"和静县\" },\n    {\n      \"value\": \"和硕县\",\n      \"label\": \"和硕县\" },\n    {\n      \"value\": \"博湖县\",\n      \"label\": \"博湖县\" }] },\n\n  {\n    \"value\": \"阿克苏地区\",\n    \"label\": \"阿克苏地区\",\n    \"children\": [{\n      \"value\": \"阿克苏市\",\n      \"label\": \"阿克苏市\" },\n    {\n      \"value\": \"温宿县\",\n      \"label\": \"温宿县\" },\n    {\n      \"value\": \"库车县\",\n      \"label\": \"库车县\" },\n    {\n      \"value\": \"沙雅县\",\n      \"label\": \"沙雅县\" },\n    {\n      \"value\": \"新和县\",\n      \"label\": \"新和县\" },\n    {\n      \"value\": \"拜城县\",\n      \"label\": \"拜城县\" },\n    {\n      \"value\": \"乌什县\",\n      \"label\": \"乌什县\" },\n    {\n      \"value\": \"阿瓦提县\",\n      \"label\": \"阿瓦提县\" },\n    {\n      \"value\": \"柯坪县\",\n      \"label\": \"柯坪县\" }] },\n\n  {\n    \"value\": \"克孜勒苏柯尔克孜自治州\",\n    \"label\": \"克孜勒苏柯尔克孜自治州\",\n    \"children\": [{\n      \"value\": \"阿图什市\",\n      \"label\": \"阿图什市\" },\n    {\n      \"value\": \"阿克陶县\",\n      \"label\": \"阿克陶县\" },\n    {\n      \"value\": \"阿合奇县\",\n      \"label\": \"阿合奇县\" },\n    {\n      \"value\": \"乌恰县\",\n      \"label\": \"乌恰县\" }] },\n\n  {\n    \"value\": \"喀什地区\",\n    \"label\": \"喀什地区\",\n    \"children\": [{\n      \"value\": \"喀什市\",\n      \"label\": \"喀什市\" },\n    {\n      \"value\": \"疏附县\",\n      \"label\": \"疏附县\" },\n    {\n      \"value\": \"疏勒县\",\n      \"label\": \"疏勒县\" },\n    {\n      \"value\": \"英吉沙县\",\n      \"label\": \"英吉沙县\" },\n    {\n      \"value\": \"泽普县\",\n      \"label\": \"泽普县\" },\n    {\n      \"value\": \"莎车县\",\n      \"label\": \"莎车县\" },\n    {\n      \"value\": \"叶城县\",\n      \"label\": \"叶城县\" },\n    {\n      \"value\": \"麦盖提县\",\n      \"label\": \"麦盖提县\" },\n    {\n      \"value\": \"岳普湖县\",\n      \"label\": \"岳普湖县\" },\n    {\n      \"value\": \"伽师县\",\n      \"label\": \"伽师县\" },\n    {\n      \"value\": \"巴楚县\",\n      \"label\": \"巴楚县\" },\n    {\n      \"value\": \"塔什库尔干塔吉克自治县\",\n      \"label\": \"塔什库尔干塔吉克自治县\" }] },\n\n  {\n    \"value\": \"和田地区\",\n    \"label\": \"和田地区\",\n    \"children\": [{\n      \"value\": \"和田市\",\n      \"label\": \"和田市\" },\n    {\n      \"value\": \"和田县\",\n      \"label\": \"和田县\" },\n    {\n      \"value\": \"墨玉县\",\n      \"label\": \"墨玉县\" },\n    {\n      \"value\": \"皮山县\",\n      \"label\": \"皮山县\" },\n    {\n      \"value\": \"洛浦县\",\n      \"label\": \"洛浦县\" },\n    {\n      \"value\": \"策勒县\",\n      \"label\": \"策勒县\" },\n    {\n      \"value\": \"于田县\",\n      \"label\": \"于田县\" },\n    {\n      \"value\": \"民丰县\",\n      \"label\": \"民丰县\" }] },\n\n  {\n    \"value\": \"伊犁哈萨克自治州\",\n    \"label\": \"伊犁哈萨克自治州\",\n    \"children\": [{\n      \"value\": \"伊宁市\",\n      \"label\": \"伊宁市\" },\n    {\n      \"value\": \"奎屯市\",\n      \"label\": \"奎屯市\" },\n    {\n      \"value\": \"霍尔果斯市\",\n      \"label\": \"霍尔果斯市\" },\n    {\n      \"value\": \"伊宁县\",\n      \"label\": \"伊宁县\" },\n    {\n      \"value\": \"察布查尔锡伯自治县\",\n      \"label\": \"察布查尔锡伯自治县\" },\n    {\n      \"value\": \"霍城县\",\n      \"label\": \"霍城县\" },\n    {\n      \"value\": \"巩留县\",\n      \"label\": \"巩留县\" },\n    {\n      \"value\": \"新源县\",\n      \"label\": \"新源县\" },\n    {\n      \"value\": \"昭苏县\",\n      \"label\": \"昭苏县\" },\n    {\n      \"value\": \"特克斯县\",\n      \"label\": \"特克斯县\" },\n    {\n      \"value\": \"尼勒克县\",\n      \"label\": \"尼勒克县\" }] },\n\n  {\n    \"value\": \"塔城地区\",\n    \"label\": \"塔城地区\",\n    \"children\": [{\n      \"value\": \"塔城市\",\n      \"label\": \"塔城市\" },\n    {\n      \"value\": \"乌苏市\",\n      \"label\": \"乌苏市\" },\n    {\n      \"value\": \"额敏县\",\n      \"label\": \"额敏县\" },\n    {\n      \"value\": \"沙湾县\",\n      \"label\": \"沙湾县\" },\n    {\n      \"value\": \"托里县\",\n      \"label\": \"托里县\" },\n    {\n      \"value\": \"裕民县\",\n      \"label\": \"裕民县\" },\n    {\n      \"value\": \"和布克赛尔蒙古自治县\",\n      \"label\": \"和布克赛尔蒙古自治县\" }] },\n\n  {\n    \"value\": \"阿勒泰地区\",\n    \"label\": \"阿勒泰地区\",\n    \"children\": [{\n      \"value\": \"阿勒泰市\",\n      \"label\": \"阿勒泰市\" },\n    {\n      \"value\": \"布尔津县\",\n      \"label\": \"布尔津县\" },\n    {\n      \"value\": \"富蕴县\",\n      \"label\": \"富蕴县\" },\n    {\n      \"value\": \"福海县\",\n      \"label\": \"福海县\" },\n    {\n      \"value\": \"哈巴河县\",\n      \"label\": \"哈巴河县\" },\n    {\n      \"value\": \"青河县\",\n      \"label\": \"青河县\" },\n    {\n      \"value\": \"吉木乃县\",\n      \"label\": \"吉木乃县\" }] },\n\n  {\n    \"value\": \"自治区直辖县级行政区划\",\n    \"label\": \"自治区直辖县级行政区划\",\n    \"children\": [{\n      \"value\": \"石河子市\",\n      \"label\": \"石河子市\" },\n    {\n      \"value\": \"阿拉尔市\",\n      \"label\": \"阿拉尔市\" },\n    {\n      \"value\": \"图木舒克市\",\n      \"label\": \"图木舒克市\" },\n    {\n      \"value\": \"五家渠市\",\n      \"label\": \"五家渠市\" },\n    {\n      \"value\": \"铁门关市\",\n      \"label\": \"铁门关市\" }] }] }];exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///220\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\r\n    console.error(err);\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope) {\r\n        return this.$scope[method](args)\r\n      }\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 383:
/*!***************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/video-APP/task/pages/components/mescroll-uni/mescroll-uni.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = MeScroll; /* mescroll-uni\r\n                                                                                                        * version 1.1.7\r\n                                                                                                        * 2019-10-15 wenju\r\n                                                                                                        * http://www.mescroll.com\r\n                                                                                                        */\n\nfunction MeScroll(options) {\n  var me = this;\n  me.version = '1.1.7'; // mescroll版本号\n  me.options = options || {}; // 配置\n\n  me.isDownScrolling = false; // 是否在执行下拉刷新的回调\n  me.isUpScrolling = false; // 是否在执行上拉加载的回调\n  var hasDownCallback = me.options.down && me.options.down.callback; // 是否配置了down的callback\n\n  // 初始化下拉刷新\n  me.initDownScroll();\n  // 初始化上拉加载,则初始化\n  me.initUpScroll();\n\n  // 自动加载\n  setTimeout(function () {// 待主线程执行完毕再执行,避免new MeScroll未初始化,在回调获取不到mescroll的实例\n    // 自动触发下拉刷新 (只有配置了down的callback才自动触发下拉刷新)\n    if (me.optDown.use && me.optDown.auto && hasDownCallback) {\n      if (me.optDown.autoShowLoading) {\n        me.triggerDownScroll(); // 显示下拉进度,执行下拉回调\n      } else {\n        me.optDown.callback && me.optDown.callback(me); // 不显示下拉进度,直接执行下拉回调\n      }\n    }\n    // 自动触发上拉加载\n    me.optUp.use && me.optUp.auto && !me.isUpAutoLoad && me.triggerUpScroll();\n  }, 30); // 需让me.optDown.inited和me.optUp.inited先执行\n}\n\n/* 配置参数:下拉刷新 */\nMeScroll.prototype.extendDownScroll = function (optDown) {\n  // 下拉刷新的配置\n  MeScroll.extend(optDown, {\n    use: true, // 是否启用下拉刷新; 默认true\n    auto: true, // 是否在初始化完毕之后自动执行下拉刷新的回调; 默认true\n    autoShowLoading: false, // 如果设置auto=true(在初始化完毕之后自动执行下拉刷新的回调),那么是否显示下拉刷新的进度; 默认false\n    isLock: false, // 是否锁定下拉刷新,默认false;\n    offset: 80, // 在列表顶部,下拉大于80px,松手即可触发下拉刷新的回调\n    startTop: 100, // scroll-view滚动到顶部时,此时的scroll-top不一定为0, 此值用于控制最大的误差\n    fps: 40, // 下拉节流 (值越大每秒刷新频率越高)\n    inOffsetRate: 1, // 在列表顶部,下拉的距离小于offset时,改变下拉区域高度比例;值小于1且越接近0,高度变化越小,表现为越往下越难拉\n    outOffsetRate: 0.2, // 在列表顶部,下拉的距离大于offset时,改变下拉区域高度比例;值小于1且越接近0,高度变化越小,表现为越往下越难拉\n    bottomOffset: 20, // 当手指touchmove位置在距离body底部20px范围内的时候结束上拉刷新,避免Webview嵌套导致touchend事件不执行\n    minAngle: 45, // 向下滑动最少偏移的角度,取值区间  [0,90];默认45度,即向下滑动的角度大于45度则触发下拉;而小于45度,将不触发下拉,避免与左右滑动的轮播等组件冲突;\n    textInOffset: '下拉刷新', // 下拉的距离在offset范围内的提示文本\n    textOutOffset: '释放更新', // 下拉的距离大于offset范围的提示文本\n    textLoading: '加载中 ...', // 加载中的提示文本\n    inited: null, // 下拉刷新初始化完毕的回调\n    inOffset: null, // 下拉的距离进入offset范围内那一刻的回调\n    outOffset: null, // 下拉的距离大于offset那一刻的回调\n    onMoving: null, // 下拉过程中的回调,滑动过程一直在执行; rate下拉区域当前高度与指定距离的比值(inOffset: rate<1; outOffset: rate>=1); downHight当前下拉区域的高度\n    beforeLoading: null, // 准备触发下拉刷新的回调: 如果return true,将不触发showLoading和callback回调; 常用来完全自定义下拉刷新, 参考案例【淘宝 v6.8.0】\n    showLoading: null, // 显示下拉刷新进度的回调\n    afterLoading: null, // 准备结束下拉的回调. 返回结束下拉的延时执行时间,默认0ms; 常用于结束下拉之前再显示另外一小段动画,才去隐藏下拉刷新的场景, 参考案例【dotJump】\n    endDownScroll: null, // 结束下拉刷新的回调\n    callback: function callback(mescroll) {\n      // 下拉刷新的回调;默认重置上拉加载列表为第一页\n      mescroll.resetUpScroll();\n    } });\n\n};\n\n/* 配置参数:上拉加载 */\nMeScroll.prototype.extendUpScroll = function (optUp) {\n  // 上拉加载的配置\n  MeScroll.extend(optUp, {\n    use: true, // 是否启用上拉加载; 默认true\n    auto: true, // 是否在初始化完毕之后自动执行上拉加载的回调; 默认true\n    isLock: false, // 是否锁定上拉加载,默认false;\n    isBoth: true, // 上拉加载时,如果滑动到列表顶部是否可以同时触发下拉刷新;默认true,两者可同时触发;\n    isBounce: false, // 默认禁止橡皮筋的回弹效果, 必读事项: http://www.mescroll.com/qa.html?v=190725#q25\n    callback: null, // 上拉加载的回调;function(page,mescroll){ }\n    page: {\n      num: 0, // 当前页码,默认0,回调之前会加1,即callback(page)会从1开始\n      size: 10, // 每页数据的数量\n      time: null // 加载第一页数据服务器返回的时间; 防止用户翻页时,后台新增了数据从而导致下一页数据重复;\n    },\n    noMoreSize: 5, // 如果列表已无数据,可设置列表的总数量要大于等于5条才显示无更多数据;避免列表数据过少(比如只有一条数据),显示无更多数据会不好看\n    offset: 80, // 距底部多远时,触发upCallback\n    textLoading: '加载中 ...', // 加载中的提示文本\n    textNoMore: '-- END --', // 没有更多数据的提示文本\n    inited: null, // 初始化完毕的回调\n    showLoading: null, // 显示加载中的回调\n    showNoMore: null, // 显示无更多数据的回调\n    hideUpScroll: null, // 隐藏上拉加载的回调\n    toTop: {\n      // 回到顶部按钮,需配置src才显示\n      src: null, // 图片路径,默认null (建议写成网络图,不必考虑相对路径)\n      offset: 1000, // 列表滚动多少距离才显示回到顶部按钮,默认1000\n      duration: 300, // 回到顶部的动画时长,默认300ms\n      btnClick: null, // 点击按钮的回调\n      onShow: null // 是否显示的回调\n    },\n    empty: {\n      use: true, // 是否显示空布局\n      icon: null, // 图标路径\n      tip: '~ 暂无相关数据 ~', // 提示\n      btnText: '', // 按钮\n      btnClick: null, // 点击按钮的回调\n      onShow: null // 是否显示的回调\n    },\n    onScroll: false // 是否监听滚动事件\n  });\n};\n\n/* 配置参数 */\nMeScroll.extend = function (userOption, defaultOption) {\n  if (!userOption) return defaultOption;\n  for (var key in defaultOption) {\n    if (userOption[key] == null) {\n      var def = defaultOption[key];\n      if (def != null && typeof def === 'object') {\n        userOption[key] = MeScroll.extend({}, def); // 深度匹配\n      } else {\n        userOption[key] = def;\n      }\n    } else if (typeof userOption[key] === 'object') {\n      MeScroll.extend(userOption[key], defaultOption[key]); // 深度匹配\n    }\n  }\n  return userOption;\n};\n\n/* -------初始化下拉刷新------- */\nMeScroll.prototype.initDownScroll = function () {\n  var me = this;\n  // 配置参数\n  me.optDown = me.options.down || {};\n  me.extendDownScroll(me.optDown);\n\n  me.downHight = 0; // 下拉区域的高度\n\n  // 在页面中加入下拉布局\n  if (me.optDown.use && me.optDown.inited) {\n    // 初始化完毕的回调\n    setTimeout(function () {// 待主线程执行完毕再执行,避免new MeScroll未初始化,在回调获取不到mescroll的实例\n      me.optDown.inited(me);\n    }, 0);\n  }\n};\n\n/* 列表touchstart事件 */\nMeScroll.prototype.touchstartEvent = function (e) {\n  if (!this.optDown.use) return;\n\n  this.startPoint = this.getPoint(e); // 记录起点\n  this.startTop = this.getScrollTop(); // 记录此时的滚动条位置\n  this.lastPoint = this.startPoint; // 重置上次move的点\n  this.maxTouchmoveY = this.getBodyHeight() - this.optDown.bottomOffset; // 手指触摸的最大范围(写在touchstart避免body获取高度为0的情况)\n  this.inTouchend = false; // 标记不是touchend\n};\n\n/* 列表touchmove事件 */\nMeScroll.prototype.touchmoveEvent = function (e) {\n  if (!this.optDown.use) return;\n  if (!this.startPoint) return;\n  var me = this;\n\n  // 节流\n  var t = new Date().getTime();\n  if (me.moveTime && t - me.moveTime < me.moveTimeDiff) {// 小于节流时间,则不处理\n    return;\n  } else {\n    me.moveTime = t;\n    me.moveTimeDiff = 1000 / me.optDown.fps;\n  }\n\n  var scrollTop = me.getScrollTop(); // 当前滚动条的距离\n  var curPoint = me.getPoint(e); // 当前点\n\n  var moveY = curPoint.y - me.startPoint.y; // 和起点比,移动的距离,大于0向下拉,小于0向上拉\n\n  // (向下拉&&在顶部) scroll-view在滚动时不会触发touchmove,当触顶/底/左/右时,才会触发touchmove\n  // scroll-view滚动到顶部时,scrollTop不一定为0; 在iOS的APP中scrollTop可能为负数,不一定和startTop相等\n  if (moveY > 0 && (scrollTop <= 0 || scrollTop <= me.optDown.startTop && scrollTop === me.startTop)) {\n    // 可下拉的条件\n    if (me.optDown.use && !me.inTouchend && !me.isDownScrolling && !me.optDown.isLock && (!me.isUpScrolling || me.isUpScrolling &&\n    me.optUp.isBoth)) {\n\n      // 下拉的角度是否在配置的范围内\n      var x = Math.abs(me.lastPoint.x - curPoint.x);\n      var y = Math.abs(me.lastPoint.y - curPoint.y);\n      var z = Math.sqrt(x * x + y * y);\n      if (z !== 0) {\n        var angle = Math.asin(y / z) / Math.PI * 180; // 两点之间的角度,区间 [0,90]\n        if (angle < me.optDown.minAngle) return; // 如果小于配置的角度,则不往下执行下拉刷新\n      }\n\n      // 如果手指的位置超过配置的距离,则提前结束下拉,避免Webview嵌套导致touchend无法触发\n      if (me.maxTouchmoveY > 0 && curPoint.y >= me.maxTouchmoveY) {\n        me.inTouchend = true; // 标记执行touchend\n        me.touchendEvent(); // 提前触发touchend\n        return;\n      }\n\n      me.preventDefault(e); // 阻止默认事件\n\n      var diff = curPoint.y - me.lastPoint.y; // 和上次比,移动的距离 (大于0向下,小于0向上)\n\n      // 下拉距离  < 指定距离\n      if (me.downHight < me.optDown.offset) {\n        if (me.movetype !== 1) {\n          me.movetype = 1; // 加入标记,保证只执行一次\n          me.optDown.inOffset && me.optDown.inOffset(me); // 进入指定距离范围内那一刻的回调,只执行一次\n          me.isMoveDown = true; // 标记下拉区域高度改变,在touchend重置回来\n        }\n        me.downHight += diff * me.optDown.inOffsetRate; // 越往下,高度变化越小\n\n        // 指定距离  <= 下拉距离\n      } else {\n        if (me.movetype !== 2) {\n          me.movetype = 2; // 加入标记,保证只执行一次\n          me.optDown.outOffset && me.optDown.outOffset(me); // 下拉超过指定距离那一刻的回调,只执行一次\n          me.isMoveDown = true; // 标记下拉区域高度改变,在touchend重置回来\n        }\n        if (diff > 0) {// 向下拉\n          me.downHight += Math.round(diff * me.optDown.outOffsetRate); // 越往下,高度变化越小\n        } else {// 向上收\n          me.downHight += diff; // 向上收回高度,则向上滑多少收多少高度\n        }\n      }\n\n      var rate = me.downHight / me.optDown.offset; // 下拉区域当前高度与指定距离的比值\n      me.optDown.onMoving && me.optDown.onMoving(me, rate, me.downHight); // 下拉过程中的回调,一直在执行\n    }\n  }\n\n  me.lastPoint = curPoint; // 记录本次移动的点\n};\n\n/* 列表touchend事件 */\nMeScroll.prototype.touchendEvent = function (e) {\n  if (!this.optDown.use) return;\n  // 如果下拉区域高度已改变,则需重置回来\n  if (this.isMoveDown) {\n    if (this.downHight >= this.optDown.offset) {\n      // 符合触发刷新的条件\n      this.triggerDownScroll();\n    } else {\n      // 不符合的话 则重置\n      this.downHight = 0;\n      this.optDown.endDownScroll && this.optDown.endDownScroll(this);\n    }\n    this.movetype = 0;\n    this.isMoveDown = false;\n  } else if (this.getScrollTop() === this.startTop) {// 到顶/左/右/底的滑动事件\n    var isScrollUp = this.getPoint(e).y - this.startPoint.y < 0; // 和起点比,移动的距离,大于0向下拉,小于0向上拉\n    // 上滑 && 检查并触发上拉\n    isScrollUp && this.triggerUpScroll(true);\n  }\n};\n\n/* 根据点击滑动事件获取第一个手指的坐标 */\nMeScroll.prototype.getPoint = function (e) {\n  if (e.touches && e.touches[0]) {\n    return {\n      x: e.touches[0].pageX,\n      y: e.touches[0].pageY };\n\n  } else if (e.changedTouches && e.changedTouches[0]) {\n    return {\n      x: e.changedTouches[0].pageX,\n      y: e.changedTouches[0].pageY };\n\n  } else {\n    return {\n      x: e.clientX,\n      y: e.clientY };\n\n  }\n};\n\n/* 触发下拉刷新 */\nMeScroll.prototype.triggerDownScroll = function () {\n  if (this.optDown.beforeLoading && this.optDown.beforeLoading(this)) {\n    //return true则处于完全自定义状态\n  } else {\n    this.showDownScroll(); // 下拉刷新中...\n    this.optDown.callback && this.optDown.callback(this); // 执行回调,联网加载数据\n  }\n};\n\n/* 显示下拉进度布局 */\nMeScroll.prototype.showDownScroll = function () {\n  this.isDownScrolling = true; // 标记下拉中\n  this.downHight = this.optDown.offset; // 更新下拉区域高度\n  this.optDown.showLoading(this, this.downHight); // 下拉刷新中...\n};\n\n/* 结束下拉刷新 */\nMeScroll.prototype.endDownScroll = function () {\n  var me = this;\n  // 结束下拉刷新的方法\n  var endScroll = function endScroll() {\n    me.downHight = 0;\n    me.isDownScrolling = false;\n    me.optDown.endDownScroll && me.optDown.endDownScroll(me);\n    me.setScrollHeight(0); // 重置滚动区域,使数据不满屏时仍可检查触发翻页\n  };\n  // 结束下拉刷新时的回调\n  var delay = 0;\n  if (me.optDown.afterLoading) delay = me.optDown.afterLoading(me); // 结束下拉刷新的延时,单位ms\n  if (typeof delay === 'number' && delay > 0) {\n    setTimeout(endScroll, delay);\n  } else {\n    endScroll();\n  }\n};\n\n/* 锁定下拉刷新:isLock=ture,null锁定;isLock=false解锁 */\nMeScroll.prototype.lockDownScroll = function (isLock) {\n  if (isLock == null) isLock = true;\n  this.optDown.isLock = isLock;\n};\n\n/* -------初始化上拉加载------- */\nMeScroll.prototype.initUpScroll = function () {\n  var me = this;\n  // 配置参数\n  me.optUp = me.options.up || {\n    use: false };\n\n  me.extendUpScroll(me.optUp);\n\n  if (!me.optUp.isBounce) me.setBounce(false); // 不允许bounce时,需禁止window的touchmove事件\n\n  if (me.optUp.use === false) return; // 配置不使用上拉加载时,则不初始化上拉布局\n  me.optUp.hasNext = true; // 如果使用上拉,则默认有下一页\n  me.startNum = me.optUp.page.num + 1; // 记录page开始的页码\n\n  // 初始化完毕的回调\n  if (me.optUp.inited) {\n    setTimeout(function () {// 待主线程执行完毕再执行,避免new MeScroll未初始化,在回调获取不到mescroll的实例\n      me.optUp.inited(me);\n    }, 0);\n  }\n};\n\n/*列表滚动事件*/\nMeScroll.prototype.scroll = function (e, onScroll) {\n  // 更新滚动条的位置\n  this.setScrollTop(e.scrollTop);\n  // 更新滚动内容高度\n  this.setScrollHeight(e.scrollHeight);\n\n  // 向上滑还是向下滑动\n  if (this.preScrollY == null) this.preScrollY = 0;\n  this.isScrollUp = e.scrollTop - this.preScrollY > 0;\n  this.preScrollY = e.scrollTop;\n\n  // 上滑 && 检查并触发上拉\n  this.isScrollUp && this.triggerUpScroll(true);\n\n  // 顶部按钮的显示隐藏\n  if (e.scrollTop >= this.optUp.toTop.offset) {\n    this.showTopBtn();\n  } else {\n    this.hideTopBtn();\n  }\n\n  // 滑动监听\n  this.optUp.onScroll && onScroll && onScroll();\n};\n\n/* 触发上拉加载 */\nMeScroll.prototype.triggerUpScroll = function (isCheck) {\n  if (!this.isUpScrolling && this.optUp.use && this.optUp.callback) {\n    // 是否校验在底部; 默认不校验\n    if (isCheck === true) {\n      var canUp = false;\n      // 还有下一页 && 没有锁定 && 不在下拉中\n      if (this.optUp.hasNext && !this.optUp.isLock && !this.isDownScrolling) {\n        if (this.getScrollBottom() <= this.optUp.offset) {// 到底部\n          canUp = true; // 标记可上拉\n        }\n      }\n      if (canUp === false) return;\n    }\n    this.showUpScroll(); // 上拉加载中...\n    this.optUp.page.num++; // 预先加一页,如果失败则减回\n    this.isUpAutoLoad = true; // 标记上拉已经自动执行过,避免初始化时多次触发上拉回调\n    this.num = this.optUp.page.num; // 把最新的页数赋值在mescroll上,避免对page的影响\n    this.size = this.optUp.page.size; // 把最新的页码赋值在mescroll上,避免对page的影响\n    this.time = this.optUp.page.time; // 把最新的页码赋值在mescroll上,避免对page的影响\n    this.optUp.callback(this); // 执行回调,联网加载数据\n  }\n};\n\n/* 显示上拉加载中 */\nMeScroll.prototype.showUpScroll = function () {\n  this.isUpScrolling = true; // 标记上拉加载中\n  this.optUp.showLoading && this.optUp.showLoading(this); // 回调\n};\n\n/* 显示上拉无更多数据 */\nMeScroll.prototype.showNoMore = function () {\n  this.optUp.hasNext = false; // 标记无更多数据\n  this.optUp.showNoMore && this.optUp.showNoMore(this); // 回调\n};\n\n/* 隐藏上拉区域**/\nMeScroll.prototype.hideUpScroll = function () {\n  this.optUp.hideUpScroll && this.optUp.hideUpScroll(this); // 回调\n};\n\n/* 结束上拉加载 */\nMeScroll.prototype.endUpScroll = function (isShowNoMore) {\n  if (isShowNoMore != null) {// isShowNoMore=null,不处理下拉状态,下拉刷新的时候调用\n    if (isShowNoMore) {\n      this.showNoMore(); // isShowNoMore=true,显示无更多数据\n    } else {\n      this.hideUpScroll(); // isShowNoMore=false,隐藏上拉加载\n    }\n  }\n  this.isUpScrolling = false; // 标记结束上拉加载\n};\n\n/* 重置上拉加载列表为第一页\r\n    *isShowLoading 是否显示进度布局;\r\n    * 1.默认null,不传参,则显示上拉加载的进度布局\r\n    * 2.传参true, 则显示下拉刷新的进度布局\r\n    * 3.传参false,则不显示上拉和下拉的进度 (常用于静默更新列表数据)\r\n    */\nMeScroll.prototype.resetUpScroll = function (isShowLoading) {\n  if (this.optUp && this.optUp.use) {\n    var page = this.optUp.page;\n    this.prePageNum = page.num; // 缓存重置前的页码,加载失败可退回\n    this.prePageTime = page.time; // 缓存重置前的时间,加载失败可退回\n    page.num = this.startNum; // 重置为第一页\n    page.time = null; // 重置时间为空\n    if (!this.isDownScrolling && isShowLoading !== false) {// 如果不是下拉刷新触发的resetUpScroll并且不配置列表静默更新,则显示进度;\n      if (isShowLoading == null) {\n        this.removeEmpty(); // 移除空布局\n        this.showUpScroll(); // 不传参,默认显示上拉加载的进度布局\n      } else {\n        this.showDownScroll(); // 传true,显示下拉刷新的进度布局,不清空列表\n      }\n    }\n    this.isUpAutoLoad = true; // 标记上拉已经自动执行过,避免初始化时多次触发上拉回调\n    this.num = page.num; // 把最新的页数赋值在mescroll上,避免对page的影响\n    this.size = page.size; // 把最新的页码赋值在mescroll上,避免对page的影响\n    this.time = page.time; // 把最新的页码赋值在mescroll上,避免对page的影响\n    this.optUp.callback && this.optUp.callback(this); // 执行上拉回调\n  }\n};\n\n/* 设置page.num的值 */\nMeScroll.prototype.setPageNum = function (num) {\n  this.optUp.page.num = num - 1;\n};\n\n/* 设置page.size的值 */\nMeScroll.prototype.setPageSize = function (size) {\n  this.optUp.page.size = size;\n};\n\n/* 联网回调成功,结束下拉刷新和上拉加载\r\n    * dataSize: 当前页的数据量(必传)\r\n    * totalPage: 总页数(必传)\r\n    * systime: 服务器时间 (可空)\r\n    */\nMeScroll.prototype.endByPage = function (dataSize, totalPage, systime) {\n  var hasNext;\n  if (this.optUp.use && totalPage != null) hasNext = this.optUp.page.num < totalPage; // 是否还有下一页\n  this.endSuccess(dataSize, hasNext, systime);\n};\n\n/* 联网回调成功,结束下拉刷新和上拉加载\r\n    * dataSize: 当前页的数据量(必传)\r\n    * totalSize: 列表所有数据总数量(必传)\r\n    * systime: 服务器时间 (可空)\r\n    */\nMeScroll.prototype.endBySize = function (dataSize, totalSize, systime) {\n  var hasNext;\n  if (this.optUp.use && totalSize != null) {\n    var loadSize = (this.optUp.page.num - 1) * this.optUp.page.size + dataSize; // 已加载的数据总数\n    hasNext = loadSize < totalSize; // 是否还有下一页\n  }\n  this.endSuccess(dataSize, hasNext, systime);\n};\n\n/* 联网回调成功,结束下拉刷新和上拉加载\r\n    * dataSize: 当前页的数据个数(不是所有页的数据总和),用于上拉加载判断是否还有下一页.如果不传,则会判断还有下一页\r\n    * hasNext: 是否还有下一页,布尔类型;用来解决这个小问题:比如列表共有20条数据,每页加载10条,共2页.如果只根据dataSize判断,则需翻到第三页才会知道无更多数据,如果传了hasNext,则翻到第二页即可显示无更多数据.\r\n    * systime: 服务器时间(可空);用来解决这个小问题:当准备翻下一页时,数据库新增了几条记录,此时翻下一页,前面的几条数据会和上一页的重复;这里传入了systime,那么upCallback的page.time就会有值,把page.time传给服务器,让后台过滤新加入的那几条记录\r\n    */\nMeScroll.prototype.endSuccess = function (dataSize, hasNext, systime) {\n  var me = this;\n  // 结束下拉刷新\n  if (me.isDownScrolling) me.endDownScroll();\n\n  // 结束上拉加载\n  if (me.optUp.use) {\n    var isShowNoMore; // 是否已无更多数据\n    if (dataSize != null) {\n      var pageNum = me.optUp.page.num; // 当前页码\n      var pageSize = me.optUp.page.size; // 每页长度\n      // 如果是第一页\n      if (pageNum === 1) {\n        if (systime) me.optUp.page.time = systime; // 设置加载列表数据第一页的时间\n      }\n      if (dataSize < pageSize || hasNext === false) {\n        // 返回的数据不满一页时,则说明已无更多数据\n        me.optUp.hasNext = false;\n        if (dataSize === 0 && pageNum === 1) {\n          // 如果第一页无任何数据且配置了空布局\n          isShowNoMore = false;\n          me.showEmpty();\n        } else {\n          // 总列表数少于配置的数量,则不显示无更多数据\n          var allDataSize = (pageNum - 1) * pageSize + dataSize;\n          if (allDataSize < me.optUp.noMoreSize) {\n            isShowNoMore = false;\n          } else {\n            isShowNoMore = true;\n          }\n          me.removeEmpty(); // 移除空布局\n        }\n      } else {\n        // 还有下一页\n        isShowNoMore = false;\n        me.optUp.hasNext = true;\n        me.removeEmpty(); // 移除空布局\n      }\n    }\n\n    // 隐藏上拉\n    me.endUpScroll(isShowNoMore);\n  }\n};\n\n/* 回调失败,结束下拉刷新和上拉加载 */\nMeScroll.prototype.endErr = function () {\n  // 结束下拉,回调失败重置回原来的页码和时间\n  if (this.isDownScrolling) {\n    var page = this.optUp.page;\n    if (page && this.prePageNum) {\n      page.num = this.prePageNum;\n      page.time = this.prePageTime;\n    }\n    this.endDownScroll();\n  }\n  // 结束上拉,回调失败重置回原来的页码\n  if (this.isUpScrolling) {\n    this.optUp.page.num--;\n    this.endUpScroll(false);\n  }\n};\n\n/* 显示空布局 */\nMeScroll.prototype.showEmpty = function () {\n  this.optUp.empty.use && this.optUp.empty.onShow && this.optUp.empty.onShow(true);\n};\n\n/* 移除空布局 */\nMeScroll.prototype.removeEmpty = function () {\n  this.optUp.empty.use && this.optUp.empty.onShow && this.optUp.empty.onShow(false);\n};\n\n/* 显示回到顶部的按钮 */\nMeScroll.prototype.showTopBtn = function () {\n  if (!this.topBtnShow) {\n    this.topBtnShow = true;\n    this.optUp.toTop.onShow && this.optUp.toTop.onShow(true);\n  }\n};\n\n/* 隐藏回到顶部的按钮 */\nMeScroll.prototype.hideTopBtn = function () {\n  if (this.topBtnShow) {\n    this.topBtnShow = false;\n    this.optUp.toTop.onShow && this.optUp.toTop.onShow(false);\n  }\n};\n\n/* 获取滚动条的位置 */\nMeScroll.prototype.getScrollTop = function () {\n  return this.scrollTop || 0;\n};\n\n/* 记录滚动条的位置 */\nMeScroll.prototype.setScrollTop = function (y) {\n  this.scrollTop = y;\n};\n\n/* 滚动到指定位置 */\nMeScroll.prototype.scrollTo = function (y, t) {\n  this.myScrollTo && this.myScrollTo(y, t); // scrollview需自定义回到顶部方法\n};\n\n/* 自定义scrollTo */\nMeScroll.prototype.resetScrollTo = function (myScrollTo) {\n  this.myScrollTo = myScrollTo;\n};\n\n/* 滚动条到底部的距离 */\nMeScroll.prototype.getScrollBottom = function () {\n  return this.getScrollHeight() - this.getClientHeight() - this.getScrollTop();\n};\n\n/* 计步器\r\n    star: 开始值\r\n    end: 结束值\r\n    callback(step,timer): 回调step值,计步器timer,可自行通过window.clearInterval(timer)结束计步器;\r\n    t: 计步时长,传0则直接回调end值;不传则默认300ms\r\n    rate: 周期;不传则默认30ms计步一次\r\n    * */\nMeScroll.prototype.getStep = function (star, end, callback, t, rate) {\n  var diff = end - star; // 差值\n  if (t === 0 || diff === 0) {\n    callback && callback(end);\n    return;\n  }\n  t = t || 300; // 时长 300ms\n  rate = rate || 30; // 周期 30ms\n  var count = t / rate; // 次数\n  var step = diff / count; // 步长\n  var i = 0; // 计数\n  var timer = setInterval(function () {\n    if (i < count - 1) {\n      star += step;\n      callback && callback(star, timer);\n      i++;\n    } else {\n      callback && callback(end, timer); // 最后一次直接设置end,避免计算误差\n      clearInterval(timer);\n    }\n  }, rate);\n};\n\n/* 滚动容器的高度 */\nMeScroll.prototype.getClientHeight = function (isReal) {\n  var h = this.clientHeight || 0;\n  if (h === 0 && isReal !== true) {// 未获取到容器的高度,可临时取body的高度 (可能会有误差)\n    h = this.getBodyHeight();\n  }\n  return h;\n};\nMeScroll.prototype.setClientHeight = function (h) {\n  this.clientHeight = h;\n};\n\n/* 滚动内容的高度 */\nMeScroll.prototype.getScrollHeight = function () {\n  return this.scrollHeight || 0;\n};\nMeScroll.prototype.setScrollHeight = function (h) {\n  this.scrollHeight = h;\n};\n\n/* body的高度 */\nMeScroll.prototype.getBodyHeight = function () {\n  return this.bodyHeight || 0;\n};\nMeScroll.prototype.setBodyHeight = function (h) {\n  this.bodyHeight = h;\n};\n\n/* 阻止浏览器默认滚动事件 */\nMeScroll.prototype.preventDefault = function (e) {\n  // 小程序不支持e.preventDefault\n  // app的bounce只能通过配置pages.json的style.app-plus.bounce为\"none\"来禁止\n  // cancelable:是否可以被禁用; defaultPrevented:是否已经被禁用\n  if (e && e.cancelable && !e.defaultPrevented) e.preventDefault();\n};\n\n/* 是否允许下拉回弹(橡皮筋效果); true或null为允许; false禁止bounce */\nMeScroll.prototype.setBounce = function (isBounce) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vcGFnZXMvY29tcG9uZW50cy9tZXNjcm9sbC11bmkvbWVzY3JvbGwtdW5pLmpzIl0sIm5hbWVzIjpbIk1lU2Nyb2xsIiwib3B0aW9ucyIsIm1lIiwidmVyc2lvbiIsImlzRG93blNjcm9sbGluZyIsImlzVXBTY3JvbGxpbmciLCJoYXNEb3duQ2FsbGJhY2siLCJkb3duIiwiY2FsbGJhY2siLCJpbml0RG93blNjcm9sbCIsImluaXRVcFNjcm9sbCIsInNldFRpbWVvdXQiLCJvcHREb3duIiwidXNlIiwiYXV0byIsImF1dG9TaG93TG9hZGluZyIsInRyaWdnZXJEb3duU2Nyb2xsIiwib3B0VXAiLCJpc1VwQXV0b0xvYWQiLCJ0cmlnZ2VyVXBTY3JvbGwiLCJwcm90b3R5cGUiLCJleHRlbmREb3duU2Nyb2xsIiwiZXh0ZW5kIiwiaXNMb2NrIiwib2Zmc2V0Iiwic3RhcnRUb3AiLCJmcHMiLCJpbk9mZnNldFJhdGUiLCJvdXRPZmZzZXRSYXRlIiwiYm90dG9tT2Zmc2V0IiwibWluQW5nbGUiLCJ0ZXh0SW5PZmZzZXQiLCJ0ZXh0T3V0T2Zmc2V0IiwidGV4dExvYWRpbmciLCJpbml0ZWQiLCJpbk9mZnNldCIsIm91dE9mZnNldCIsIm9uTW92aW5nIiwiYmVmb3JlTG9hZGluZyIsInNob3dMb2FkaW5nIiwiYWZ0ZXJMb2FkaW5nIiwiZW5kRG93blNjcm9sbCIsIm1lc2Nyb2xsIiwicmVzZXRVcFNjcm9sbCIsImV4dGVuZFVwU2Nyb2xsIiwiaXNCb3RoIiwiaXNCb3VuY2UiLCJwYWdlIiwibnVtIiwic2l6ZSIsInRpbWUiLCJub01vcmVTaXplIiwidGV4dE5vTW9yZSIsInNob3dOb01vcmUiLCJoaWRlVXBTY3JvbGwiLCJ0b1RvcCIsInNyYyIsImR1cmF0aW9uIiwiYnRuQ2xpY2siLCJvblNob3ciLCJlbXB0eSIsImljb24iLCJ0aXAiLCJidG5UZXh0Iiwib25TY3JvbGwiLCJ1c2VyT3B0aW9uIiwiZGVmYXVsdE9wdGlvbiIsImtleSIsImRlZiIsImRvd25IaWdodCIsInRvdWNoc3RhcnRFdmVudCIsImUiLCJzdGFydFBvaW50IiwiZ2V0UG9pbnQiLCJnZXRTY3JvbGxUb3AiLCJsYXN0UG9pbnQiLCJtYXhUb3VjaG1vdmVZIiwiZ2V0Qm9keUhlaWdodCIsImluVG91Y2hlbmQiLCJ0b3VjaG1vdmVFdmVudCIsInQiLCJEYXRlIiwiZ2V0VGltZSIsIm1vdmVUaW1lIiwibW92ZVRpbWVEaWZmIiwic2Nyb2xsVG9wIiwiY3VyUG9pbnQiLCJtb3ZlWSIsInkiLCJ4IiwiTWF0aCIsImFicyIsInoiLCJzcXJ0IiwiYW5nbGUiLCJhc2luIiwiUEkiLCJ0b3VjaGVuZEV2ZW50IiwicHJldmVudERlZmF1bHQiLCJkaWZmIiwibW92ZXR5cGUiLCJpc01vdmVEb3duIiwicm91bmQiLCJyYXRlIiwiaXNTY3JvbGxVcCIsInRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwiY2hhbmdlZFRvdWNoZXMiLCJjbGllbnRYIiwiY2xpZW50WSIsInNob3dEb3duU2Nyb2xsIiwiZW5kU2Nyb2xsIiwic2V0U2Nyb2xsSGVpZ2h0IiwiZGVsYXkiLCJsb2NrRG93blNjcm9sbCIsInVwIiwic2V0Qm91bmNlIiwiaGFzTmV4dCIsInN0YXJ0TnVtIiwic2Nyb2xsIiwic2V0U2Nyb2xsVG9wIiwic2Nyb2xsSGVpZ2h0IiwicHJlU2Nyb2xsWSIsInNob3dUb3BCdG4iLCJoaWRlVG9wQnRuIiwiaXNDaGVjayIsImNhblVwIiwiZ2V0U2Nyb2xsQm90dG9tIiwic2hvd1VwU2Nyb2xsIiwiZW5kVXBTY3JvbGwiLCJpc1Nob3dOb01vcmUiLCJpc1Nob3dMb2FkaW5nIiwicHJlUGFnZU51bSIsInByZVBhZ2VUaW1lIiwicmVtb3ZlRW1wdHkiLCJzZXRQYWdlTnVtIiwic2V0UGFnZVNpemUiLCJlbmRCeVBhZ2UiLCJkYXRhU2l6ZSIsInRvdGFsUGFnZSIsInN5c3RpbWUiLCJlbmRTdWNjZXNzIiwiZW5kQnlTaXplIiwidG90YWxTaXplIiwibG9hZFNpemUiLCJwYWdlTnVtIiwicGFnZVNpemUiLCJzaG93RW1wdHkiLCJhbGxEYXRhU2l6ZSIsImVuZEVyciIsInRvcEJ0blNob3ciLCJzY3JvbGxUbyIsIm15U2Nyb2xsVG8iLCJyZXNldFNjcm9sbFRvIiwiZ2V0U2Nyb2xsSGVpZ2h0IiwiZ2V0Q2xpZW50SGVpZ2h0IiwiZ2V0U3RlcCIsInN0YXIiLCJlbmQiLCJjb3VudCIsInN0ZXAiLCJpIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJpc1JlYWwiLCJoIiwiY2xpZW50SGVpZ2h0Iiwic2V0Q2xpZW50SGVpZ2h0IiwiYm9keUhlaWdodCIsInNldEJvZHlIZWlnaHQiLCJjYW5jZWxhYmxlIiwiZGVmYXVsdFByZXZlbnRlZCJdLCJtYXBwaW5ncyI6IjBGQUFBOzs7Ozs7QUFNZSxTQUFTQSxRQUFULENBQWtCQyxPQUFsQixFQUEyQjtBQUN6QyxNQUFJQyxFQUFFLEdBQUcsSUFBVDtBQUNBQSxJQUFFLENBQUNDLE9BQUgsR0FBYSxPQUFiLENBRnlDLENBRW5CO0FBQ3RCRCxJQUFFLENBQUNELE9BQUgsR0FBYUEsT0FBTyxJQUFJLEVBQXhCLENBSHlDLENBR2I7O0FBRTVCQyxJQUFFLENBQUNFLGVBQUgsR0FBcUIsS0FBckIsQ0FMeUMsQ0FLYjtBQUM1QkYsSUFBRSxDQUFDRyxhQUFILEdBQW1CLEtBQW5CLENBTnlDLENBTWY7QUFDMUIsTUFBSUMsZUFBZSxHQUFHSixFQUFFLENBQUNELE9BQUgsQ0FBV00sSUFBWCxJQUFtQkwsRUFBRSxDQUFDRCxPQUFILENBQVdNLElBQVgsQ0FBZ0JDLFFBQXpELENBUHlDLENBTzBCOztBQUVuRTtBQUNBTixJQUFFLENBQUNPLGNBQUg7QUFDQTtBQUNBUCxJQUFFLENBQUNRLFlBQUg7O0FBRUE7QUFDQUMsWUFBVSxDQUFDLFlBQVcsQ0FBRTtBQUN2QjtBQUNBLFFBQUlULEVBQUUsQ0FBQ1UsT0FBSCxDQUFXQyxHQUFYLElBQWtCWCxFQUFFLENBQUNVLE9BQUgsQ0FBV0UsSUFBN0IsSUFBcUNSLGVBQXpDLEVBQTBEO0FBQ3pELFVBQUlKLEVBQUUsQ0FBQ1UsT0FBSCxDQUFXRyxlQUFmLEVBQWdDO0FBQy9CYixVQUFFLENBQUNjLGlCQUFILEdBRCtCLENBQ1A7QUFDeEIsT0FGRCxNQUVPO0FBQ05kLFVBQUUsQ0FBQ1UsT0FBSCxDQUFXSixRQUFYLElBQXVCTixFQUFFLENBQUNVLE9BQUgsQ0FBV0osUUFBWCxDQUFvQk4sRUFBcEIsQ0FBdkIsQ0FETSxDQUMwQztBQUNoRDtBQUNEO0FBQ0Q7QUFDQUEsTUFBRSxDQUFDZSxLQUFILENBQVNKLEdBQVQsSUFBZ0JYLEVBQUUsQ0FBQ2UsS0FBSCxDQUFTSCxJQUF6QixJQUFpQyxDQUFDWixFQUFFLENBQUNnQixZQUFyQyxJQUFxRGhCLEVBQUUsQ0FBQ2lCLGVBQUgsRUFBckQ7QUFDQSxHQVhTLEVBV1AsRUFYTyxDQUFWLENBZnlDLENBMEJqQztBQUNSOztBQUVEO0FBQ0FuQixRQUFRLENBQUNvQixTQUFULENBQW1CQyxnQkFBbkIsR0FBc0MsVUFBU1QsT0FBVCxFQUFrQjtBQUN2RDtBQUNBWixVQUFRLENBQUNzQixNQUFULENBQWdCVixPQUFoQixFQUF5QjtBQUN4QkMsT0FBRyxFQUFFLElBRG1CLEVBQ2I7QUFDWEMsUUFBSSxFQUFFLElBRmtCLEVBRVo7QUFDWkMsbUJBQWUsRUFBRSxLQUhPLEVBR0E7QUFDeEJRLFVBQU0sRUFBRSxLQUpnQixFQUlUO0FBQ2ZDLFVBQU0sRUFBRSxFQUxnQixFQUtaO0FBQ1pDLFlBQVEsRUFBRSxHQU5jLEVBTVQ7QUFDZkMsT0FBRyxFQUFFLEVBUG1CLEVBT2Y7QUFDVEMsZ0JBQVksRUFBRSxDQVJVLEVBUVA7QUFDakJDLGlCQUFhLEVBQUUsR0FUUyxFQVNKO0FBQ3BCQyxnQkFBWSxFQUFFLEVBVlUsRUFVTjtBQUNsQkMsWUFBUSxFQUFFLEVBWGMsRUFXVjtBQUNkQyxnQkFBWSxFQUFFLE1BWlUsRUFZRjtBQUN0QkMsaUJBQWEsRUFBRSxNQWJTLEVBYUQ7QUFDdkJDLGVBQVcsRUFBRSxTQWRXLEVBY0E7QUFDeEJDLFVBQU0sRUFBRSxJQWZnQixFQWVWO0FBQ2RDLFlBQVEsRUFBRSxJQWhCYyxFQWdCUjtBQUNoQkMsYUFBUyxFQUFFLElBakJhLEVBaUJQO0FBQ2pCQyxZQUFRLEVBQUUsSUFsQmMsRUFrQlI7QUFDaEJDLGlCQUFhLEVBQUUsSUFuQlMsRUFtQkg7QUFDckJDLGVBQVcsRUFBRSxJQXBCVyxFQW9CTDtBQUNuQkMsZ0JBQVksRUFBRSxJQXJCVSxFQXFCSjtBQUNwQkMsaUJBQWEsRUFBRSxJQXRCUyxFQXNCSDtBQUNyQmpDLFlBQVEsRUFBRSxrQkFBU2tDLFFBQVQsRUFBbUI7QUFDNUI7QUFDQUEsY0FBUSxDQUFDQyxhQUFUO0FBQ0EsS0ExQnVCLEVBQXpCOztBQTRCQSxDQTlCRDs7QUFnQ0E7QUFDQTNDLFFBQVEsQ0FBQ29CLFNBQVQsQ0FBbUJ3QixjQUFuQixHQUFvQyxVQUFTM0IsS0FBVCxFQUFnQjtBQUNuRDtBQUNBakIsVUFBUSxDQUFDc0IsTUFBVCxDQUFnQkwsS0FBaEIsRUFBdUI7QUFDdEJKLE9BQUcsRUFBRSxJQURpQixFQUNYO0FBQ1hDLFFBQUksRUFBRSxJQUZnQixFQUVWO0FBQ1pTLFVBQU0sRUFBRSxLQUhjLEVBR1A7QUFDZnNCLFVBQU0sRUFBRSxJQUpjLEVBSVI7QUFDZEMsWUFBUSxFQUFFLEtBTFksRUFLTDtBQUNqQnRDLFlBQVEsRUFBRSxJQU5ZLEVBTU47QUFDaEJ1QyxRQUFJLEVBQUU7QUFDTEMsU0FBRyxFQUFFLENBREEsRUFDRztBQUNSQyxVQUFJLEVBQUUsRUFGRCxFQUVLO0FBQ1ZDLFVBQUksRUFBRSxJQUhELENBR007QUFITixLQVBnQjtBQVl0QkMsY0FBVSxFQUFFLENBWlUsRUFZUDtBQUNmM0IsVUFBTSxFQUFFLEVBYmMsRUFhVjtBQUNaUyxlQUFXLEVBQUUsU0FkUyxFQWNFO0FBQ3hCbUIsY0FBVSxFQUFFLFdBZlUsRUFlRztBQUN6QmxCLFVBQU0sRUFBRSxJQWhCYyxFQWdCUjtBQUNkSyxlQUFXLEVBQUUsSUFqQlMsRUFpQkg7QUFDbkJjLGNBQVUsRUFBRSxJQWxCVSxFQWtCSjtBQUNsQkMsZ0JBQVksRUFBRSxJQW5CUSxFQW1CRjtBQUNwQkMsU0FBSyxFQUFFO0FBQ047QUFDQUMsU0FBRyxFQUFFLElBRkMsRUFFSztBQUNYaEMsWUFBTSxFQUFFLElBSEYsRUFHUTtBQUNkaUMsY0FBUSxFQUFFLEdBSkosRUFJUztBQUNmQyxjQUFRLEVBQUUsSUFMSixFQUtVO0FBQ2hCQyxZQUFNLEVBQUUsSUFORixDQU1PO0FBTlAsS0FwQmU7QUE0QnRCQyxTQUFLLEVBQUU7QUFDTi9DLFNBQUcsRUFBRSxJQURDLEVBQ0s7QUFDWGdELFVBQUksRUFBRSxJQUZBLEVBRU07QUFDWkMsU0FBRyxFQUFFLFlBSEMsRUFHYTtBQUNuQkMsYUFBTyxFQUFFLEVBSkgsRUFJTztBQUNiTCxjQUFRLEVBQUUsSUFMSixFQUtVO0FBQ2hCQyxZQUFNLEVBQUUsSUFORixDQU1PO0FBTlAsS0E1QmU7QUFvQ3RCSyxZQUFRLEVBQUUsS0FwQ1ksQ0FvQ047QUFwQ00sR0FBdkI7QUFzQ0EsQ0F4Q0Q7O0FBMENBO0FBQ0FoRSxRQUFRLENBQUNzQixNQUFULEdBQWtCLFVBQVMyQyxVQUFULEVBQXFCQyxhQUFyQixFQUFvQztBQUNyRCxNQUFJLENBQUNELFVBQUwsRUFBaUIsT0FBT0MsYUFBUDtBQUNqQixPQUFLLElBQUlDLEdBQVQsSUFBZ0JELGFBQWhCLEVBQStCO0FBQzlCLFFBQUlELFVBQVUsQ0FBQ0UsR0FBRCxDQUFWLElBQW1CLElBQXZCLEVBQTZCO0FBQzVCLFVBQUlDLEdBQUcsR0FBR0YsYUFBYSxDQUFDQyxHQUFELENBQXZCO0FBQ0EsVUFBSUMsR0FBRyxJQUFJLElBQVAsSUFBZSxPQUFPQSxHQUFQLEtBQWUsUUFBbEMsRUFBNEM7QUFDM0NILGtCQUFVLENBQUNFLEdBQUQsQ0FBVixHQUFrQm5FLFFBQVEsQ0FBQ3NCLE1BQVQsQ0FBZ0IsRUFBaEIsRUFBb0I4QyxHQUFwQixDQUFsQixDQUQyQyxDQUNDO0FBQzVDLE9BRkQsTUFFTztBQUNOSCxrQkFBVSxDQUFDRSxHQUFELENBQVYsR0FBa0JDLEdBQWxCO0FBQ0E7QUFDRCxLQVBELE1BT08sSUFBSSxPQUFPSCxVQUFVLENBQUNFLEdBQUQsQ0FBakIsS0FBMkIsUUFBL0IsRUFBeUM7QUFDL0NuRSxjQUFRLENBQUNzQixNQUFULENBQWdCMkMsVUFBVSxDQUFDRSxHQUFELENBQTFCLEVBQWlDRCxhQUFhLENBQUNDLEdBQUQsQ0FBOUMsRUFEK0MsQ0FDTztBQUN0RDtBQUNEO0FBQ0QsU0FBT0YsVUFBUDtBQUNBLENBZkQ7O0FBaUJBO0FBQ0FqRSxRQUFRLENBQUNvQixTQUFULENBQW1CWCxjQUFuQixHQUFvQyxZQUFXO0FBQzlDLE1BQUlQLEVBQUUsR0FBRyxJQUFUO0FBQ0E7QUFDQUEsSUFBRSxDQUFDVSxPQUFILEdBQWFWLEVBQUUsQ0FBQ0QsT0FBSCxDQUFXTSxJQUFYLElBQW1CLEVBQWhDO0FBQ0FMLElBQUUsQ0FBQ21CLGdCQUFILENBQW9CbkIsRUFBRSxDQUFDVSxPQUF2Qjs7QUFFQVYsSUFBRSxDQUFDbUUsU0FBSCxHQUFlLENBQWYsQ0FOOEMsQ0FNNUI7O0FBRWxCO0FBQ0EsTUFBSW5FLEVBQUUsQ0FBQ1UsT0FBSCxDQUFXQyxHQUFYLElBQWtCWCxFQUFFLENBQUNVLE9BQUgsQ0FBV3NCLE1BQWpDLEVBQXlDO0FBQ3hDO0FBQ0F2QixjQUFVLENBQUMsWUFBVyxDQUFFO0FBQ3ZCVCxRQUFFLENBQUNVLE9BQUgsQ0FBV3NCLE1BQVgsQ0FBa0JoQyxFQUFsQjtBQUNBLEtBRlMsRUFFUCxDQUZPLENBQVY7QUFHQTtBQUNELENBZkQ7O0FBaUJBO0FBQ0FGLFFBQVEsQ0FBQ29CLFNBQVQsQ0FBbUJrRCxlQUFuQixHQUFxQyxVQUFTQyxDQUFULEVBQVk7QUFDaEQsTUFBSSxDQUFDLEtBQUszRCxPQUFMLENBQWFDLEdBQWxCLEVBQXVCOztBQUV2QixPQUFLMkQsVUFBTCxHQUFrQixLQUFLQyxRQUFMLENBQWNGLENBQWQsQ0FBbEIsQ0FIZ0QsQ0FHWjtBQUNwQyxPQUFLOUMsUUFBTCxHQUFnQixLQUFLaUQsWUFBTCxFQUFoQixDQUpnRCxDQUlYO0FBQ3JDLE9BQUtDLFNBQUwsR0FBaUIsS0FBS0gsVUFBdEIsQ0FMZ0QsQ0FLZDtBQUNsQyxPQUFLSSxhQUFMLEdBQXFCLEtBQUtDLGFBQUwsS0FBdUIsS0FBS2pFLE9BQUwsQ0FBYWlCLFlBQXpELENBTmdELENBTXVCO0FBQ3ZFLE9BQUtpRCxVQUFMLEdBQWtCLEtBQWxCLENBUGdELENBT3ZCO0FBQ3pCLENBUkQ7O0FBVUE7QUFDQTlFLFFBQVEsQ0FBQ29CLFNBQVQsQ0FBbUIyRCxjQUFuQixHQUFvQyxVQUFTUixDQUFULEVBQVk7QUFDL0MsTUFBSSxDQUFDLEtBQUszRCxPQUFMLENBQWFDLEdBQWxCLEVBQXVCO0FBQ3ZCLE1BQUksQ0FBQyxLQUFLMkQsVUFBVixFQUFzQjtBQUN0QixNQUFJdEUsRUFBRSxHQUFHLElBQVQ7O0FBRUE7QUFDQSxNQUFJOEUsQ0FBQyxHQUFHLElBQUlDLElBQUosR0FBV0MsT0FBWCxFQUFSO0FBQ0EsTUFBSWhGLEVBQUUsQ0FBQ2lGLFFBQUgsSUFBZUgsQ0FBQyxHQUFHOUUsRUFBRSxDQUFDaUYsUUFBUCxHQUFrQmpGLEVBQUUsQ0FBQ2tGLFlBQXhDLEVBQXNELENBQUU7QUFDdkQ7QUFDQSxHQUZELE1BRU87QUFDTmxGLE1BQUUsQ0FBQ2lGLFFBQUgsR0FBY0gsQ0FBZDtBQUNBOUUsTUFBRSxDQUFDa0YsWUFBSCxHQUFrQixPQUFPbEYsRUFBRSxDQUFDVSxPQUFILENBQVdjLEdBQXBDO0FBQ0E7O0FBRUQsTUFBSTJELFNBQVMsR0FBR25GLEVBQUUsQ0FBQ3dFLFlBQUgsRUFBaEIsQ0FkK0MsQ0FjWjtBQUNuQyxNQUFJWSxRQUFRLEdBQUdwRixFQUFFLENBQUN1RSxRQUFILENBQVlGLENBQVosQ0FBZixDQWYrQyxDQWVoQjs7QUFFL0IsTUFBSWdCLEtBQUssR0FBR0QsUUFBUSxDQUFDRSxDQUFULEdBQWF0RixFQUFFLENBQUNzRSxVQUFILENBQWNnQixDQUF2QyxDQWpCK0MsQ0FpQkw7O0FBRTFDO0FBQ0E7QUFDQSxNQUFJRCxLQUFLLEdBQUcsQ0FBUixLQUFjRixTQUFTLElBQUksQ0FBYixJQUFtQkEsU0FBUyxJQUFJbkYsRUFBRSxDQUFDVSxPQUFILENBQVdhLFFBQXhCLElBQW9DNEQsU0FBUyxLQUFLbkYsRUFBRSxDQUFDdUIsUUFBdEYsQ0FBSixFQUFzRztBQUNyRztBQUNBLFFBQUl2QixFQUFFLENBQUNVLE9BQUgsQ0FBV0MsR0FBWCxJQUFrQixDQUFDWCxFQUFFLENBQUM0RSxVQUF0QixJQUFvQyxDQUFDNUUsRUFBRSxDQUFDRSxlQUF4QyxJQUEyRCxDQUFDRixFQUFFLENBQUNVLE9BQUgsQ0FBV1csTUFBdkUsS0FBa0YsQ0FBQ3JCLEVBQUUsQ0FBQ0csYUFBSixJQUFzQkgsRUFBRSxDQUFDRyxhQUFIO0FBQzFHSCxNQUFFLENBQUNlLEtBQUgsQ0FBUzRCLE1BRFAsQ0FBSixFQUNxQjs7QUFFcEI7QUFDQSxVQUFJNEMsQ0FBQyxHQUFHQyxJQUFJLENBQUNDLEdBQUwsQ0FBU3pGLEVBQUUsQ0FBQ3lFLFNBQUgsQ0FBYWMsQ0FBYixHQUFpQkgsUUFBUSxDQUFDRyxDQUFuQyxDQUFSO0FBQ0EsVUFBSUQsQ0FBQyxHQUFHRSxJQUFJLENBQUNDLEdBQUwsQ0FBU3pGLEVBQUUsQ0FBQ3lFLFNBQUgsQ0FBYWEsQ0FBYixHQUFpQkYsUUFBUSxDQUFDRSxDQUFuQyxDQUFSO0FBQ0EsVUFBSUksQ0FBQyxHQUFHRixJQUFJLENBQUNHLElBQUwsQ0FBVUosQ0FBQyxHQUFHQSxDQUFKLEdBQVFELENBQUMsR0FBR0EsQ0FBdEIsQ0FBUjtBQUNBLFVBQUlJLENBQUMsS0FBSyxDQUFWLEVBQWE7QUFDWixZQUFJRSxLQUFLLEdBQUdKLElBQUksQ0FBQ0ssSUFBTCxDQUFVUCxDQUFDLEdBQUdJLENBQWQsSUFBbUJGLElBQUksQ0FBQ00sRUFBeEIsR0FBNkIsR0FBekMsQ0FEWSxDQUNrQztBQUM5QyxZQUFJRixLQUFLLEdBQUc1RixFQUFFLENBQUNVLE9BQUgsQ0FBV2tCLFFBQXZCLEVBQWlDLE9BRnJCLENBRTZCO0FBQ3pDOztBQUVEO0FBQ0EsVUFBSTVCLEVBQUUsQ0FBQzBFLGFBQUgsR0FBbUIsQ0FBbkIsSUFBd0JVLFFBQVEsQ0FBQ0UsQ0FBVCxJQUFjdEYsRUFBRSxDQUFDMEUsYUFBN0MsRUFBNEQ7QUFDM0QxRSxVQUFFLENBQUM0RSxVQUFILEdBQWdCLElBQWhCLENBRDJELENBQ3JDO0FBQ3RCNUUsVUFBRSxDQUFDK0YsYUFBSCxHQUYyRCxDQUV2QztBQUNwQjtBQUNBOztBQUVEL0YsUUFBRSxDQUFDZ0csY0FBSCxDQUFrQjNCLENBQWxCLEVBbEJvQixDQWtCRTs7QUFFdEIsVUFBSTRCLElBQUksR0FBR2IsUUFBUSxDQUFDRSxDQUFULEdBQWF0RixFQUFFLENBQUN5RSxTQUFILENBQWFhLENBQXJDLENBcEJvQixDQW9Cb0I7O0FBRXhDO0FBQ0EsVUFBSXRGLEVBQUUsQ0FBQ21FLFNBQUgsR0FBZW5FLEVBQUUsQ0FBQ1UsT0FBSCxDQUFXWSxNQUE5QixFQUFzQztBQUNyQyxZQUFJdEIsRUFBRSxDQUFDa0csUUFBSCxLQUFnQixDQUFwQixFQUF1QjtBQUN0QmxHLFlBQUUsQ0FBQ2tHLFFBQUgsR0FBYyxDQUFkLENBRHNCLENBQ0w7QUFDakJsRyxZQUFFLENBQUNVLE9BQUgsQ0FBV3VCLFFBQVgsSUFBdUJqQyxFQUFFLENBQUNVLE9BQUgsQ0FBV3VCLFFBQVgsQ0FBb0JqQyxFQUFwQixDQUF2QixDQUZzQixDQUUwQjtBQUNoREEsWUFBRSxDQUFDbUcsVUFBSCxHQUFnQixJQUFoQixDQUhzQixDQUdBO0FBQ3RCO0FBQ0RuRyxVQUFFLENBQUNtRSxTQUFILElBQWdCOEIsSUFBSSxHQUFHakcsRUFBRSxDQUFDVSxPQUFILENBQVdlLFlBQWxDLENBTnFDLENBTVc7O0FBRWhEO0FBQ0EsT0FURCxNQVNPO0FBQ04sWUFBSXpCLEVBQUUsQ0FBQ2tHLFFBQUgsS0FBZ0IsQ0FBcEIsRUFBdUI7QUFDdEJsRyxZQUFFLENBQUNrRyxRQUFILEdBQWMsQ0FBZCxDQURzQixDQUNMO0FBQ2pCbEcsWUFBRSxDQUFDVSxPQUFILENBQVd3QixTQUFYLElBQXdCbEMsRUFBRSxDQUFDVSxPQUFILENBQVd3QixTQUFYLENBQXFCbEMsRUFBckIsQ0FBeEIsQ0FGc0IsQ0FFNEI7QUFDbERBLFlBQUUsQ0FBQ21HLFVBQUgsR0FBZ0IsSUFBaEIsQ0FIc0IsQ0FHQTtBQUN0QjtBQUNELFlBQUlGLElBQUksR0FBRyxDQUFYLEVBQWMsQ0FBRTtBQUNmakcsWUFBRSxDQUFDbUUsU0FBSCxJQUFnQnFCLElBQUksQ0FBQ1ksS0FBTCxDQUFXSCxJQUFJLEdBQUdqRyxFQUFFLENBQUNVLE9BQUgsQ0FBV2dCLGFBQTdCLENBQWhCLENBRGEsQ0FDZ0Q7QUFDN0QsU0FGRCxNQUVPLENBQUU7QUFDUjFCLFlBQUUsQ0FBQ21FLFNBQUgsSUFBZ0I4QixJQUFoQixDQURNLENBQ2dCO0FBQ3RCO0FBQ0Q7O0FBRUQsVUFBSUksSUFBSSxHQUFHckcsRUFBRSxDQUFDbUUsU0FBSCxHQUFlbkUsRUFBRSxDQUFDVSxPQUFILENBQVdZLE1BQXJDLENBN0NvQixDQTZDeUI7QUFDN0N0QixRQUFFLENBQUNVLE9BQUgsQ0FBV3lCLFFBQVgsSUFBdUJuQyxFQUFFLENBQUNVLE9BQUgsQ0FBV3lCLFFBQVgsQ0FBb0JuQyxFQUFwQixFQUF3QnFHLElBQXhCLEVBQThCckcsRUFBRSxDQUFDbUUsU0FBakMsQ0FBdkIsQ0E5Q29CLENBOENnRDtBQUNwRTtBQUNEOztBQUVEbkUsSUFBRSxDQUFDeUUsU0FBSCxHQUFlVyxRQUFmLENBMUUrQyxDQTBFdEI7QUFDekIsQ0EzRUQ7O0FBNkVBO0FBQ0F0RixRQUFRLENBQUNvQixTQUFULENBQW1CNkUsYUFBbkIsR0FBbUMsVUFBUzFCLENBQVQsRUFBWTtBQUM5QyxNQUFJLENBQUMsS0FBSzNELE9BQUwsQ0FBYUMsR0FBbEIsRUFBdUI7QUFDdkI7QUFDQSxNQUFJLEtBQUt3RixVQUFULEVBQXFCO0FBQ3BCLFFBQUksS0FBS2hDLFNBQUwsSUFBa0IsS0FBS3pELE9BQUwsQ0FBYVksTUFBbkMsRUFBMkM7QUFDMUM7QUFDQSxXQUFLUixpQkFBTDtBQUNBLEtBSEQsTUFHTztBQUNOO0FBQ0EsV0FBS3FELFNBQUwsR0FBaUIsQ0FBakI7QUFDQSxXQUFLekQsT0FBTCxDQUFhNkIsYUFBYixJQUE4QixLQUFLN0IsT0FBTCxDQUFhNkIsYUFBYixDQUEyQixJQUEzQixDQUE5QjtBQUNBO0FBQ0QsU0FBSzJELFFBQUwsR0FBZ0IsQ0FBaEI7QUFDQSxTQUFLQyxVQUFMLEdBQWtCLEtBQWxCO0FBQ0EsR0FYRCxNQVdPLElBQUksS0FBSzNCLFlBQUwsT0FBd0IsS0FBS2pELFFBQWpDLEVBQTJDLENBQUU7QUFDbkQsUUFBSStFLFVBQVUsR0FBRyxLQUFLL0IsUUFBTCxDQUFjRixDQUFkLEVBQWlCaUIsQ0FBakIsR0FBcUIsS0FBS2hCLFVBQUwsQ0FBZ0JnQixDQUFyQyxHQUF5QyxDQUExRCxDQURpRCxDQUNZO0FBQzdEO0FBQ0FnQixjQUFVLElBQUksS0FBS3JGLGVBQUwsQ0FBcUIsSUFBckIsQ0FBZDtBQUNBO0FBQ0QsQ0FuQkQ7O0FBcUJBO0FBQ0FuQixRQUFRLENBQUNvQixTQUFULENBQW1CcUQsUUFBbkIsR0FBOEIsVUFBU0YsQ0FBVCxFQUFZO0FBQ3pDLE1BQUlBLENBQUMsQ0FBQ2tDLE9BQUYsSUFBYWxDLENBQUMsQ0FBQ2tDLE9BQUYsQ0FBVSxDQUFWLENBQWpCLEVBQStCO0FBQzlCLFdBQU87QUFDTmhCLE9BQUMsRUFBRWxCLENBQUMsQ0FBQ2tDLE9BQUYsQ0FBVSxDQUFWLEVBQWFDLEtBRFY7QUFFTmxCLE9BQUMsRUFBRWpCLENBQUMsQ0FBQ2tDLE9BQUYsQ0FBVSxDQUFWLEVBQWFFLEtBRlYsRUFBUDs7QUFJQSxHQUxELE1BS08sSUFBSXBDLENBQUMsQ0FBQ3FDLGNBQUYsSUFBb0JyQyxDQUFDLENBQUNxQyxjQUFGLENBQWlCLENBQWpCLENBQXhCLEVBQTZDO0FBQ25ELFdBQU87QUFDTm5CLE9BQUMsRUFBRWxCLENBQUMsQ0FBQ3FDLGNBQUYsQ0FBaUIsQ0FBakIsRUFBb0JGLEtBRGpCO0FBRU5sQixPQUFDLEVBQUVqQixDQUFDLENBQUNxQyxjQUFGLENBQWlCLENBQWpCLEVBQW9CRCxLQUZqQixFQUFQOztBQUlBLEdBTE0sTUFLQTtBQUNOLFdBQU87QUFDTmxCLE9BQUMsRUFBRWxCLENBQUMsQ0FBQ3NDLE9BREM7QUFFTnJCLE9BQUMsRUFBRWpCLENBQUMsQ0FBQ3VDLE9BRkMsRUFBUDs7QUFJQTtBQUNELENBakJEOztBQW1CQTtBQUNBOUcsUUFBUSxDQUFDb0IsU0FBVCxDQUFtQkosaUJBQW5CLEdBQXVDLFlBQVc7QUFDakQsTUFBSSxLQUFLSixPQUFMLENBQWEwQixhQUFiLElBQThCLEtBQUsxQixPQUFMLENBQWEwQixhQUFiLENBQTJCLElBQTNCLENBQWxDLEVBQW9FO0FBQ25FO0FBQ0EsR0FGRCxNQUVPO0FBQ04sU0FBS3lFLGNBQUwsR0FETSxDQUNpQjtBQUN2QixTQUFLbkcsT0FBTCxDQUFhSixRQUFiLElBQXlCLEtBQUtJLE9BQUwsQ0FBYUosUUFBYixDQUFzQixJQUF0QixDQUF6QixDQUZNLENBRWdEO0FBQ3REO0FBQ0QsQ0FQRDs7QUFTQTtBQUNBUixRQUFRLENBQUNvQixTQUFULENBQW1CMkYsY0FBbkIsR0FBb0MsWUFBVztBQUM5QyxPQUFLM0csZUFBTCxHQUF1QixJQUF2QixDQUQ4QyxDQUNqQjtBQUM3QixPQUFLaUUsU0FBTCxHQUFpQixLQUFLekQsT0FBTCxDQUFhWSxNQUE5QixDQUY4QyxDQUVSO0FBQ3RDLE9BQUtaLE9BQUwsQ0FBYTJCLFdBQWIsQ0FBeUIsSUFBekIsRUFBK0IsS0FBSzhCLFNBQXBDLEVBSDhDLENBR0U7QUFDaEQsQ0FKRDs7QUFNQTtBQUNBckUsUUFBUSxDQUFDb0IsU0FBVCxDQUFtQnFCLGFBQW5CLEdBQW1DLFlBQVc7QUFDN0MsTUFBSXZDLEVBQUUsR0FBRyxJQUFUO0FBQ0E7QUFDQSxNQUFJOEcsU0FBUyxHQUFHLFNBQVpBLFNBQVksR0FBVztBQUMxQjlHLE1BQUUsQ0FBQ21FLFNBQUgsR0FBZSxDQUFmO0FBQ0FuRSxNQUFFLENBQUNFLGVBQUgsR0FBcUIsS0FBckI7QUFDQUYsTUFBRSxDQUFDVSxPQUFILENBQVc2QixhQUFYLElBQTRCdkMsRUFBRSxDQUFDVSxPQUFILENBQVc2QixhQUFYLENBQXlCdkMsRUFBekIsQ0FBNUI7QUFDQUEsTUFBRSxDQUFDK0csZUFBSCxDQUFtQixDQUFuQixFQUowQixDQUlKO0FBQ3RCLEdBTEQ7QUFNQTtBQUNBLE1BQUlDLEtBQUssR0FBRyxDQUFaO0FBQ0EsTUFBSWhILEVBQUUsQ0FBQ1UsT0FBSCxDQUFXNEIsWUFBZixFQUE2QjBFLEtBQUssR0FBR2hILEVBQUUsQ0FBQ1UsT0FBSCxDQUFXNEIsWUFBWCxDQUF3QnRDLEVBQXhCLENBQVIsQ0FYZ0IsQ0FXcUI7QUFDbEUsTUFBSSxPQUFPZ0gsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsS0FBSyxHQUFHLENBQXpDLEVBQTRDO0FBQzNDdkcsY0FBVSxDQUFDcUcsU0FBRCxFQUFZRSxLQUFaLENBQVY7QUFDQSxHQUZELE1BRU87QUFDTkYsYUFBUztBQUNUO0FBQ0QsQ0FqQkQ7O0FBbUJBO0FBQ0FoSCxRQUFRLENBQUNvQixTQUFULENBQW1CK0YsY0FBbkIsR0FBb0MsVUFBUzVGLE1BQVQsRUFBaUI7QUFDcEQsTUFBSUEsTUFBTSxJQUFJLElBQWQsRUFBb0JBLE1BQU0sR0FBRyxJQUFUO0FBQ3BCLE9BQUtYLE9BQUwsQ0FBYVcsTUFBYixHQUFzQkEsTUFBdEI7QUFDQSxDQUhEOztBQUtBO0FBQ0F2QixRQUFRLENBQUNvQixTQUFULENBQW1CVixZQUFuQixHQUFrQyxZQUFXO0FBQzVDLE1BQUlSLEVBQUUsR0FBRyxJQUFUO0FBQ0E7QUFDQUEsSUFBRSxDQUFDZSxLQUFILEdBQVdmLEVBQUUsQ0FBQ0QsT0FBSCxDQUFXbUgsRUFBWCxJQUFpQjtBQUMzQnZHLE9BQUcsRUFBRSxLQURzQixFQUE1Qjs7QUFHQVgsSUFBRSxDQUFDMEMsY0FBSCxDQUFrQjFDLEVBQUUsQ0FBQ2UsS0FBckI7O0FBRUEsTUFBSSxDQUFDZixFQUFFLENBQUNlLEtBQUgsQ0FBUzZCLFFBQWQsRUFBd0I1QyxFQUFFLENBQUNtSCxTQUFILENBQWEsS0FBYixFQVJvQixDQVFDOztBQUU3QyxNQUFJbkgsRUFBRSxDQUFDZSxLQUFILENBQVNKLEdBQVQsS0FBaUIsS0FBckIsRUFBNEIsT0FWZ0IsQ0FVUjtBQUNwQ1gsSUFBRSxDQUFDZSxLQUFILENBQVNxRyxPQUFULEdBQW1CLElBQW5CLENBWDRDLENBV25CO0FBQ3pCcEgsSUFBRSxDQUFDcUgsUUFBSCxHQUFjckgsRUFBRSxDQUFDZSxLQUFILENBQVM4QixJQUFULENBQWNDLEdBQWQsR0FBb0IsQ0FBbEMsQ0FaNEMsQ0FZUDs7QUFFckM7QUFDQSxNQUFJOUMsRUFBRSxDQUFDZSxLQUFILENBQVNpQixNQUFiLEVBQXFCO0FBQ3BCdkIsY0FBVSxDQUFDLFlBQVcsQ0FBRTtBQUN2QlQsUUFBRSxDQUFDZSxLQUFILENBQVNpQixNQUFULENBQWdCaEMsRUFBaEI7QUFDQSxLQUZTLEVBRVAsQ0FGTyxDQUFWO0FBR0E7QUFDRCxDQXBCRDs7QUFzQkE7QUFDQUYsUUFBUSxDQUFDb0IsU0FBVCxDQUFtQm9HLE1BQW5CLEdBQTRCLFVBQVNqRCxDQUFULEVBQVlQLFFBQVosRUFBc0I7QUFDakQ7QUFDQSxPQUFLeUQsWUFBTCxDQUFrQmxELENBQUMsQ0FBQ2MsU0FBcEI7QUFDQTtBQUNBLE9BQUs0QixlQUFMLENBQXFCMUMsQ0FBQyxDQUFDbUQsWUFBdkI7O0FBRUE7QUFDQSxNQUFJLEtBQUtDLFVBQUwsSUFBbUIsSUFBdkIsRUFBNkIsS0FBS0EsVUFBTCxHQUFrQixDQUFsQjtBQUM3QixPQUFLbkIsVUFBTCxHQUFrQmpDLENBQUMsQ0FBQ2MsU0FBRixHQUFjLEtBQUtzQyxVQUFuQixHQUFnQyxDQUFsRDtBQUNBLE9BQUtBLFVBQUwsR0FBa0JwRCxDQUFDLENBQUNjLFNBQXBCOztBQUVBO0FBQ0EsT0FBS21CLFVBQUwsSUFBbUIsS0FBS3JGLGVBQUwsQ0FBcUIsSUFBckIsQ0FBbkI7O0FBRUE7QUFDQSxNQUFJb0QsQ0FBQyxDQUFDYyxTQUFGLElBQWUsS0FBS3BFLEtBQUwsQ0FBV3NDLEtBQVgsQ0FBaUIvQixNQUFwQyxFQUE0QztBQUMzQyxTQUFLb0csVUFBTDtBQUNBLEdBRkQsTUFFTztBQUNOLFNBQUtDLFVBQUw7QUFDQTs7QUFFRDtBQUNBLE9BQUs1RyxLQUFMLENBQVcrQyxRQUFYLElBQXVCQSxRQUF2QixJQUFtQ0EsUUFBUSxFQUEzQztBQUNBLENBdkJEOztBQXlCQTtBQUNBaEUsUUFBUSxDQUFDb0IsU0FBVCxDQUFtQkQsZUFBbkIsR0FBcUMsVUFBUzJHLE9BQVQsRUFBa0I7QUFDdEQsTUFBSSxDQUFDLEtBQUt6SCxhQUFOLElBQXVCLEtBQUtZLEtBQUwsQ0FBV0osR0FBbEMsSUFBeUMsS0FBS0ksS0FBTCxDQUFXVCxRQUF4RCxFQUFrRTtBQUNqRTtBQUNBLFFBQUlzSCxPQUFPLEtBQUssSUFBaEIsRUFBc0I7QUFDckIsVUFBSUMsS0FBSyxHQUFHLEtBQVo7QUFDQTtBQUNBLFVBQUksS0FBSzlHLEtBQUwsQ0FBV3FHLE9BQVgsSUFBc0IsQ0FBQyxLQUFLckcsS0FBTCxDQUFXTSxNQUFsQyxJQUE0QyxDQUFDLEtBQUtuQixlQUF0RCxFQUF1RTtBQUN0RSxZQUFJLEtBQUs0SCxlQUFMLE1BQTBCLEtBQUsvRyxLQUFMLENBQVdPLE1BQXpDLEVBQWlELENBQUU7QUFDbER1RyxlQUFLLEdBQUcsSUFBUixDQURnRCxDQUNsQztBQUNkO0FBQ0Q7QUFDRCxVQUFJQSxLQUFLLEtBQUssS0FBZCxFQUFxQjtBQUNyQjtBQUNELFNBQUtFLFlBQUwsR0FaaUUsQ0FZNUM7QUFDckIsU0FBS2hILEtBQUwsQ0FBVzhCLElBQVgsQ0FBZ0JDLEdBQWhCLEdBYmlFLENBYTFDO0FBQ3ZCLFNBQUs5QixZQUFMLEdBQW9CLElBQXBCLENBZGlFLENBY3ZDO0FBQzFCLFNBQUs4QixHQUFMLEdBQVcsS0FBSy9CLEtBQUwsQ0FBVzhCLElBQVgsQ0FBZ0JDLEdBQTNCLENBZmlFLENBZWpDO0FBQ2hDLFNBQUtDLElBQUwsR0FBWSxLQUFLaEMsS0FBTCxDQUFXOEIsSUFBWCxDQUFnQkUsSUFBNUIsQ0FoQmlFLENBZ0IvQjtBQUNsQyxTQUFLQyxJQUFMLEdBQVksS0FBS2pDLEtBQUwsQ0FBVzhCLElBQVgsQ0FBZ0JHLElBQTVCLENBakJpRSxDQWlCL0I7QUFDbEMsU0FBS2pDLEtBQUwsQ0FBV1QsUUFBWCxDQUFvQixJQUFwQixFQWxCaUUsQ0FrQnRDO0FBQzNCO0FBQ0QsQ0FyQkQ7O0FBdUJBO0FBQ0FSLFFBQVEsQ0FBQ29CLFNBQVQsQ0FBbUI2RyxZQUFuQixHQUFrQyxZQUFXO0FBQzVDLE9BQUs1SCxhQUFMLEdBQXFCLElBQXJCLENBRDRDLENBQ2pCO0FBQzNCLE9BQUtZLEtBQUwsQ0FBV3NCLFdBQVgsSUFBMEIsS0FBS3RCLEtBQUwsQ0FBV3NCLFdBQVgsQ0FBdUIsSUFBdkIsQ0FBMUIsQ0FGNEMsQ0FFWTtBQUN4RCxDQUhEOztBQUtBO0FBQ0F2QyxRQUFRLENBQUNvQixTQUFULENBQW1CaUMsVUFBbkIsR0FBZ0MsWUFBVztBQUMxQyxPQUFLcEMsS0FBTCxDQUFXcUcsT0FBWCxHQUFxQixLQUFyQixDQUQwQyxDQUNkO0FBQzVCLE9BQUtyRyxLQUFMLENBQVdvQyxVQUFYLElBQXlCLEtBQUtwQyxLQUFMLENBQVdvQyxVQUFYLENBQXNCLElBQXRCLENBQXpCLENBRjBDLENBRVk7QUFDdEQsQ0FIRDs7QUFLQTtBQUNBckQsUUFBUSxDQUFDb0IsU0FBVCxDQUFtQmtDLFlBQW5CLEdBQWtDLFlBQVc7QUFDNUMsT0FBS3JDLEtBQUwsQ0FBV3FDLFlBQVgsSUFBMkIsS0FBS3JDLEtBQUwsQ0FBV3FDLFlBQVgsQ0FBd0IsSUFBeEIsQ0FBM0IsQ0FENEMsQ0FDYztBQUMxRCxDQUZEOztBQUlBO0FBQ0F0RCxRQUFRLENBQUNvQixTQUFULENBQW1COEcsV0FBbkIsR0FBaUMsVUFBU0MsWUFBVCxFQUF1QjtBQUN2RCxNQUFJQSxZQUFZLElBQUksSUFBcEIsRUFBMEIsQ0FBRTtBQUMzQixRQUFJQSxZQUFKLEVBQWtCO0FBQ2pCLFdBQUs5RSxVQUFMLEdBRGlCLENBQ0U7QUFDbkIsS0FGRCxNQUVPO0FBQ04sV0FBS0MsWUFBTCxHQURNLENBQ2U7QUFDckI7QUFDRDtBQUNELE9BQUtqRCxhQUFMLEdBQXFCLEtBQXJCLENBUnVELENBUTNCO0FBQzVCLENBVEQ7O0FBV0E7Ozs7OztBQU1BTCxRQUFRLENBQUNvQixTQUFULENBQW1CdUIsYUFBbkIsR0FBbUMsVUFBU3lGLGFBQVQsRUFBd0I7QUFDMUQsTUFBSSxLQUFLbkgsS0FBTCxJQUFjLEtBQUtBLEtBQUwsQ0FBV0osR0FBN0IsRUFBa0M7QUFDakMsUUFBSWtDLElBQUksR0FBRyxLQUFLOUIsS0FBTCxDQUFXOEIsSUFBdEI7QUFDQSxTQUFLc0YsVUFBTCxHQUFrQnRGLElBQUksQ0FBQ0MsR0FBdkIsQ0FGaUMsQ0FFTDtBQUM1QixTQUFLc0YsV0FBTCxHQUFtQnZGLElBQUksQ0FBQ0csSUFBeEIsQ0FIaUMsQ0FHSDtBQUM5QkgsUUFBSSxDQUFDQyxHQUFMLEdBQVcsS0FBS3VFLFFBQWhCLENBSmlDLENBSVA7QUFDMUJ4RSxRQUFJLENBQUNHLElBQUwsR0FBWSxJQUFaLENBTGlDLENBS2Y7QUFDbEIsUUFBSSxDQUFDLEtBQUs5QyxlQUFOLElBQXlCZ0ksYUFBYSxLQUFLLEtBQS9DLEVBQXNELENBQUU7QUFDdkQsVUFBSUEsYUFBYSxJQUFJLElBQXJCLEVBQTJCO0FBQzFCLGFBQUtHLFdBQUwsR0FEMEIsQ0FDTjtBQUNwQixhQUFLTixZQUFMLEdBRjBCLENBRUw7QUFDckIsT0FIRCxNQUdPO0FBQ04sYUFBS2xCLGNBQUwsR0FETSxDQUNpQjtBQUN2QjtBQUNEO0FBQ0QsU0FBSzdGLFlBQUwsR0FBb0IsSUFBcEIsQ0FkaUMsQ0FjUDtBQUMxQixTQUFLOEIsR0FBTCxHQUFXRCxJQUFJLENBQUNDLEdBQWhCLENBZmlDLENBZVo7QUFDckIsU0FBS0MsSUFBTCxHQUFZRixJQUFJLENBQUNFLElBQWpCLENBaEJpQyxDQWdCVjtBQUN2QixTQUFLQyxJQUFMLEdBQVlILElBQUksQ0FBQ0csSUFBakIsQ0FqQmlDLENBaUJWO0FBQ3ZCLFNBQUtqQyxLQUFMLENBQVdULFFBQVgsSUFBdUIsS0FBS1MsS0FBTCxDQUFXVCxRQUFYLENBQW9CLElBQXBCLENBQXZCLENBbEJpQyxDQWtCaUI7QUFDbEQ7QUFDRCxDQXJCRDs7QUF1QkE7QUFDQVIsUUFBUSxDQUFDb0IsU0FBVCxDQUFtQm9ILFVBQW5CLEdBQWdDLFVBQVN4RixHQUFULEVBQWM7QUFDN0MsT0FBSy9CLEtBQUwsQ0FBVzhCLElBQVgsQ0FBZ0JDLEdBQWhCLEdBQXNCQSxHQUFHLEdBQUcsQ0FBNUI7QUFDQSxDQUZEOztBQUlBO0FBQ0FoRCxRQUFRLENBQUNvQixTQUFULENBQW1CcUgsV0FBbkIsR0FBaUMsVUFBU3hGLElBQVQsRUFBZTtBQUMvQyxPQUFLaEMsS0FBTCxDQUFXOEIsSUFBWCxDQUFnQkUsSUFBaEIsR0FBdUJBLElBQXZCO0FBQ0EsQ0FGRDs7QUFJQTs7Ozs7QUFLQWpELFFBQVEsQ0FBQ29CLFNBQVQsQ0FBbUJzSCxTQUFuQixHQUErQixVQUFTQyxRQUFULEVBQW1CQyxTQUFuQixFQUE4QkMsT0FBOUIsRUFBdUM7QUFDckUsTUFBSXZCLE9BQUo7QUFDQSxNQUFJLEtBQUtyRyxLQUFMLENBQVdKLEdBQVgsSUFBa0IrSCxTQUFTLElBQUksSUFBbkMsRUFBeUN0QixPQUFPLEdBQUcsS0FBS3JHLEtBQUwsQ0FBVzhCLElBQVgsQ0FBZ0JDLEdBQWhCLEdBQXNCNEYsU0FBaEMsQ0FGNEIsQ0FFZTtBQUNwRixPQUFLRSxVQUFMLENBQWdCSCxRQUFoQixFQUEwQnJCLE9BQTFCLEVBQW1DdUIsT0FBbkM7QUFDQSxDQUpEOztBQU1BOzs7OztBQUtBN0ksUUFBUSxDQUFDb0IsU0FBVCxDQUFtQjJILFNBQW5CLEdBQStCLFVBQVNKLFFBQVQsRUFBbUJLLFNBQW5CLEVBQThCSCxPQUE5QixFQUF1QztBQUNyRSxNQUFJdkIsT0FBSjtBQUNBLE1BQUksS0FBS3JHLEtBQUwsQ0FBV0osR0FBWCxJQUFrQm1JLFNBQVMsSUFBSSxJQUFuQyxFQUF5QztBQUN4QyxRQUFJQyxRQUFRLEdBQUcsQ0FBQyxLQUFLaEksS0FBTCxDQUFXOEIsSUFBWCxDQUFnQkMsR0FBaEIsR0FBc0IsQ0FBdkIsSUFBNEIsS0FBSy9CLEtBQUwsQ0FBVzhCLElBQVgsQ0FBZ0JFLElBQTVDLEdBQW1EMEYsUUFBbEUsQ0FEd0MsQ0FDb0M7QUFDNUVyQixXQUFPLEdBQUcyQixRQUFRLEdBQUdELFNBQXJCLENBRndDLENBRVI7QUFDaEM7QUFDRCxPQUFLRixVQUFMLENBQWdCSCxRQUFoQixFQUEwQnJCLE9BQTFCLEVBQW1DdUIsT0FBbkM7QUFDQSxDQVBEOztBQVNBOzs7OztBQUtBN0ksUUFBUSxDQUFDb0IsU0FBVCxDQUFtQjBILFVBQW5CLEdBQWdDLFVBQVNILFFBQVQsRUFBbUJyQixPQUFuQixFQUE0QnVCLE9BQTVCLEVBQXFDO0FBQ3BFLE1BQUkzSSxFQUFFLEdBQUcsSUFBVDtBQUNBO0FBQ0EsTUFBSUEsRUFBRSxDQUFDRSxlQUFQLEVBQXdCRixFQUFFLENBQUN1QyxhQUFIOztBQUV4QjtBQUNBLE1BQUl2QyxFQUFFLENBQUNlLEtBQUgsQ0FBU0osR0FBYixFQUFrQjtBQUNqQixRQUFJc0gsWUFBSixDQURpQixDQUNDO0FBQ2xCLFFBQUlRLFFBQVEsSUFBSSxJQUFoQixFQUFzQjtBQUNyQixVQUFJTyxPQUFPLEdBQUdoSixFQUFFLENBQUNlLEtBQUgsQ0FBUzhCLElBQVQsQ0FBY0MsR0FBNUIsQ0FEcUIsQ0FDWTtBQUNqQyxVQUFJbUcsUUFBUSxHQUFHakosRUFBRSxDQUFDZSxLQUFILENBQVM4QixJQUFULENBQWNFLElBQTdCLENBRnFCLENBRWM7QUFDbkM7QUFDQSxVQUFJaUcsT0FBTyxLQUFLLENBQWhCLEVBQW1CO0FBQ2xCLFlBQUlMLE9BQUosRUFBYTNJLEVBQUUsQ0FBQ2UsS0FBSCxDQUFTOEIsSUFBVCxDQUFjRyxJQUFkLEdBQXFCMkYsT0FBckIsQ0FESyxDQUN5QjtBQUMzQztBQUNELFVBQUlGLFFBQVEsR0FBR1EsUUFBWCxJQUF1QjdCLE9BQU8sS0FBSyxLQUF2QyxFQUE4QztBQUM3QztBQUNBcEgsVUFBRSxDQUFDZSxLQUFILENBQVNxRyxPQUFULEdBQW1CLEtBQW5CO0FBQ0EsWUFBSXFCLFFBQVEsS0FBSyxDQUFiLElBQWtCTyxPQUFPLEtBQUssQ0FBbEMsRUFBcUM7QUFDcEM7QUFDQWYsc0JBQVksR0FBRyxLQUFmO0FBQ0FqSSxZQUFFLENBQUNrSixTQUFIO0FBQ0EsU0FKRCxNQUlPO0FBQ047QUFDQSxjQUFJQyxXQUFXLEdBQUcsQ0FBQ0gsT0FBTyxHQUFHLENBQVgsSUFBZ0JDLFFBQWhCLEdBQTJCUixRQUE3QztBQUNBLGNBQUlVLFdBQVcsR0FBR25KLEVBQUUsQ0FBQ2UsS0FBSCxDQUFTa0MsVUFBM0IsRUFBdUM7QUFDdENnRix3QkFBWSxHQUFHLEtBQWY7QUFDQSxXQUZELE1BRU87QUFDTkEsd0JBQVksR0FBRyxJQUFmO0FBQ0E7QUFDRGpJLFlBQUUsQ0FBQ3FJLFdBQUgsR0FSTSxDQVFZO0FBQ2xCO0FBQ0QsT0FqQkQsTUFpQk87QUFDTjtBQUNBSixvQkFBWSxHQUFHLEtBQWY7QUFDQWpJLFVBQUUsQ0FBQ2UsS0FBSCxDQUFTcUcsT0FBVCxHQUFtQixJQUFuQjtBQUNBcEgsVUFBRSxDQUFDcUksV0FBSCxHQUpNLENBSVk7QUFDbEI7QUFDRDs7QUFFRDtBQUNBckksTUFBRSxDQUFDZ0ksV0FBSCxDQUFlQyxZQUFmO0FBQ0E7QUFDRCxDQTNDRDs7QUE2Q0E7QUFDQW5JLFFBQVEsQ0FBQ29CLFNBQVQsQ0FBbUJrSSxNQUFuQixHQUE0QixZQUFXO0FBQ3RDO0FBQ0EsTUFBSSxLQUFLbEosZUFBVCxFQUEwQjtBQUN6QixRQUFJMkMsSUFBSSxHQUFHLEtBQUs5QixLQUFMLENBQVc4QixJQUF0QjtBQUNBLFFBQUlBLElBQUksSUFBSSxLQUFLc0YsVUFBakIsRUFBNkI7QUFDNUJ0RixVQUFJLENBQUNDLEdBQUwsR0FBVyxLQUFLcUYsVUFBaEI7QUFDQXRGLFVBQUksQ0FBQ0csSUFBTCxHQUFZLEtBQUtvRixXQUFqQjtBQUNBO0FBQ0QsU0FBSzdGLGFBQUw7QUFDQTtBQUNEO0FBQ0EsTUFBSSxLQUFLcEMsYUFBVCxFQUF3QjtBQUN2QixTQUFLWSxLQUFMLENBQVc4QixJQUFYLENBQWdCQyxHQUFoQjtBQUNBLFNBQUtrRixXQUFMLENBQWlCLEtBQWpCO0FBQ0E7QUFDRCxDQWZEOztBQWlCQTtBQUNBbEksUUFBUSxDQUFDb0IsU0FBVCxDQUFtQmdJLFNBQW5CLEdBQStCLFlBQVc7QUFDekMsT0FBS25JLEtBQUwsQ0FBVzJDLEtBQVgsQ0FBaUIvQyxHQUFqQixJQUF3QixLQUFLSSxLQUFMLENBQVcyQyxLQUFYLENBQWlCRCxNQUF6QyxJQUFtRCxLQUFLMUMsS0FBTCxDQUFXMkMsS0FBWCxDQUFpQkQsTUFBakIsQ0FBd0IsSUFBeEIsQ0FBbkQ7QUFDQSxDQUZEOztBQUlBO0FBQ0EzRCxRQUFRLENBQUNvQixTQUFULENBQW1CbUgsV0FBbkIsR0FBaUMsWUFBVztBQUMzQyxPQUFLdEgsS0FBTCxDQUFXMkMsS0FBWCxDQUFpQi9DLEdBQWpCLElBQXdCLEtBQUtJLEtBQUwsQ0FBVzJDLEtBQVgsQ0FBaUJELE1BQXpDLElBQW1ELEtBQUsxQyxLQUFMLENBQVcyQyxLQUFYLENBQWlCRCxNQUFqQixDQUF3QixLQUF4QixDQUFuRDtBQUNBLENBRkQ7O0FBSUE7QUFDQTNELFFBQVEsQ0FBQ29CLFNBQVQsQ0FBbUJ3RyxVQUFuQixHQUFnQyxZQUFXO0FBQzFDLE1BQUksQ0FBQyxLQUFLMkIsVUFBVixFQUFzQjtBQUNyQixTQUFLQSxVQUFMLEdBQWtCLElBQWxCO0FBQ0EsU0FBS3RJLEtBQUwsQ0FBV3NDLEtBQVgsQ0FBaUJJLE1BQWpCLElBQTJCLEtBQUsxQyxLQUFMLENBQVdzQyxLQUFYLENBQWlCSSxNQUFqQixDQUF3QixJQUF4QixDQUEzQjtBQUNBO0FBQ0QsQ0FMRDs7QUFPQTtBQUNBM0QsUUFBUSxDQUFDb0IsU0FBVCxDQUFtQnlHLFVBQW5CLEdBQWdDLFlBQVc7QUFDMUMsTUFBSSxLQUFLMEIsVUFBVCxFQUFxQjtBQUNwQixTQUFLQSxVQUFMLEdBQWtCLEtBQWxCO0FBQ0EsU0FBS3RJLEtBQUwsQ0FBV3NDLEtBQVgsQ0FBaUJJLE1BQWpCLElBQTJCLEtBQUsxQyxLQUFMLENBQVdzQyxLQUFYLENBQWlCSSxNQUFqQixDQUF3QixLQUF4QixDQUEzQjtBQUNBO0FBQ0QsQ0FMRDs7QUFPQTtBQUNBM0QsUUFBUSxDQUFDb0IsU0FBVCxDQUFtQnNELFlBQW5CLEdBQWtDLFlBQVc7QUFDNUMsU0FBTyxLQUFLVyxTQUFMLElBQWtCLENBQXpCO0FBQ0EsQ0FGRDs7QUFJQTtBQUNBckYsUUFBUSxDQUFDb0IsU0FBVCxDQUFtQnFHLFlBQW5CLEdBQWtDLFVBQVNqQyxDQUFULEVBQVk7QUFDN0MsT0FBS0gsU0FBTCxHQUFpQkcsQ0FBakI7QUFDQSxDQUZEOztBQUlBO0FBQ0F4RixRQUFRLENBQUNvQixTQUFULENBQW1Cb0ksUUFBbkIsR0FBOEIsVUFBU2hFLENBQVQsRUFBWVIsQ0FBWixFQUFlO0FBQzVDLE9BQUt5RSxVQUFMLElBQW1CLEtBQUtBLFVBQUwsQ0FBZ0JqRSxDQUFoQixFQUFtQlIsQ0FBbkIsQ0FBbkIsQ0FENEMsQ0FDSDtBQUN6QyxDQUZEOztBQUlBO0FBQ0FoRixRQUFRLENBQUNvQixTQUFULENBQW1Cc0ksYUFBbkIsR0FBbUMsVUFBU0QsVUFBVCxFQUFxQjtBQUN2RCxPQUFLQSxVQUFMLEdBQWtCQSxVQUFsQjtBQUNBLENBRkQ7O0FBSUE7QUFDQXpKLFFBQVEsQ0FBQ29CLFNBQVQsQ0FBbUI0RyxlQUFuQixHQUFxQyxZQUFXO0FBQy9DLFNBQU8sS0FBSzJCLGVBQUwsS0FBeUIsS0FBS0MsZUFBTCxFQUF6QixHQUFrRCxLQUFLbEYsWUFBTCxFQUF6RDtBQUNBLENBRkQ7O0FBSUE7Ozs7Ozs7QUFPQTFFLFFBQVEsQ0FBQ29CLFNBQVQsQ0FBbUJ5SSxPQUFuQixHQUE2QixVQUFTQyxJQUFULEVBQWVDLEdBQWYsRUFBb0J2SixRQUFwQixFQUE4QndFLENBQTlCLEVBQWlDdUIsSUFBakMsRUFBdUM7QUFDbkUsTUFBSUosSUFBSSxHQUFHNEQsR0FBRyxHQUFHRCxJQUFqQixDQURtRSxDQUM1QztBQUN2QixNQUFJOUUsQ0FBQyxLQUFLLENBQU4sSUFBV21CLElBQUksS0FBSyxDQUF4QixFQUEyQjtBQUMxQjNGLFlBQVEsSUFBSUEsUUFBUSxDQUFDdUosR0FBRCxDQUFwQjtBQUNBO0FBQ0E7QUFDRC9FLEdBQUMsR0FBR0EsQ0FBQyxJQUFJLEdBQVQsQ0FObUUsQ0FNckQ7QUFDZHVCLE1BQUksR0FBR0EsSUFBSSxJQUFJLEVBQWYsQ0FQbUUsQ0FPaEQ7QUFDbkIsTUFBSXlELEtBQUssR0FBR2hGLENBQUMsR0FBR3VCLElBQWhCLENBUm1FLENBUTdDO0FBQ3RCLE1BQUkwRCxJQUFJLEdBQUc5RCxJQUFJLEdBQUc2RCxLQUFsQixDQVRtRSxDQVMxQztBQUN6QixNQUFJRSxDQUFDLEdBQUcsQ0FBUixDQVZtRSxDQVV4RDtBQUNYLE1BQUlDLEtBQUssR0FBR0MsV0FBVyxDQUFDLFlBQVc7QUFDbEMsUUFBSUYsQ0FBQyxHQUFHRixLQUFLLEdBQUcsQ0FBaEIsRUFBbUI7QUFDbEJGLFVBQUksSUFBSUcsSUFBUjtBQUNBekosY0FBUSxJQUFJQSxRQUFRLENBQUNzSixJQUFELEVBQU9LLEtBQVAsQ0FBcEI7QUFDQUQsT0FBQztBQUNELEtBSkQsTUFJTztBQUNOMUosY0FBUSxJQUFJQSxRQUFRLENBQUN1SixHQUFELEVBQU1JLEtBQU4sQ0FBcEIsQ0FETSxDQUM0QjtBQUNsQ0UsbUJBQWEsQ0FBQ0YsS0FBRCxDQUFiO0FBQ0E7QUFDRCxHQVRzQixFQVNwQjVELElBVG9CLENBQXZCO0FBVUEsQ0FyQkQ7O0FBdUJBO0FBQ0F2RyxRQUFRLENBQUNvQixTQUFULENBQW1Cd0ksZUFBbkIsR0FBcUMsVUFBU1UsTUFBVCxFQUFpQjtBQUNyRCxNQUFJQyxDQUFDLEdBQUcsS0FBS0MsWUFBTCxJQUFxQixDQUE3QjtBQUNBLE1BQUlELENBQUMsS0FBSyxDQUFOLElBQVdELE1BQU0sS0FBSyxJQUExQixFQUFnQyxDQUFFO0FBQ2pDQyxLQUFDLEdBQUcsS0FBSzFGLGFBQUwsRUFBSjtBQUNBO0FBQ0QsU0FBTzBGLENBQVA7QUFDQSxDQU5EO0FBT0F2SyxRQUFRLENBQUNvQixTQUFULENBQW1CcUosZUFBbkIsR0FBcUMsVUFBU0YsQ0FBVCxFQUFZO0FBQ2hELE9BQUtDLFlBQUwsR0FBb0JELENBQXBCO0FBQ0EsQ0FGRDs7QUFJQTtBQUNBdkssUUFBUSxDQUFDb0IsU0FBVCxDQUFtQnVJLGVBQW5CLEdBQXFDLFlBQVc7QUFDL0MsU0FBTyxLQUFLakMsWUFBTCxJQUFxQixDQUE1QjtBQUNBLENBRkQ7QUFHQTFILFFBQVEsQ0FBQ29CLFNBQVQsQ0FBbUI2RixlQUFuQixHQUFxQyxVQUFTc0QsQ0FBVCxFQUFZO0FBQ2hELE9BQUs3QyxZQUFMLEdBQW9CNkMsQ0FBcEI7QUFDQSxDQUZEOztBQUlBO0FBQ0F2SyxRQUFRLENBQUNvQixTQUFULENBQW1CeUQsYUFBbkIsR0FBbUMsWUFBVztBQUM3QyxTQUFPLEtBQUs2RixVQUFMLElBQW1CLENBQTFCO0FBQ0EsQ0FGRDtBQUdBMUssUUFBUSxDQUFDb0IsU0FBVCxDQUFtQnVKLGFBQW5CLEdBQW1DLFVBQVNKLENBQVQsRUFBWTtBQUM5QyxPQUFLRyxVQUFMLEdBQWtCSCxDQUFsQjtBQUNBLENBRkQ7O0FBSUE7QUFDQXZLLFFBQVEsQ0FBQ29CLFNBQVQsQ0FBbUI4RSxjQUFuQixHQUFvQyxVQUFTM0IsQ0FBVCxFQUFZO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLE1BQUlBLENBQUMsSUFBSUEsQ0FBQyxDQUFDcUcsVUFBUCxJQUFxQixDQUFDckcsQ0FBQyxDQUFDc0csZ0JBQTVCLEVBQThDdEcsQ0FBQyxDQUFDMkIsY0FBRjtBQUM5QyxDQUxEOztBQU9BO0FBQ0FsRyxRQUFRLENBQUNvQixTQUFULENBQW1CaUcsU0FBbkIsR0FBK0IsVUFBU3ZFLFFBQVQsRUFBbUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtRWpELENBbkVEIiwiZmlsZSI6IjM4My5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIG1lc2Nyb2xsLXVuaVxyXG4gKiB2ZXJzaW9uIDEuMS43XHJcbiAqIDIwMTktMTAtMTUgd2VuanVcclxuICogaHR0cDovL3d3dy5tZXNjcm9sbC5jb21cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNZVNjcm9sbChvcHRpb25zKSB7XHJcblx0bGV0IG1lID0gdGhpcztcclxuXHRtZS52ZXJzaW9uID0gJzEuMS43JzsgLy8gbWVzY3JvbGzniYjmnKzlj7dcclxuXHRtZS5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8g6YWN572uXHJcblxyXG5cdG1lLmlzRG93blNjcm9sbGluZyA9IGZhbHNlOyAvLyDmmK/lkKblnKjmiafooYzkuIvmi4nliLfmlrDnmoTlm57osINcclxuXHRtZS5pc1VwU2Nyb2xsaW5nID0gZmFsc2U7IC8vIOaYr+WQpuWcqOaJp+ihjOS4iuaLieWKoOi9veeahOWbnuiwg1xyXG5cdGxldCBoYXNEb3duQ2FsbGJhY2sgPSBtZS5vcHRpb25zLmRvd24gJiYgbWUub3B0aW9ucy5kb3duLmNhbGxiYWNrOyAvLyDmmK/lkKbphY3nva7kuoZkb3du55qEY2FsbGJhY2tcclxuXHJcblx0Ly8g5Yid5aeL5YyW5LiL5ouJ5Yi35pawXHJcblx0bWUuaW5pdERvd25TY3JvbGwoKTtcclxuXHQvLyDliJ3lp4vljJbkuIrmi4nliqDovb0s5YiZ5Yid5aeL5YyWXHJcblx0bWUuaW5pdFVwU2Nyb2xsKCk7XHJcblxyXG5cdC8vIOiHquWKqOWKoOi9vVxyXG5cdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IC8vIOW+heS4u+e6v+eoi+aJp+ihjOWujOavleWGjeaJp+ihjCzpgb/lhY1uZXcgTWVTY3JvbGzmnKrliJ3lp4vljJYs5Zyo5Zue6LCD6I635Y+W5LiN5YiwbWVzY3JvbGznmoTlrp7kvotcclxuXHRcdC8vIOiHquWKqOinpuWPkeS4i+aLieWIt+aWsCAo5Y+q5pyJ6YWN572u5LqGZG93bueahGNhbGxiYWNr5omN6Ieq5Yqo6Kem5Y+R5LiL5ouJ5Yi35pawKVxyXG5cdFx0aWYgKG1lLm9wdERvd24udXNlICYmIG1lLm9wdERvd24uYXV0byAmJiBoYXNEb3duQ2FsbGJhY2spIHtcclxuXHRcdFx0aWYgKG1lLm9wdERvd24uYXV0b1Nob3dMb2FkaW5nKSB7XHJcblx0XHRcdFx0bWUudHJpZ2dlckRvd25TY3JvbGwoKTsgLy8g5pi+56S65LiL5ouJ6L+b5bqmLOaJp+ihjOS4i+aLieWbnuiwg1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdG1lLm9wdERvd24uY2FsbGJhY2sgJiYgbWUub3B0RG93bi5jYWxsYmFjayhtZSk7IC8vIOS4jeaYvuekuuS4i+aLiei/m+W6piznm7TmjqXmiafooYzkuIvmi4nlm57osINcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Ly8g6Ieq5Yqo6Kem5Y+R5LiK5ouJ5Yqg6L29XHJcblx0XHRtZS5vcHRVcC51c2UgJiYgbWUub3B0VXAuYXV0byAmJiAhbWUuaXNVcEF1dG9Mb2FkICYmIG1lLnRyaWdnZXJVcFNjcm9sbCgpO1xyXG5cdH0sIDMwKTsgLy8g6ZyA6K6pbWUub3B0RG93bi5pbml0ZWTlkoxtZS5vcHRVcC5pbml0ZWTlhYjmiafooYxcclxufVxyXG5cclxuLyog6YWN572u5Y+C5pWwOuS4i+aLieWIt+aWsCAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuZXh0ZW5kRG93blNjcm9sbCA9IGZ1bmN0aW9uKG9wdERvd24pIHtcclxuXHQvLyDkuIvmi4nliLfmlrDnmoTphY3nva5cclxuXHRNZVNjcm9sbC5leHRlbmQob3B0RG93biwge1xyXG5cdFx0dXNlOiB0cnVlLCAvLyDmmK/lkKblkK/nlKjkuIvmi4nliLfmlrA7IOm7mOiupHRydWVcclxuXHRcdGF1dG86IHRydWUsIC8vIOaYr+WQpuWcqOWIneWni+WMluWujOavleS5i+WQjuiHquWKqOaJp+ihjOS4i+aLieWIt+aWsOeahOWbnuiwgzsg6buY6K6kdHJ1ZVxyXG5cdFx0YXV0b1Nob3dMb2FkaW5nOiBmYWxzZSwgLy8g5aaC5p6c6K6+572uYXV0bz10cnVlKOWcqOWIneWni+WMluWujOavleS5i+WQjuiHquWKqOaJp+ihjOS4i+aLieWIt+aWsOeahOWbnuiwgyks6YKj5LmI5piv5ZCm5pi+56S65LiL5ouJ5Yi35paw55qE6L+b5bqmOyDpu5jorqRmYWxzZVxyXG5cdFx0aXNMb2NrOiBmYWxzZSwgLy8g5piv5ZCm6ZSB5a6a5LiL5ouJ5Yi35pawLOm7mOiupGZhbHNlO1xyXG5cdFx0b2Zmc2V0OiA4MCwgLy8g5Zyo5YiX6KGo6aG26YOoLOS4i+aLieWkp+S6jjgwcHgs5p2+5omL5Y2z5Y+v6Kem5Y+R5LiL5ouJ5Yi35paw55qE5Zue6LCDXHJcblx0XHRzdGFydFRvcDogMTAwLCAvLyBzY3JvbGwtdmlld+a7muWKqOWIsOmhtumDqOaXtizmraTml7bnmoRzY3JvbGwtdG9w5LiN5LiA5a6a5Li6MCwg5q2k5YC855So5LqO5o6n5Yi25pyA5aSn55qE6K+v5beuXHJcblx0XHRmcHM6IDQwLCAvLyDkuIvmi4noioLmtYEgKOWAvOi2iuWkp+avj+enkuWIt+aWsOmikeeOh+i2iumrmClcclxuXHRcdGluT2Zmc2V0UmF0ZTogMSwgLy8g5Zyo5YiX6KGo6aG26YOoLOS4i+aLieeahOi3neemu+Wwj+S6jm9mZnNldOaXtizmlLnlj5jkuIvmi4nljLrln5/pq5jluqbmr5Tkvos75YC85bCP5LqOMeS4lOi2iuaOpei/kTAs6auY5bqm5Y+Y5YyW6LaK5bCPLOihqOeOsOS4uui2iuW+gOS4i+i2iumavuaLiVxyXG5cdFx0b3V0T2Zmc2V0UmF0ZTogMC4yLCAvLyDlnKjliJfooajpobbpg6gs5LiL5ouJ55qE6Led56a75aSn5LqOb2Zmc2V05pe2LOaUueWPmOS4i+aLieWMuuWfn+mrmOW6puavlOS+izvlgLzlsI/kuo4x5LiU6LaK5o6l6L+RMCzpq5jluqblj5jljJbotorlsI8s6KGo546w5Li66LaK5b6A5LiL6LaK6Zq+5ouJXHJcblx0XHRib3R0b21PZmZzZXQ6IDIwLCAvLyDlvZPmiYvmjId0b3VjaG1vdmXkvY3nva7lnKjot53nprtib2R55bqV6YOoMjBweOiMg+WbtOWGheeahOaXtuWAmee7k+adn+S4iuaLieWIt+aWsCzpgb/lhY1XZWJ2aWV35bWM5aWX5a+86Ie0dG91Y2hlbmTkuovku7bkuI3miafooYxcclxuXHRcdG1pbkFuZ2xlOiA0NSwgLy8g5ZCR5LiL5ruR5Yqo5pyA5bCR5YGP56e755qE6KeS5bqmLOWPluWAvOWMuumXtCAgWzAsOTBdO+m7mOiupDQ15bqmLOWNs+WQkeS4i+a7keWKqOeahOinkuW6puWkp+S6jjQ15bqm5YiZ6Kem5Y+R5LiL5ouJO+iAjOWwj+S6jjQ15bqmLOWwhuS4jeinpuWPkeS4i+aLiSzpgb/lhY3kuI7lt6blj7Pmu5HliqjnmoTova7mkq3nrYnnu4Tku7blhrLnqoE7XHJcblx0XHR0ZXh0SW5PZmZzZXQ6ICfkuIvmi4nliLfmlrAnLCAvLyDkuIvmi4nnmoTot53nprvlnKhvZmZzZXTojIPlm7TlhoXnmoTmj5DnpLrmlofmnKxcclxuXHRcdHRleHRPdXRPZmZzZXQ6ICfph4rmlL7mm7TmlrAnLCAvLyDkuIvmi4nnmoTot53nprvlpKfkuo5vZmZzZXTojIPlm7TnmoTmj5DnpLrmlofmnKxcclxuXHRcdHRleHRMb2FkaW5nOiAn5Yqg6L295LitIC4uLicsIC8vIOWKoOi9veS4reeahOaPkOekuuaWh+acrFxyXG5cdFx0aW5pdGVkOiBudWxsLCAvLyDkuIvmi4nliLfmlrDliJ3lp4vljJblrozmr5XnmoTlm57osINcclxuXHRcdGluT2Zmc2V0OiBudWxsLCAvLyDkuIvmi4nnmoTot53nprvov5vlhaVvZmZzZXTojIPlm7TlhoXpgqPkuIDliLvnmoTlm57osINcclxuXHRcdG91dE9mZnNldDogbnVsbCwgLy8g5LiL5ouJ55qE6Led56a75aSn5LqOb2Zmc2V06YKj5LiA5Yi755qE5Zue6LCDXHJcblx0XHRvbk1vdmluZzogbnVsbCwgLy8g5LiL5ouJ6L+H56iL5Lit55qE5Zue6LCDLOa7keWKqOi/h+eoi+S4gOebtOWcqOaJp+ihjDsgcmF0ZeS4i+aLieWMuuWfn+W9k+WJjemrmOW6puS4juaMh+Wumui3neemu+eahOavlOWAvChpbk9mZnNldDogcmF0ZTwxOyBvdXRPZmZzZXQ6IHJhdGU+PTEpOyBkb3duSGlnaHTlvZPliY3kuIvmi4nljLrln5/nmoTpq5jluqZcclxuXHRcdGJlZm9yZUxvYWRpbmc6IG51bGwsIC8vIOWHhuWkh+inpuWPkeS4i+aLieWIt+aWsOeahOWbnuiwgzog5aaC5p6ccmV0dXJuIHRydWUs5bCG5LiN6Kem5Y+Rc2hvd0xvYWRpbmflkoxjYWxsYmFja+Wbnuiwgzsg5bi455So5p2l5a6M5YWo6Ieq5a6a5LmJ5LiL5ouJ5Yi35pawLCDlj4LogIPmoYjkvovjgJDmt5jlrp0gdjYuOC4w44CRXHJcblx0XHRzaG93TG9hZGluZzogbnVsbCwgLy8g5pi+56S65LiL5ouJ5Yi35paw6L+b5bqm55qE5Zue6LCDXHJcblx0XHRhZnRlckxvYWRpbmc6IG51bGwsIC8vIOWHhuWkh+e7k+adn+S4i+aLieeahOWbnuiwgy4g6L+U5Zue57uT5p2f5LiL5ouJ55qE5bu25pe25omn6KGM5pe26Ze0LOm7mOiupDBtczsg5bi455So5LqO57uT5p2f5LiL5ouJ5LmL5YmN5YaN5pi+56S65Y+m5aSW5LiA5bCP5q615Yqo55S7LOaJjeWOu+makOiXj+S4i+aLieWIt+aWsOeahOWcuuaZrywg5Y+C6ICD5qGI5L6L44CQZG90SnVtcOOAkVxyXG5cdFx0ZW5kRG93blNjcm9sbDogbnVsbCwgLy8g57uT5p2f5LiL5ouJ5Yi35paw55qE5Zue6LCDXHJcblx0XHRjYWxsYmFjazogZnVuY3Rpb24obWVzY3JvbGwpIHtcclxuXHRcdFx0Ly8g5LiL5ouJ5Yi35paw55qE5Zue6LCDO+m7mOiupOmHjee9ruS4iuaLieWKoOi9veWIl+ihqOS4uuesrOS4gOmhtVxyXG5cdFx0XHRtZXNjcm9sbC5yZXNldFVwU2Nyb2xsKCk7XHJcblx0XHR9XHJcblx0fSlcclxufVxyXG5cclxuLyog6YWN572u5Y+C5pWwOuS4iuaLieWKoOi9vSAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuZXh0ZW5kVXBTY3JvbGwgPSBmdW5jdGlvbihvcHRVcCkge1xyXG5cdC8vIOS4iuaLieWKoOi9veeahOmFjee9rlxyXG5cdE1lU2Nyb2xsLmV4dGVuZChvcHRVcCwge1xyXG5cdFx0dXNlOiB0cnVlLCAvLyDmmK/lkKblkK/nlKjkuIrmi4nliqDovb07IOm7mOiupHRydWVcclxuXHRcdGF1dG86IHRydWUsIC8vIOaYr+WQpuWcqOWIneWni+WMluWujOavleS5i+WQjuiHquWKqOaJp+ihjOS4iuaLieWKoOi9veeahOWbnuiwgzsg6buY6K6kdHJ1ZVxyXG5cdFx0aXNMb2NrOiBmYWxzZSwgLy8g5piv5ZCm6ZSB5a6a5LiK5ouJ5Yqg6L29LOm7mOiupGZhbHNlO1xyXG5cdFx0aXNCb3RoOiB0cnVlLCAvLyDkuIrmi4nliqDovb3ml7Ys5aaC5p6c5ruR5Yqo5Yiw5YiX6KGo6aG26YOo5piv5ZCm5Y+v5Lul5ZCM5pe26Kem5Y+R5LiL5ouJ5Yi35pawO+m7mOiupHRydWUs5Lik6ICF5Y+v5ZCM5pe26Kem5Y+RO1xyXG5cdFx0aXNCb3VuY2U6IGZhbHNlLCAvLyDpu5jorqTnpoHmraLmqaHnmq7nrYvnmoTlm57lvLnmlYjmnpwsIOW/heivu+S6i+mhuTogaHR0cDovL3d3dy5tZXNjcm9sbC5jb20vcWEuaHRtbD92PTE5MDcyNSNxMjVcclxuXHRcdGNhbGxiYWNrOiBudWxsLCAvLyDkuIrmi4nliqDovb3nmoTlm57osIM7ZnVuY3Rpb24ocGFnZSxtZXNjcm9sbCl7IH1cclxuXHRcdHBhZ2U6IHtcclxuXHRcdFx0bnVtOiAwLCAvLyDlvZPliY3pobXnoIEs6buY6K6kMCzlm57osIPkuYvliY3kvJrliqAxLOWNs2NhbGxiYWNrKHBhZ2Up5Lya5LuOMeW8gOWni1xyXG5cdFx0XHRzaXplOiAxMCwgLy8g5q+P6aG15pWw5o2u55qE5pWw6YePXHJcblx0XHRcdHRpbWU6IG51bGwgLy8g5Yqg6L2956ys5LiA6aG15pWw5o2u5pyN5Yqh5Zmo6L+U5Zue55qE5pe26Ze0OyDpmLLmraLnlKjmiLfnv7vpobXml7Ys5ZCO5Y+w5paw5aKe5LqG5pWw5o2u5LuO6ICM5a+86Ie05LiL5LiA6aG15pWw5o2u6YeN5aSNO1xyXG5cdFx0fSxcclxuXHRcdG5vTW9yZVNpemU6IDUsIC8vIOWmguaenOWIl+ihqOW3suaXoOaVsOaNrizlj6/orr7nva7liJfooajnmoTmgLvmlbDph4/opoHlpKfkuo7nrYnkuo415p2h5omN5pi+56S65peg5pu05aSa5pWw5o2uO+mBv+WFjeWIl+ihqOaVsOaNrui/h+WwkSjmr5TlpoLlj6rmnInkuIDmnaHmlbDmja4pLOaYvuekuuaXoOabtOWkmuaVsOaNruS8muS4jeWlveeci1xyXG5cdFx0b2Zmc2V0OiA4MCwgLy8g6Led5bqV6YOo5aSa6L+c5pe2LOinpuWPkXVwQ2FsbGJhY2tcclxuXHRcdHRleHRMb2FkaW5nOiAn5Yqg6L295LitIC4uLicsIC8vIOWKoOi9veS4reeahOaPkOekuuaWh+acrFxyXG5cdFx0dGV4dE5vTW9yZTogJy0tIEVORCAtLScsIC8vIOayoeacieabtOWkmuaVsOaNrueahOaPkOekuuaWh+acrFxyXG5cdFx0aW5pdGVkOiBudWxsLCAvLyDliJ3lp4vljJblrozmr5XnmoTlm57osINcclxuXHRcdHNob3dMb2FkaW5nOiBudWxsLCAvLyDmmL7npLrliqDovb3kuK3nmoTlm57osINcclxuXHRcdHNob3dOb01vcmU6IG51bGwsIC8vIOaYvuekuuaXoOabtOWkmuaVsOaNrueahOWbnuiwg1xyXG5cdFx0aGlkZVVwU2Nyb2xsOiBudWxsLCAvLyDpmpDol4/kuIrmi4nliqDovb3nmoTlm57osINcclxuXHRcdHRvVG9wOiB7XHJcblx0XHRcdC8vIOWbnuWIsOmhtumDqOaMiemSrizpnIDphY3nva5zcmPmiY3mmL7npLpcclxuXHRcdFx0c3JjOiBudWxsLCAvLyDlm77niYfot6/lvoQs6buY6K6kbnVsbCAo5bu66K6u5YaZ5oiQ572R57uc5Zu+LOS4jeW/heiAg+iZkeebuOWvuei3r+W+hClcclxuXHRcdFx0b2Zmc2V0OiAxMDAwLCAvLyDliJfooajmu5rliqjlpJrlsJHot53nprvmiY3mmL7npLrlm57liLDpobbpg6jmjInpkq4s6buY6K6kMTAwMFxyXG5cdFx0XHRkdXJhdGlvbjogMzAwLCAvLyDlm57liLDpobbpg6jnmoTliqjnlLvml7bplb8s6buY6K6kMzAwbXNcclxuXHRcdFx0YnRuQ2xpY2s6IG51bGwsIC8vIOeCueWHu+aMiemSrueahOWbnuiwg1xyXG5cdFx0XHRvblNob3c6IG51bGwgLy8g5piv5ZCm5pi+56S655qE5Zue6LCDXHJcblx0XHR9LFxyXG5cdFx0ZW1wdHk6IHtcclxuXHRcdFx0dXNlOiB0cnVlLCAvLyDmmK/lkKbmmL7npLrnqbrluIPlsYBcclxuXHRcdFx0aWNvbjogbnVsbCwgLy8g5Zu+5qCH6Lev5b6EXHJcblx0XHRcdHRpcDogJ34g5pqC5peg55u45YWz5pWw5o2uIH4nLCAvLyDmj5DnpLpcclxuXHRcdFx0YnRuVGV4dDogJycsIC8vIOaMiemSrlxyXG5cdFx0XHRidG5DbGljazogbnVsbCwgLy8g54K55Ye75oyJ6ZKu55qE5Zue6LCDXHJcblx0XHRcdG9uU2hvdzogbnVsbCAvLyDmmK/lkKbmmL7npLrnmoTlm57osINcclxuXHRcdH0sXHJcblx0XHRvblNjcm9sbDogZmFsc2UgLy8g5piv5ZCm55uR5ZCs5rua5Yqo5LqL5Lu2XHJcblx0fSlcclxufVxyXG5cclxuLyog6YWN572u5Y+C5pWwICovXHJcbk1lU2Nyb2xsLmV4dGVuZCA9IGZ1bmN0aW9uKHVzZXJPcHRpb24sIGRlZmF1bHRPcHRpb24pIHtcclxuXHRpZiAoIXVzZXJPcHRpb24pIHJldHVybiBkZWZhdWx0T3B0aW9uO1xyXG5cdGZvciAobGV0IGtleSBpbiBkZWZhdWx0T3B0aW9uKSB7XHJcblx0XHRpZiAodXNlck9wdGlvbltrZXldID09IG51bGwpIHtcclxuXHRcdFx0bGV0IGRlZiA9IGRlZmF1bHRPcHRpb25ba2V5XTtcclxuXHRcdFx0aWYgKGRlZiAhPSBudWxsICYmIHR5cGVvZiBkZWYgPT09ICdvYmplY3QnKSB7XHJcblx0XHRcdFx0dXNlck9wdGlvbltrZXldID0gTWVTY3JvbGwuZXh0ZW5kKHt9LCBkZWYpOyAvLyDmt7HluqbljLnphY1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR1c2VyT3B0aW9uW2tleV0gPSBkZWY7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIHVzZXJPcHRpb25ba2V5XSA9PT0gJ29iamVjdCcpIHtcclxuXHRcdFx0TWVTY3JvbGwuZXh0ZW5kKHVzZXJPcHRpb25ba2V5XSwgZGVmYXVsdE9wdGlvbltrZXldKTsgLy8g5rex5bqm5Yy56YWNXHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiB1c2VyT3B0aW9uO1xyXG59XHJcblxyXG4vKiAtLS0tLS0t5Yid5aeL5YyW5LiL5ouJ5Yi35pawLS0tLS0tLSAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuaW5pdERvd25TY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuXHRsZXQgbWUgPSB0aGlzO1xyXG5cdC8vIOmFjee9ruWPguaVsFxyXG5cdG1lLm9wdERvd24gPSBtZS5vcHRpb25zLmRvd24gfHwge307XHJcblx0bWUuZXh0ZW5kRG93blNjcm9sbChtZS5vcHREb3duKTtcclxuXHJcblx0bWUuZG93bkhpZ2h0ID0gMDsgLy8g5LiL5ouJ5Yy65Z+f55qE6auY5bqmXHJcblxyXG5cdC8vIOWcqOmhtemdouS4reWKoOWFpeS4i+aLieW4g+WxgFxyXG5cdGlmIChtZS5vcHREb3duLnVzZSAmJiBtZS5vcHREb3duLmluaXRlZCkge1xyXG5cdFx0Ly8g5Yid5aeL5YyW5a6M5q+V55qE5Zue6LCDXHJcblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyAvLyDlvoXkuLvnur/nqIvmiafooYzlrozmr5Xlho3miafooYws6YG/5YWNbmV3IE1lU2Nyb2xs5pyq5Yid5aeL5YyWLOWcqOWbnuiwg+iOt+WPluS4jeWIsG1lc2Nyb2xs55qE5a6e5L6LXHJcblx0XHRcdG1lLm9wdERvd24uaW5pdGVkKG1lKTtcclxuXHRcdH0sIDApXHJcblx0fVxyXG59XHJcblxyXG4vKiDliJfooah0b3VjaHN0YXJ05LqL5Lu2ICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS50b3VjaHN0YXJ0RXZlbnQgPSBmdW5jdGlvbihlKSB7XHJcblx0aWYgKCF0aGlzLm9wdERvd24udXNlKSByZXR1cm47XHJcblxyXG5cdHRoaXMuc3RhcnRQb2ludCA9IHRoaXMuZ2V0UG9pbnQoZSk7IC8vIOiusOW9lei1t+eCuVxyXG5cdHRoaXMuc3RhcnRUb3AgPSB0aGlzLmdldFNjcm9sbFRvcCgpOyAvLyDorrDlvZXmraTml7bnmoTmu5rliqjmnaHkvY3nva5cclxuXHR0aGlzLmxhc3RQb2ludCA9IHRoaXMuc3RhcnRQb2ludDsgLy8g6YeN572u5LiK5qyhbW92ZeeahOeCuVxyXG5cdHRoaXMubWF4VG91Y2htb3ZlWSA9IHRoaXMuZ2V0Qm9keUhlaWdodCgpIC0gdGhpcy5vcHREb3duLmJvdHRvbU9mZnNldDsgLy8g5omL5oyH6Kem5pG455qE5pyA5aSn6IyD5Zu0KOWGmeWcqHRvdWNoc3RhcnTpgb/lhY1ib2R56I635Y+W6auY5bqm5Li6MOeahOaDheWGtSlcclxuXHR0aGlzLmluVG91Y2hlbmQgPSBmYWxzZTsgLy8g5qCH6K6w5LiN5pivdG91Y2hlbmRcclxufVxyXG5cclxuLyog5YiX6KGodG91Y2htb3Zl5LqL5Lu2ICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS50b3VjaG1vdmVFdmVudCA9IGZ1bmN0aW9uKGUpIHtcclxuXHRpZiAoIXRoaXMub3B0RG93bi51c2UpIHJldHVybjtcclxuXHRpZiAoIXRoaXMuc3RhcnRQb2ludCkgcmV0dXJuO1xyXG5cdGxldCBtZSA9IHRoaXM7XHJcblxyXG5cdC8vIOiKgua1gVxyXG5cdGxldCB0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblx0aWYgKG1lLm1vdmVUaW1lICYmIHQgLSBtZS5tb3ZlVGltZSA8IG1lLm1vdmVUaW1lRGlmZikgeyAvLyDlsI/kuo7oioLmtYHml7bpl7Qs5YiZ5LiN5aSE55CGXHJcblx0XHRyZXR1cm47XHJcblx0fSBlbHNlIHtcclxuXHRcdG1lLm1vdmVUaW1lID0gdFxyXG5cdFx0bWUubW92ZVRpbWVEaWZmID0gMTAwMCAvIG1lLm9wdERvd24uZnBzXHJcblx0fVxyXG5cclxuXHRsZXQgc2Nyb2xsVG9wID0gbWUuZ2V0U2Nyb2xsVG9wKCk7IC8vIOW9k+WJjea7muWKqOadoeeahOi3neemu1xyXG5cdGxldCBjdXJQb2ludCA9IG1lLmdldFBvaW50KGUpOyAvLyDlvZPliY3ngrlcclxuXHJcblx0bGV0IG1vdmVZID0gY3VyUG9pbnQueSAtIG1lLnN0YXJ0UG9pbnQueTsgLy8g5ZKM6LW354K55q+ULOenu+WKqOeahOi3neemuyzlpKfkuo4w5ZCR5LiL5ouJLOWwj+S6jjDlkJHkuIrmi4lcclxuXHJcblx0Ly8gKOWQkeS4i+aLiSYm5Zyo6aG26YOoKSBzY3JvbGwtdmlld+WcqOa7muWKqOaXtuS4jeS8muinpuWPkXRvdWNobW92ZSzlvZPop6bpobYv5bqVL+W3pi/lj7Pml7Ys5omN5Lya6Kem5Y+RdG91Y2htb3ZlXHJcblx0Ly8gc2Nyb2xsLXZpZXfmu5rliqjliLDpobbpg6jml7Ysc2Nyb2xsVG9w5LiN5LiA5a6a5Li6MDsg5ZyoaU9T55qEQVBQ5Litc2Nyb2xsVG9w5Y+v6IO95Li66LSf5pWwLOS4jeS4gOWumuWSjHN0YXJ0VG9w55u4562JXHJcblx0aWYgKG1vdmVZID4gMCAmJiAoc2Nyb2xsVG9wIDw9IDAgfHwgKHNjcm9sbFRvcCA8PSBtZS5vcHREb3duLnN0YXJ0VG9wICYmIHNjcm9sbFRvcCA9PT0gbWUuc3RhcnRUb3ApKSkge1xyXG5cdFx0Ly8g5Y+v5LiL5ouJ55qE5p2h5Lu2XHJcblx0XHRpZiAobWUub3B0RG93bi51c2UgJiYgIW1lLmluVG91Y2hlbmQgJiYgIW1lLmlzRG93blNjcm9sbGluZyAmJiAhbWUub3B0RG93bi5pc0xvY2sgJiYgKCFtZS5pc1VwU2Nyb2xsaW5nIHx8IChtZS5pc1VwU2Nyb2xsaW5nICYmXHJcblx0XHRcdFx0bWUub3B0VXAuaXNCb3RoKSkpIHtcclxuXHJcblx0XHRcdC8vIOS4i+aLieeahOinkuW6puaYr+WQpuWcqOmFjee9rueahOiMg+WbtOWGhVxyXG5cdFx0XHRsZXQgeCA9IE1hdGguYWJzKG1lLmxhc3RQb2ludC54IC0gY3VyUG9pbnQueCk7XHJcblx0XHRcdGxldCB5ID0gTWF0aC5hYnMobWUubGFzdFBvaW50LnkgLSBjdXJQb2ludC55KTtcclxuXHRcdFx0bGV0IHogPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XHJcblx0XHRcdGlmICh6ICE9PSAwKSB7XHJcblx0XHRcdFx0bGV0IGFuZ2xlID0gTWF0aC5hc2luKHkgLyB6KSAvIE1hdGguUEkgKiAxODA7IC8vIOS4pOeCueS5i+mXtOeahOinkuW6pizljLrpl7QgWzAsOTBdXHJcblx0XHRcdFx0aWYgKGFuZ2xlIDwgbWUub3B0RG93bi5taW5BbmdsZSkgcmV0dXJuOyAvLyDlpoLmnpzlsI/kuo7phY3nva7nmoTop5LluqYs5YiZ5LiN5b6A5LiL5omn6KGM5LiL5ouJ5Yi35pawXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIOWmguaenOaJi+aMh+eahOS9jee9rui2hei/h+mFjee9rueahOi3neemuyzliJnmj5DliY3nu5PmnZ/kuIvmi4ks6YG/5YWNV2Vidmlld+W1jOWll+WvvOiHtHRvdWNoZW5k5peg5rOV6Kem5Y+RXHJcblx0XHRcdGlmIChtZS5tYXhUb3VjaG1vdmVZID4gMCAmJiBjdXJQb2ludC55ID49IG1lLm1heFRvdWNobW92ZVkpIHtcclxuXHRcdFx0XHRtZS5pblRvdWNoZW5kID0gdHJ1ZTsgLy8g5qCH6K6w5omn6KGMdG91Y2hlbmRcclxuXHRcdFx0XHRtZS50b3VjaGVuZEV2ZW50KCk7IC8vIOaPkOWJjeinpuWPkXRvdWNoZW5kXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRtZS5wcmV2ZW50RGVmYXVsdChlKTsgLy8g6Zi75q2i6buY6K6k5LqL5Lu2XHJcblxyXG5cdFx0XHRsZXQgZGlmZiA9IGN1clBvaW50LnkgLSBtZS5sYXN0UG9pbnQueTsgLy8g5ZKM5LiK5qyh5q+ULOenu+WKqOeahOi3neemuyAo5aSn5LqOMOWQkeS4iyzlsI/kuo4w5ZCR5LiKKVxyXG5cclxuXHRcdFx0Ly8g5LiL5ouJ6Led56a7ICA8IOaMh+Wumui3neemu1xyXG5cdFx0XHRpZiAobWUuZG93bkhpZ2h0IDwgbWUub3B0RG93bi5vZmZzZXQpIHtcclxuXHRcdFx0XHRpZiAobWUubW92ZXR5cGUgIT09IDEpIHtcclxuXHRcdFx0XHRcdG1lLm1vdmV0eXBlID0gMTsgLy8g5Yqg5YWl5qCH6K6wLOS/neivgeWPquaJp+ihjOS4gOasoVxyXG5cdFx0XHRcdFx0bWUub3B0RG93bi5pbk9mZnNldCAmJiBtZS5vcHREb3duLmluT2Zmc2V0KG1lKTsgLy8g6L+b5YWl5oyH5a6a6Led56a76IyD5Zu05YaF6YKj5LiA5Yi755qE5Zue6LCDLOWPquaJp+ihjOS4gOasoVxyXG5cdFx0XHRcdFx0bWUuaXNNb3ZlRG93biA9IHRydWU7IC8vIOagh+iusOS4i+aLieWMuuWfn+mrmOW6puaUueWPmCzlnKh0b3VjaGVuZOmHjee9ruWbnuadpVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRtZS5kb3duSGlnaHQgKz0gZGlmZiAqIG1lLm9wdERvd24uaW5PZmZzZXRSYXRlOyAvLyDotorlvoDkuIss6auY5bqm5Y+Y5YyW6LaK5bCPXHJcblxyXG5cdFx0XHRcdC8vIOaMh+Wumui3neemuyAgPD0g5LiL5ouJ6Led56a7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aWYgKG1lLm1vdmV0eXBlICE9PSAyKSB7XHJcblx0XHRcdFx0XHRtZS5tb3ZldHlwZSA9IDI7IC8vIOWKoOWFpeagh+iusCzkv53or4Hlj6rmiafooYzkuIDmrKFcclxuXHRcdFx0XHRcdG1lLm9wdERvd24ub3V0T2Zmc2V0ICYmIG1lLm9wdERvd24ub3V0T2Zmc2V0KG1lKTsgLy8g5LiL5ouJ6LaF6L+H5oyH5a6a6Led56a76YKj5LiA5Yi755qE5Zue6LCDLOWPquaJp+ihjOS4gOasoVxyXG5cdFx0XHRcdFx0bWUuaXNNb3ZlRG93biA9IHRydWU7IC8vIOagh+iusOS4i+aLieWMuuWfn+mrmOW6puaUueWPmCzlnKh0b3VjaGVuZOmHjee9ruWbnuadpVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoZGlmZiA+IDApIHsgLy8g5ZCR5LiL5ouJXHJcblx0XHRcdFx0XHRtZS5kb3duSGlnaHQgKz0gTWF0aC5yb3VuZChkaWZmICogbWUub3B0RG93bi5vdXRPZmZzZXRSYXRlKTsgLy8g6LaK5b6A5LiLLOmrmOW6puWPmOWMlui2iuWwj1xyXG5cdFx0XHRcdH0gZWxzZSB7IC8vIOWQkeS4iuaUtlxyXG5cdFx0XHRcdFx0bWUuZG93bkhpZ2h0ICs9IGRpZmY7IC8vIOWQkeS4iuaUtuWbnumrmOW6pizliJnlkJHkuIrmu5HlpJrlsJHmlLblpJrlsJHpq5jluqZcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGxldCByYXRlID0gbWUuZG93bkhpZ2h0IC8gbWUub3B0RG93bi5vZmZzZXQ7IC8vIOS4i+aLieWMuuWfn+W9k+WJjemrmOW6puS4juaMh+Wumui3neemu+eahOavlOWAvFxyXG5cdFx0XHRtZS5vcHREb3duLm9uTW92aW5nICYmIG1lLm9wdERvd24ub25Nb3ZpbmcobWUsIHJhdGUsIG1lLmRvd25IaWdodCk7IC8vIOS4i+aLiei/h+eoi+S4reeahOWbnuiwgyzkuIDnm7TlnKjmiafooYxcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdG1lLmxhc3RQb2ludCA9IGN1clBvaW50OyAvLyDorrDlvZXmnKzmrKHnp7vliqjnmoTngrlcclxufVxyXG5cclxuLyog5YiX6KGodG91Y2hlbmTkuovku7YgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnRvdWNoZW5kRXZlbnQgPSBmdW5jdGlvbihlKSB7XHJcblx0aWYgKCF0aGlzLm9wdERvd24udXNlKSByZXR1cm47XHJcblx0Ly8g5aaC5p6c5LiL5ouJ5Yy65Z+f6auY5bqm5bey5pS55Y+YLOWImemcgOmHjee9ruWbnuadpVxyXG5cdGlmICh0aGlzLmlzTW92ZURvd24pIHtcclxuXHRcdGlmICh0aGlzLmRvd25IaWdodCA+PSB0aGlzLm9wdERvd24ub2Zmc2V0KSB7XHJcblx0XHRcdC8vIOespuWQiOinpuWPkeWIt+aWsOeahOadoeS7tlxyXG5cdFx0XHR0aGlzLnRyaWdnZXJEb3duU2Nyb2xsKCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyDkuI3nrKblkIjnmoTor50g5YiZ6YeN572uXHJcblx0XHRcdHRoaXMuZG93bkhpZ2h0ID0gMDtcclxuXHRcdFx0dGhpcy5vcHREb3duLmVuZERvd25TY3JvbGwgJiYgdGhpcy5vcHREb3duLmVuZERvd25TY3JvbGwodGhpcyk7XHJcblx0XHR9XHJcblx0XHR0aGlzLm1vdmV0eXBlID0gMDtcclxuXHRcdHRoaXMuaXNNb3ZlRG93biA9IGZhbHNlO1xyXG5cdH0gZWxzZSBpZiAodGhpcy5nZXRTY3JvbGxUb3AoKSA9PT0gdGhpcy5zdGFydFRvcCkgeyAvLyDliLDpobYv5bemL+WPsy/lupXnmoTmu5Hliqjkuovku7ZcclxuXHRcdGxldCBpc1Njcm9sbFVwID0gdGhpcy5nZXRQb2ludChlKS55IC0gdGhpcy5zdGFydFBvaW50LnkgPCAwOyAvLyDlkozotbfngrnmr5Qs56e75Yqo55qE6Led56a7LOWkp+S6jjDlkJHkuIvmi4ks5bCP5LqOMOWQkeS4iuaLiVxyXG5cdFx0Ly8g5LiK5ruRICYmIOajgOafpeW5tuinpuWPkeS4iuaLiVxyXG5cdFx0aXNTY3JvbGxVcCAmJiB0aGlzLnRyaWdnZXJVcFNjcm9sbCh0cnVlKTtcclxuXHR9XHJcbn1cclxuXHJcbi8qIOagueaNrueCueWHu+a7keWKqOS6i+S7tuiOt+WPluesrOS4gOS4quaJi+aMh+eahOWdkOaghyAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbihlKSB7XHJcblx0aWYgKGUudG91Y2hlcyAmJiBlLnRvdWNoZXNbMF0pIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHg6IGUudG91Y2hlc1swXS5wYWdlWCxcclxuXHRcdFx0eTogZS50b3VjaGVzWzBdLnBhZ2VZXHJcblx0XHR9XHJcblx0fSBlbHNlIGlmIChlLmNoYW5nZWRUb3VjaGVzICYmIGUuY2hhbmdlZFRvdWNoZXNbMF0pIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHg6IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVgsXHJcblx0XHRcdHk6IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVlcclxuXHRcdH1cclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0eDogZS5jbGllbnRYLFxyXG5cdFx0XHR5OiBlLmNsaWVudFlcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbi8qIOinpuWPkeS4i+aLieWIt+aWsCAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUudHJpZ2dlckRvd25TY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuXHRpZiAodGhpcy5vcHREb3duLmJlZm9yZUxvYWRpbmcgJiYgdGhpcy5vcHREb3duLmJlZm9yZUxvYWRpbmcodGhpcykpIHtcclxuXHRcdC8vcmV0dXJuIHRydWXliJnlpITkuo7lrozlhajoh6rlrprkuYnnirbmgIFcclxuXHR9IGVsc2Uge1xyXG5cdFx0dGhpcy5zaG93RG93blNjcm9sbCgpOyAvLyDkuIvmi4nliLfmlrDkuK0uLi5cclxuXHRcdHRoaXMub3B0RG93bi5jYWxsYmFjayAmJiB0aGlzLm9wdERvd24uY2FsbGJhY2sodGhpcyk7IC8vIOaJp+ihjOWbnuiwgyzogZTnvZHliqDovb3mlbDmja5cclxuXHR9XHJcbn1cclxuXHJcbi8qIOaYvuekuuS4i+aLiei/m+W6puW4g+WxgCAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuc2hvd0Rvd25TY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuXHR0aGlzLmlzRG93blNjcm9sbGluZyA9IHRydWU7IC8vIOagh+iusOS4i+aLieS4rVxyXG5cdHRoaXMuZG93bkhpZ2h0ID0gdGhpcy5vcHREb3duLm9mZnNldDsgLy8g5pu05paw5LiL5ouJ5Yy65Z+f6auY5bqmXHJcblx0dGhpcy5vcHREb3duLnNob3dMb2FkaW5nKHRoaXMsIHRoaXMuZG93bkhpZ2h0KTsgLy8g5LiL5ouJ5Yi35paw5LitLi4uXHJcbn1cclxuXHJcbi8qIOe7k+adn+S4i+aLieWIt+aWsCAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuZW5kRG93blNjcm9sbCA9IGZ1bmN0aW9uKCkge1xyXG5cdGxldCBtZSA9IHRoaXM7XHJcblx0Ly8g57uT5p2f5LiL5ouJ5Yi35paw55qE5pa55rOVXHJcblx0bGV0IGVuZFNjcm9sbCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0bWUuZG93bkhpZ2h0ID0gMDtcclxuXHRcdG1lLmlzRG93blNjcm9sbGluZyA9IGZhbHNlO1xyXG5cdFx0bWUub3B0RG93bi5lbmREb3duU2Nyb2xsICYmIG1lLm9wdERvd24uZW5kRG93blNjcm9sbChtZSk7XHJcblx0XHRtZS5zZXRTY3JvbGxIZWlnaHQoMCkgLy8g6YeN572u5rua5Yqo5Yy65Z+fLOS9v+aVsOaNruS4jea7oeWxj+aXtuS7jeWPr+ajgOafpeinpuWPkee/u+mhtVxyXG5cdH1cclxuXHQvLyDnu5PmnZ/kuIvmi4nliLfmlrDml7bnmoTlm57osINcclxuXHRsZXQgZGVsYXkgPSAwO1xyXG5cdGlmIChtZS5vcHREb3duLmFmdGVyTG9hZGluZykgZGVsYXkgPSBtZS5vcHREb3duLmFmdGVyTG9hZGluZyhtZSk7IC8vIOe7k+adn+S4i+aLieWIt+aWsOeahOW7tuaXtizljZXkvY1tc1xyXG5cdGlmICh0eXBlb2YgZGVsYXkgPT09ICdudW1iZXInICYmIGRlbGF5ID4gMCkge1xyXG5cdFx0c2V0VGltZW91dChlbmRTY3JvbGwsIGRlbGF5KTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0ZW5kU2Nyb2xsKCk7XHJcblx0fVxyXG59XHJcblxyXG4vKiDplIHlrprkuIvmi4nliLfmlrA6aXNMb2NrPXR1cmUsbnVsbOmUgeWumjtpc0xvY2s9ZmFsc2Xop6PplIEgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLmxvY2tEb3duU2Nyb2xsID0gZnVuY3Rpb24oaXNMb2NrKSB7XHJcblx0aWYgKGlzTG9jayA9PSBudWxsKSBpc0xvY2sgPSB0cnVlO1xyXG5cdHRoaXMub3B0RG93bi5pc0xvY2sgPSBpc0xvY2s7XHJcbn1cclxuXHJcbi8qIC0tLS0tLS3liJ3lp4vljJbkuIrmi4nliqDovb0tLS0tLS0tICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5pbml0VXBTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuXHRsZXQgbWUgPSB0aGlzO1xyXG5cdC8vIOmFjee9ruWPguaVsFxyXG5cdG1lLm9wdFVwID0gbWUub3B0aW9ucy51cCB8fCB7XHJcblx0XHR1c2U6IGZhbHNlXHJcblx0fTtcclxuXHRtZS5leHRlbmRVcFNjcm9sbChtZS5vcHRVcCk7XHJcblxyXG5cdGlmICghbWUub3B0VXAuaXNCb3VuY2UpIG1lLnNldEJvdW5jZShmYWxzZSk7IC8vIOS4jeWFgeiuuGJvdW5jZeaXtizpnIDnpoHmraJ3aW5kb3fnmoR0b3VjaG1vdmXkuovku7ZcclxuXHJcblx0aWYgKG1lLm9wdFVwLnVzZSA9PT0gZmFsc2UpIHJldHVybjsgLy8g6YWN572u5LiN5L2/55So5LiK5ouJ5Yqg6L295pe2LOWImeS4jeWIneWni+WMluS4iuaLieW4g+WxgFxyXG5cdG1lLm9wdFVwLmhhc05leHQgPSB0cnVlOyAvLyDlpoLmnpzkvb/nlKjkuIrmi4ks5YiZ6buY6K6k5pyJ5LiL5LiA6aG1XHJcblx0bWUuc3RhcnROdW0gPSBtZS5vcHRVcC5wYWdlLm51bSArIDE7IC8vIOiusOW9lXBhZ2XlvIDlp4vnmoTpobXnoIFcclxuXHJcblx0Ly8g5Yid5aeL5YyW5a6M5q+V55qE5Zue6LCDXHJcblx0aWYgKG1lLm9wdFVwLmluaXRlZCkge1xyXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHsgLy8g5b6F5Li757q/56iL5omn6KGM5a6M5q+V5YaN5omn6KGMLOmBv+WFjW5ldyBNZVNjcm9sbOacquWIneWni+WMlizlnKjlm57osIPojrflj5bkuI3liLBtZXNjcm9sbOeahOWunuS+i1xyXG5cdFx0XHRtZS5vcHRVcC5pbml0ZWQobWUpO1xyXG5cdFx0fSwgMClcclxuXHR9XHJcbn1cclxuXHJcbi8q5YiX6KGo5rua5Yqo5LqL5Lu2Ki9cclxuTWVTY3JvbGwucHJvdG90eXBlLnNjcm9sbCA9IGZ1bmN0aW9uKGUsIG9uU2Nyb2xsKSB7XHJcblx0Ly8g5pu05paw5rua5Yqo5p2h55qE5L2N572uXHJcblx0dGhpcy5zZXRTY3JvbGxUb3AoZS5zY3JvbGxUb3ApO1xyXG5cdC8vIOabtOaWsOa7muWKqOWGheWuuemrmOW6plxyXG5cdHRoaXMuc2V0U2Nyb2xsSGVpZ2h0KGUuc2Nyb2xsSGVpZ2h0KTtcclxuXHJcblx0Ly8g5ZCR5LiK5ruR6L+Y5piv5ZCR5LiL5ruR5YqoXHJcblx0aWYgKHRoaXMucHJlU2Nyb2xsWSA9PSBudWxsKSB0aGlzLnByZVNjcm9sbFkgPSAwO1xyXG5cdHRoaXMuaXNTY3JvbGxVcCA9IGUuc2Nyb2xsVG9wIC0gdGhpcy5wcmVTY3JvbGxZID4gMDtcclxuXHR0aGlzLnByZVNjcm9sbFkgPSBlLnNjcm9sbFRvcDtcclxuXHJcblx0Ly8g5LiK5ruRICYmIOajgOafpeW5tuinpuWPkeS4iuaLiVxyXG5cdHRoaXMuaXNTY3JvbGxVcCAmJiB0aGlzLnRyaWdnZXJVcFNjcm9sbCh0cnVlKTtcclxuXHJcblx0Ly8g6aG26YOo5oyJ6ZKu55qE5pi+56S66ZqQ6JePXHJcblx0aWYgKGUuc2Nyb2xsVG9wID49IHRoaXMub3B0VXAudG9Ub3Aub2Zmc2V0KSB7XHJcblx0XHR0aGlzLnNob3dUb3BCdG4oKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dGhpcy5oaWRlVG9wQnRuKCk7XHJcblx0fVxyXG5cclxuXHQvLyDmu5Hliqjnm5HlkKxcclxuXHR0aGlzLm9wdFVwLm9uU2Nyb2xsICYmIG9uU2Nyb2xsICYmIG9uU2Nyb2xsKClcclxufVxyXG5cclxuLyog6Kem5Y+R5LiK5ouJ5Yqg6L29ICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS50cmlnZ2VyVXBTY3JvbGwgPSBmdW5jdGlvbihpc0NoZWNrKSB7XHJcblx0aWYgKCF0aGlzLmlzVXBTY3JvbGxpbmcgJiYgdGhpcy5vcHRVcC51c2UgJiYgdGhpcy5vcHRVcC5jYWxsYmFjaykge1xyXG5cdFx0Ly8g5piv5ZCm5qCh6aqM5Zyo5bqV6YOoOyDpu5jorqTkuI3moKHpqoxcclxuXHRcdGlmIChpc0NoZWNrID09PSB0cnVlKSB7XHJcblx0XHRcdGxldCBjYW5VcCA9IGZhbHNlO1xyXG5cdFx0XHQvLyDov5jmnInkuIvkuIDpobUgJiYg5rKh5pyJ6ZSB5a6aICYmIOS4jeWcqOS4i+aLieS4rVxyXG5cdFx0XHRpZiAodGhpcy5vcHRVcC5oYXNOZXh0ICYmICF0aGlzLm9wdFVwLmlzTG9jayAmJiAhdGhpcy5pc0Rvd25TY3JvbGxpbmcpIHtcclxuXHRcdFx0XHRpZiAodGhpcy5nZXRTY3JvbGxCb3R0b20oKSA8PSB0aGlzLm9wdFVwLm9mZnNldCkgeyAvLyDliLDlupXpg6hcclxuXHRcdFx0XHRcdGNhblVwID0gdHJ1ZTsgLy8g5qCH6K6w5Y+v5LiK5ouJXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChjYW5VcCA9PT0gZmFsc2UpIHJldHVybjtcclxuXHRcdH1cclxuXHRcdHRoaXMuc2hvd1VwU2Nyb2xsKCk7IC8vIOS4iuaLieWKoOi9veS4rS4uLlxyXG5cdFx0dGhpcy5vcHRVcC5wYWdlLm51bSsrOyAvLyDpooTlhYjliqDkuIDpobUs5aaC5p6c5aSx6LSl5YiZ5YeP5ZueXHJcblx0XHR0aGlzLmlzVXBBdXRvTG9hZCA9IHRydWU7IC8vIOagh+iusOS4iuaLieW3sue7j+iHquWKqOaJp+ihjOi/hyzpgb/lhY3liJ3lp4vljJbml7blpJrmrKHop6blj5HkuIrmi4nlm57osINcclxuXHRcdHRoaXMubnVtID0gdGhpcy5vcHRVcC5wYWdlLm51bTsgLy8g5oqK5pyA5paw55qE6aG15pWw6LWL5YC85ZyobWVzY3JvbGzkuIos6YG/5YWN5a+5cGFnZeeahOW9seWTjVxyXG5cdFx0dGhpcy5zaXplID0gdGhpcy5vcHRVcC5wYWdlLnNpemU7IC8vIOaKiuacgOaWsOeahOmhteeggei1i+WAvOWcqG1lc2Nyb2xs5LiKLOmBv+WFjeWvuXBhZ2XnmoTlvbHlk41cclxuXHRcdHRoaXMudGltZSA9IHRoaXMub3B0VXAucGFnZS50aW1lOyAvLyDmiormnIDmlrDnmoTpobXnoIHotYvlgLzlnKhtZXNjcm9sbOS4iizpgb/lhY3lr7lwYWdl55qE5b2x5ZONXHJcblx0XHR0aGlzLm9wdFVwLmNhbGxiYWNrKHRoaXMpOyAvLyDmiafooYzlm57osIMs6IGU572R5Yqg6L295pWw5o2uXHJcblx0fVxyXG59XHJcblxyXG4vKiDmmL7npLrkuIrmi4nliqDovb3kuK0gKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnNob3dVcFNjcm9sbCA9IGZ1bmN0aW9uKCkge1xyXG5cdHRoaXMuaXNVcFNjcm9sbGluZyA9IHRydWU7IC8vIOagh+iusOS4iuaLieWKoOi9veS4rVxyXG5cdHRoaXMub3B0VXAuc2hvd0xvYWRpbmcgJiYgdGhpcy5vcHRVcC5zaG93TG9hZGluZyh0aGlzKTsgLy8g5Zue6LCDXHJcbn1cclxuXHJcbi8qIOaYvuekuuS4iuaLieaXoOabtOWkmuaVsOaNriAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuc2hvd05vTW9yZSA9IGZ1bmN0aW9uKCkge1xyXG5cdHRoaXMub3B0VXAuaGFzTmV4dCA9IGZhbHNlOyAvLyDmoIforrDml6Dmm7TlpJrmlbDmja5cclxuXHR0aGlzLm9wdFVwLnNob3dOb01vcmUgJiYgdGhpcy5vcHRVcC5zaG93Tm9Nb3JlKHRoaXMpOyAvLyDlm57osINcclxufVxyXG5cclxuLyog6ZqQ6JeP5LiK5ouJ5Yy65Z+fKiovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5oaWRlVXBTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuXHR0aGlzLm9wdFVwLmhpZGVVcFNjcm9sbCAmJiB0aGlzLm9wdFVwLmhpZGVVcFNjcm9sbCh0aGlzKTsgLy8g5Zue6LCDXHJcbn1cclxuXHJcbi8qIOe7k+adn+S4iuaLieWKoOi9vSAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuZW5kVXBTY3JvbGwgPSBmdW5jdGlvbihpc1Nob3dOb01vcmUpIHtcclxuXHRpZiAoaXNTaG93Tm9Nb3JlICE9IG51bGwpIHsgLy8gaXNTaG93Tm9Nb3JlPW51bGws5LiN5aSE55CG5LiL5ouJ54q25oCBLOS4i+aLieWIt+aWsOeahOaXtuWAmeiwg+eUqFxyXG5cdFx0aWYgKGlzU2hvd05vTW9yZSkge1xyXG5cdFx0XHR0aGlzLnNob3dOb01vcmUoKTsgLy8gaXNTaG93Tm9Nb3JlPXRydWUs5pi+56S65peg5pu05aSa5pWw5o2uXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLmhpZGVVcFNjcm9sbCgpOyAvLyBpc1Nob3dOb01vcmU9ZmFsc2Us6ZqQ6JeP5LiK5ouJ5Yqg6L29XHJcblx0XHR9XHJcblx0fVxyXG5cdHRoaXMuaXNVcFNjcm9sbGluZyA9IGZhbHNlOyAvLyDmoIforrDnu5PmnZ/kuIrmi4nliqDovb1cclxufVxyXG5cclxuLyog6YeN572u5LiK5ouJ5Yqg6L295YiX6KGo5Li656ys5LiA6aG1XHJcbiAqaXNTaG93TG9hZGluZyDmmK/lkKbmmL7npLrov5vluqbluIPlsYA7XHJcbiAqIDEu6buY6K6kbnVsbCzkuI3kvKDlj4Is5YiZ5pi+56S65LiK5ouJ5Yqg6L2955qE6L+b5bqm5biD5bGAXHJcbiAqIDIu5Lyg5Y+CdHJ1ZSwg5YiZ5pi+56S65LiL5ouJ5Yi35paw55qE6L+b5bqm5biD5bGAXHJcbiAqIDMu5Lyg5Y+CZmFsc2Us5YiZ5LiN5pi+56S65LiK5ouJ5ZKM5LiL5ouJ55qE6L+b5bqmICjluLjnlKjkuo7pnZnpu5jmm7TmlrDliJfooajmlbDmja4pXHJcbiAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUucmVzZXRVcFNjcm9sbCA9IGZ1bmN0aW9uKGlzU2hvd0xvYWRpbmcpIHtcclxuXHRpZiAodGhpcy5vcHRVcCAmJiB0aGlzLm9wdFVwLnVzZSkge1xyXG5cdFx0bGV0IHBhZ2UgPSB0aGlzLm9wdFVwLnBhZ2U7XHJcblx0XHR0aGlzLnByZVBhZ2VOdW0gPSBwYWdlLm51bTsgLy8g57yT5a2Y6YeN572u5YmN55qE6aG156CBLOWKoOi9veWksei0peWPr+mAgOWbnlxyXG5cdFx0dGhpcy5wcmVQYWdlVGltZSA9IHBhZ2UudGltZTsgLy8g57yT5a2Y6YeN572u5YmN55qE5pe26Ze0LOWKoOi9veWksei0peWPr+mAgOWbnlxyXG5cdFx0cGFnZS5udW0gPSB0aGlzLnN0YXJ0TnVtOyAvLyDph43nva7kuLrnrKzkuIDpobVcclxuXHRcdHBhZ2UudGltZSA9IG51bGw7IC8vIOmHjee9ruaXtumXtOS4uuepulxyXG5cdFx0aWYgKCF0aGlzLmlzRG93blNjcm9sbGluZyAmJiBpc1Nob3dMb2FkaW5nICE9PSBmYWxzZSkgeyAvLyDlpoLmnpzkuI3mmK/kuIvmi4nliLfmlrDop6blj5HnmoRyZXNldFVwU2Nyb2xs5bm25LiU5LiN6YWN572u5YiX6KGo6Z2Z6buY5pu05pawLOWImeaYvuekuui/m+W6pjtcclxuXHRcdFx0aWYgKGlzU2hvd0xvYWRpbmcgPT0gbnVsbCkge1xyXG5cdFx0XHRcdHRoaXMucmVtb3ZlRW1wdHkoKTsgLy8g56e76Zmk56m65biD5bGAXHJcblx0XHRcdFx0dGhpcy5zaG93VXBTY3JvbGwoKTsgLy8g5LiN5Lyg5Y+CLOm7mOiupOaYvuekuuS4iuaLieWKoOi9veeahOi/m+W6puW4g+WxgFxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRoaXMuc2hvd0Rvd25TY3JvbGwoKTsgLy8g5LygdHJ1ZSzmmL7npLrkuIvmi4nliLfmlrDnmoTov5vluqbluIPlsYAs5LiN5riF56m65YiX6KGoXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHRoaXMuaXNVcEF1dG9Mb2FkID0gdHJ1ZTsgLy8g5qCH6K6w5LiK5ouJ5bey57uP6Ieq5Yqo5omn6KGM6L+HLOmBv+WFjeWIneWni+WMluaXtuWkmuasoeinpuWPkeS4iuaLieWbnuiwg1xyXG5cdFx0dGhpcy5udW0gPSBwYWdlLm51bTsgLy8g5oqK5pyA5paw55qE6aG15pWw6LWL5YC85ZyobWVzY3JvbGzkuIos6YG/5YWN5a+5cGFnZeeahOW9seWTjVxyXG5cdFx0dGhpcy5zaXplID0gcGFnZS5zaXplOyAvLyDmiormnIDmlrDnmoTpobXnoIHotYvlgLzlnKhtZXNjcm9sbOS4iizpgb/lhY3lr7lwYWdl55qE5b2x5ZONXHJcblx0XHR0aGlzLnRpbWUgPSBwYWdlLnRpbWU7IC8vIOaKiuacgOaWsOeahOmhteeggei1i+WAvOWcqG1lc2Nyb2xs5LiKLOmBv+WFjeWvuXBhZ2XnmoTlvbHlk41cclxuXHRcdHRoaXMub3B0VXAuY2FsbGJhY2sgJiYgdGhpcy5vcHRVcC5jYWxsYmFjayh0aGlzKTsgLy8g5omn6KGM5LiK5ouJ5Zue6LCDXHJcblx0fVxyXG59XHJcblxyXG4vKiDorr7nva5wYWdlLm51beeahOWAvCAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuc2V0UGFnZU51bSA9IGZ1bmN0aW9uKG51bSkge1xyXG5cdHRoaXMub3B0VXAucGFnZS5udW0gPSBudW0gLSAxO1xyXG59XHJcblxyXG4vKiDorr7nva5wYWdlLnNpemXnmoTlgLwgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnNldFBhZ2VTaXplID0gZnVuY3Rpb24oc2l6ZSkge1xyXG5cdHRoaXMub3B0VXAucGFnZS5zaXplID0gc2l6ZTtcclxufVxyXG5cclxuLyog6IGU572R5Zue6LCD5oiQ5YqfLOe7k+adn+S4i+aLieWIt+aWsOWSjOS4iuaLieWKoOi9vVxyXG4gKiBkYXRhU2l6ZTog5b2T5YmN6aG155qE5pWw5o2u6YePKOW/heS8oClcclxuICogdG90YWxQYWdlOiDmgLvpobXmlbAo5b+F5LygKVxyXG4gKiBzeXN0aW1lOiDmnI3liqHlmajml7bpl7QgKOWPr+epuilcclxuICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5lbmRCeVBhZ2UgPSBmdW5jdGlvbihkYXRhU2l6ZSwgdG90YWxQYWdlLCBzeXN0aW1lKSB7XHJcblx0bGV0IGhhc05leHQ7XHJcblx0aWYgKHRoaXMub3B0VXAudXNlICYmIHRvdGFsUGFnZSAhPSBudWxsKSBoYXNOZXh0ID0gdGhpcy5vcHRVcC5wYWdlLm51bSA8IHRvdGFsUGFnZTsgLy8g5piv5ZCm6L+Y5pyJ5LiL5LiA6aG1XHJcblx0dGhpcy5lbmRTdWNjZXNzKGRhdGFTaXplLCBoYXNOZXh0LCBzeXN0aW1lKTtcclxufVxyXG5cclxuLyog6IGU572R5Zue6LCD5oiQ5YqfLOe7k+adn+S4i+aLieWIt+aWsOWSjOS4iuaLieWKoOi9vVxyXG4gKiBkYXRhU2l6ZTog5b2T5YmN6aG155qE5pWw5o2u6YePKOW/heS8oClcclxuICogdG90YWxTaXplOiDliJfooajmiYDmnInmlbDmja7mgLvmlbDph48o5b+F5LygKVxyXG4gKiBzeXN0aW1lOiDmnI3liqHlmajml7bpl7QgKOWPr+epuilcclxuICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5lbmRCeVNpemUgPSBmdW5jdGlvbihkYXRhU2l6ZSwgdG90YWxTaXplLCBzeXN0aW1lKSB7XHJcblx0bGV0IGhhc05leHQ7XHJcblx0aWYgKHRoaXMub3B0VXAudXNlICYmIHRvdGFsU2l6ZSAhPSBudWxsKSB7XHJcblx0XHRsZXQgbG9hZFNpemUgPSAodGhpcy5vcHRVcC5wYWdlLm51bSAtIDEpICogdGhpcy5vcHRVcC5wYWdlLnNpemUgKyBkYXRhU2l6ZTsgLy8g5bey5Yqg6L2955qE5pWw5o2u5oC75pWwXHJcblx0XHRoYXNOZXh0ID0gbG9hZFNpemUgPCB0b3RhbFNpemU7IC8vIOaYr+WQpui/mOacieS4i+S4gOmhtVxyXG5cdH1cclxuXHR0aGlzLmVuZFN1Y2Nlc3MoZGF0YVNpemUsIGhhc05leHQsIHN5c3RpbWUpO1xyXG59XHJcblxyXG4vKiDogZTnvZHlm57osIPmiJDlip8s57uT5p2f5LiL5ouJ5Yi35paw5ZKM5LiK5ouJ5Yqg6L29XHJcbiAqIGRhdGFTaXplOiDlvZPliY3pobXnmoTmlbDmja7kuKrmlbAo5LiN5piv5omA5pyJ6aG155qE5pWw5o2u5oC75ZKMKSznlKjkuo7kuIrmi4nliqDovb3liKTmlq3mmK/lkKbov5jmnInkuIvkuIDpobUu5aaC5p6c5LiN5LygLOWImeS8muWIpOaWrei/mOacieS4i+S4gOmhtVxyXG4gKiBoYXNOZXh0OiDmmK/lkKbov5jmnInkuIvkuIDpobUs5biD5bCU57G75Z6LO+eUqOadpeino+WGs+i/meS4quWwj+mXrumimDrmr5TlpoLliJfooajlhbHmnIkyMOadoeaVsOaNrizmr4/pobXliqDovb0xMOadoSzlhbEy6aG1LuWmguaenOWPquagueaNrmRhdGFTaXpl5Yik5patLOWImemcgOe/u+WIsOesrOS4iemhteaJjeS8muefpemBk+aXoOabtOWkmuaVsOaNrizlpoLmnpzkvKDkuoZoYXNOZXh0LOWImee/u+WIsOesrOS6jOmhteWNs+WPr+aYvuekuuaXoOabtOWkmuaVsOaNri5cclxuICogc3lzdGltZTog5pyN5Yqh5Zmo5pe26Ze0KOWPr+epuik755So5p2l6Kej5Yaz6L+Z5Liq5bCP6Zeu6aKYOuW9k+WHhuWkh+e/u+S4i+S4gOmhteaXtizmlbDmja7lupPmlrDlop7kuoblh6DmnaHorrDlvZUs5q2k5pe257+75LiL5LiA6aG1LOWJjemdoueahOWHoOadoeaVsOaNruS8muWSjOS4iuS4gOmhteeahOmHjeWkjTvov5nph4zkvKDlhaXkuoZzeXN0aW1lLOmCo+S5iHVwQ2FsbGJhY2vnmoRwYWdlLnRpbWXlsLHkvJrmnInlgLws5oqKcGFnZS50aW1l5Lyg57uZ5pyN5Yqh5ZmoLOiuqeWQjuWPsOi/h+a7pOaWsOWKoOWFpeeahOmCo+WHoOadoeiusOW9lVxyXG4gKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLmVuZFN1Y2Nlc3MgPSBmdW5jdGlvbihkYXRhU2l6ZSwgaGFzTmV4dCwgc3lzdGltZSkge1xyXG5cdGxldCBtZSA9IHRoaXM7XHJcblx0Ly8g57uT5p2f5LiL5ouJ5Yi35pawXHJcblx0aWYgKG1lLmlzRG93blNjcm9sbGluZykgbWUuZW5kRG93blNjcm9sbCgpO1xyXG5cclxuXHQvLyDnu5PmnZ/kuIrmi4nliqDovb1cclxuXHRpZiAobWUub3B0VXAudXNlKSB7XHJcblx0XHRsZXQgaXNTaG93Tm9Nb3JlOyAvLyDmmK/lkKblt7Lml6Dmm7TlpJrmlbDmja5cclxuXHRcdGlmIChkYXRhU2l6ZSAhPSBudWxsKSB7XHJcblx0XHRcdGxldCBwYWdlTnVtID0gbWUub3B0VXAucGFnZS5udW07IC8vIOW9k+WJjemhteeggVxyXG5cdFx0XHRsZXQgcGFnZVNpemUgPSBtZS5vcHRVcC5wYWdlLnNpemU7IC8vIOavj+mhtemVv+W6plxyXG5cdFx0XHQvLyDlpoLmnpzmmK/nrKzkuIDpobVcclxuXHRcdFx0aWYgKHBhZ2VOdW0gPT09IDEpIHtcclxuXHRcdFx0XHRpZiAoc3lzdGltZSkgbWUub3B0VXAucGFnZS50aW1lID0gc3lzdGltZTsgLy8g6K6+572u5Yqg6L295YiX6KGo5pWw5o2u56ys5LiA6aG155qE5pe26Ze0XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKGRhdGFTaXplIDwgcGFnZVNpemUgfHwgaGFzTmV4dCA9PT0gZmFsc2UpIHtcclxuXHRcdFx0XHQvLyDov5Tlm57nmoTmlbDmja7kuI3mu6HkuIDpobXml7Ys5YiZ6K+05piO5bey5peg5pu05aSa5pWw5o2uXHJcblx0XHRcdFx0bWUub3B0VXAuaGFzTmV4dCA9IGZhbHNlO1xyXG5cdFx0XHRcdGlmIChkYXRhU2l6ZSA9PT0gMCAmJiBwYWdlTnVtID09PSAxKSB7XHJcblx0XHRcdFx0XHQvLyDlpoLmnpznrKzkuIDpobXml6Dku7vkvZXmlbDmja7kuJTphY3nva7kuobnqbrluIPlsYBcclxuXHRcdFx0XHRcdGlzU2hvd05vTW9yZSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0bWUuc2hvd0VtcHR5KCk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIOaAu+WIl+ihqOaVsOWwkeS6jumFjee9rueahOaVsOmHjyzliJnkuI3mmL7npLrml6Dmm7TlpJrmlbDmja5cclxuXHRcdFx0XHRcdGxldCBhbGxEYXRhU2l6ZSA9IChwYWdlTnVtIC0gMSkgKiBwYWdlU2l6ZSArIGRhdGFTaXplO1xyXG5cdFx0XHRcdFx0aWYgKGFsbERhdGFTaXplIDwgbWUub3B0VXAubm9Nb3JlU2l6ZSkge1xyXG5cdFx0XHRcdFx0XHRpc1Nob3dOb01vcmUgPSBmYWxzZTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGlzU2hvd05vTW9yZSA9IHRydWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRtZS5yZW1vdmVFbXB0eSgpOyAvLyDnp7vpmaTnqbrluIPlsYBcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8g6L+Y5pyJ5LiL5LiA6aG1XHJcblx0XHRcdFx0aXNTaG93Tm9Nb3JlID0gZmFsc2U7XHJcblx0XHRcdFx0bWUub3B0VXAuaGFzTmV4dCA9IHRydWU7XHJcblx0XHRcdFx0bWUucmVtb3ZlRW1wdHkoKTsgLy8g56e76Zmk56m65biD5bGAXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyDpmpDol4/kuIrmi4lcclxuXHRcdG1lLmVuZFVwU2Nyb2xsKGlzU2hvd05vTW9yZSk7XHJcblx0fVxyXG59XHJcblxyXG4vKiDlm57osIPlpLHotKUs57uT5p2f5LiL5ouJ5Yi35paw5ZKM5LiK5ouJ5Yqg6L29ICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5lbmRFcnIgPSBmdW5jdGlvbigpIHtcclxuXHQvLyDnu5PmnZ/kuIvmi4ks5Zue6LCD5aSx6LSl6YeN572u5Zue5Y6f5p2l55qE6aG156CB5ZKM5pe26Ze0XHJcblx0aWYgKHRoaXMuaXNEb3duU2Nyb2xsaW5nKSB7XHJcblx0XHRsZXQgcGFnZSA9IHRoaXMub3B0VXAucGFnZTtcclxuXHRcdGlmIChwYWdlICYmIHRoaXMucHJlUGFnZU51bSkge1xyXG5cdFx0XHRwYWdlLm51bSA9IHRoaXMucHJlUGFnZU51bTtcclxuXHRcdFx0cGFnZS50aW1lID0gdGhpcy5wcmVQYWdlVGltZTtcclxuXHRcdH1cclxuXHRcdHRoaXMuZW5kRG93blNjcm9sbCgpO1xyXG5cdH1cclxuXHQvLyDnu5PmnZ/kuIrmi4ks5Zue6LCD5aSx6LSl6YeN572u5Zue5Y6f5p2l55qE6aG156CBXHJcblx0aWYgKHRoaXMuaXNVcFNjcm9sbGluZykge1xyXG5cdFx0dGhpcy5vcHRVcC5wYWdlLm51bS0tO1xyXG5cdFx0dGhpcy5lbmRVcFNjcm9sbChmYWxzZSk7XHJcblx0fVxyXG59XHJcblxyXG4vKiDmmL7npLrnqbrluIPlsYAgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnNob3dFbXB0eSA9IGZ1bmN0aW9uKCkge1xyXG5cdHRoaXMub3B0VXAuZW1wdHkudXNlICYmIHRoaXMub3B0VXAuZW1wdHkub25TaG93ICYmIHRoaXMub3B0VXAuZW1wdHkub25TaG93KHRydWUpXHJcbn1cclxuXHJcbi8qIOenu+mZpOepuuW4g+WxgCAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUucmVtb3ZlRW1wdHkgPSBmdW5jdGlvbigpIHtcclxuXHR0aGlzLm9wdFVwLmVtcHR5LnVzZSAmJiB0aGlzLm9wdFVwLmVtcHR5Lm9uU2hvdyAmJiB0aGlzLm9wdFVwLmVtcHR5Lm9uU2hvdyhmYWxzZSlcclxufVxyXG5cclxuLyog5pi+56S65Zue5Yiw6aG26YOo55qE5oyJ6ZKuICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5zaG93VG9wQnRuID0gZnVuY3Rpb24oKSB7XHJcblx0aWYgKCF0aGlzLnRvcEJ0blNob3cpIHtcclxuXHRcdHRoaXMudG9wQnRuU2hvdyA9IHRydWU7XHJcblx0XHR0aGlzLm9wdFVwLnRvVG9wLm9uU2hvdyAmJiB0aGlzLm9wdFVwLnRvVG9wLm9uU2hvdyh0cnVlKTtcclxuXHR9XHJcbn1cclxuXHJcbi8qIOmakOiXj+WbnuWIsOmhtumDqOeahOaMiemSriAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuaGlkZVRvcEJ0biA9IGZ1bmN0aW9uKCkge1xyXG5cdGlmICh0aGlzLnRvcEJ0blNob3cpIHtcclxuXHRcdHRoaXMudG9wQnRuU2hvdyA9IGZhbHNlO1xyXG5cdFx0dGhpcy5vcHRVcC50b1RvcC5vblNob3cgJiYgdGhpcy5vcHRVcC50b1RvcC5vblNob3coZmFsc2UpO1xyXG5cdH1cclxufVxyXG5cclxuLyog6I635Y+W5rua5Yqo5p2h55qE5L2N572uICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5nZXRTY3JvbGxUb3AgPSBmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcy5zY3JvbGxUb3AgfHwgMFxyXG59XHJcblxyXG4vKiDorrDlvZXmu5rliqjmnaHnmoTkvY3nva4gKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnNldFNjcm9sbFRvcCA9IGZ1bmN0aW9uKHkpIHtcclxuXHR0aGlzLnNjcm9sbFRvcCA9IHk7XHJcbn1cclxuXHJcbi8qIOa7muWKqOWIsOaMh+WumuS9jee9riAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuc2Nyb2xsVG8gPSBmdW5jdGlvbih5LCB0KSB7XHJcblx0dGhpcy5teVNjcm9sbFRvICYmIHRoaXMubXlTY3JvbGxUbyh5LCB0KSAvLyBzY3JvbGx2aWV36ZyA6Ieq5a6a5LmJ5Zue5Yiw6aG26YOo5pa55rOVXHJcbn1cclxuXHJcbi8qIOiHquWumuS5iXNjcm9sbFRvICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5yZXNldFNjcm9sbFRvID0gZnVuY3Rpb24obXlTY3JvbGxUbykge1xyXG5cdHRoaXMubXlTY3JvbGxUbyA9IG15U2Nyb2xsVG9cclxufVxyXG5cclxuLyog5rua5Yqo5p2h5Yiw5bqV6YOo55qE6Led56a7ICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5nZXRTY3JvbGxCb3R0b20gPSBmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcy5nZXRTY3JvbGxIZWlnaHQoKSAtIHRoaXMuZ2V0Q2xpZW50SGVpZ2h0KCkgLSB0aGlzLmdldFNjcm9sbFRvcCgpXHJcbn1cclxuXHJcbi8qIOiuoeatpeWZqFxyXG4gc3Rhcjog5byA5aeL5YC8XHJcbiBlbmQ6IOe7k+adn+WAvFxyXG4gY2FsbGJhY2soc3RlcCx0aW1lcik6IOWbnuiwg3N0ZXDlgLws6K6h5q2l5ZmodGltZXIs5Y+v6Ieq6KGM6YCa6L+Hd2luZG93LmNsZWFySW50ZXJ2YWwodGltZXIp57uT5p2f6K6h5q2l5ZmoO1xyXG4gdDog6K6h5q2l5pe26ZW/LOS8oDDliJnnm7TmjqXlm57osINlbmTlgLw75LiN5Lyg5YiZ6buY6K6kMzAwbXNcclxuIHJhdGU6IOWRqOacnzvkuI3kvKDliJnpu5jorqQzMG1z6K6h5q2l5LiA5qyhXHJcbiAqICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5nZXRTdGVwID0gZnVuY3Rpb24oc3RhciwgZW5kLCBjYWxsYmFjaywgdCwgcmF0ZSkge1xyXG5cdGxldCBkaWZmID0gZW5kIC0gc3RhcjsgLy8g5beu5YC8XHJcblx0aWYgKHQgPT09IDAgfHwgZGlmZiA9PT0gMCkge1xyXG5cdFx0Y2FsbGJhY2sgJiYgY2FsbGJhY2soZW5kKTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0dCA9IHQgfHwgMzAwOyAvLyDml7bplb8gMzAwbXNcclxuXHRyYXRlID0gcmF0ZSB8fCAzMDsgLy8g5ZGo5pyfIDMwbXNcclxuXHRsZXQgY291bnQgPSB0IC8gcmF0ZTsgLy8g5qyh5pWwXHJcblx0bGV0IHN0ZXAgPSBkaWZmIC8gY291bnQ7IC8vIOatpemVv1xyXG5cdGxldCBpID0gMDsgLy8g6K6h5pWwXHJcblx0bGV0IHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoaSA8IGNvdW50IC0gMSkge1xyXG5cdFx0XHRzdGFyICs9IHN0ZXA7XHJcblx0XHRcdGNhbGxiYWNrICYmIGNhbGxiYWNrKHN0YXIsIHRpbWVyKTtcclxuXHRcdFx0aSsrO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y2FsbGJhY2sgJiYgY2FsbGJhY2soZW5kLCB0aW1lcik7IC8vIOacgOWQjuS4gOasoeebtOaOpeiuvue9rmVuZCzpgb/lhY3orqHnrpfor6/lt65cclxuXHRcdFx0Y2xlYXJJbnRlcnZhbCh0aW1lcik7XHJcblx0XHR9XHJcblx0fSwgcmF0ZSk7XHJcbn1cclxuXHJcbi8qIOa7muWKqOWuueWZqOeahOmrmOW6piAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuZ2V0Q2xpZW50SGVpZ2h0ID0gZnVuY3Rpb24oaXNSZWFsKSB7XHJcblx0bGV0IGggPSB0aGlzLmNsaWVudEhlaWdodCB8fCAwXHJcblx0aWYgKGggPT09IDAgJiYgaXNSZWFsICE9PSB0cnVlKSB7IC8vIOacquiOt+WPluWIsOWuueWZqOeahOmrmOW6pizlj6/kuLTml7blj5Zib2R555qE6auY5bqmICjlj6/og73kvJrmnInor6/lt64pXHJcblx0XHRoID0gdGhpcy5nZXRCb2R5SGVpZ2h0KClcclxuXHR9XHJcblx0cmV0dXJuIGhcclxufVxyXG5NZVNjcm9sbC5wcm90b3R5cGUuc2V0Q2xpZW50SGVpZ2h0ID0gZnVuY3Rpb24oaCkge1xyXG5cdHRoaXMuY2xpZW50SGVpZ2h0ID0gaDtcclxufVxyXG5cclxuLyog5rua5Yqo5YaF5a6555qE6auY5bqmICovXHJcbk1lU2Nyb2xsLnByb3RvdHlwZS5nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcy5zY3JvbGxIZWlnaHQgfHwgMDtcclxufVxyXG5NZVNjcm9sbC5wcm90b3R5cGUuc2V0U2Nyb2xsSGVpZ2h0ID0gZnVuY3Rpb24oaCkge1xyXG5cdHRoaXMuc2Nyb2xsSGVpZ2h0ID0gaDtcclxufVxyXG5cclxuLyogYm9keeeahOmrmOW6piAqL1xyXG5NZVNjcm9sbC5wcm90b3R5cGUuZ2V0Qm9keUhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzLmJvZHlIZWlnaHQgfHwgMDtcclxufVxyXG5NZVNjcm9sbC5wcm90b3R5cGUuc2V0Qm9keUhlaWdodCA9IGZ1bmN0aW9uKGgpIHtcclxuXHR0aGlzLmJvZHlIZWlnaHQgPSBoO1xyXG59XHJcblxyXG4vKiDpmLvmraLmtY/op4jlmajpu5jorqTmu5rliqjkuovku7YgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oZSkge1xyXG5cdC8vIOWwj+eoi+W6j+S4jeaUr+aMgWUucHJldmVudERlZmF1bHRcclxuXHQvLyBhcHDnmoRib3VuY2Xlj6rog73pgJrov4fphY3nva5wYWdlcy5qc29u55qEc3R5bGUuYXBwLXBsdXMuYm91bmNl5Li6XCJub25lXCLmnaXnpoHmraJcclxuXHQvLyBjYW5jZWxhYmxlOuaYr+WQpuWPr+S7peiiq+emgeeUqDsgZGVmYXVsdFByZXZlbnRlZDrmmK/lkKblt7Lnu4/ooqvnpoHnlKhcclxuXHRpZiAoZSAmJiBlLmNhbmNlbGFibGUgJiYgIWUuZGVmYXVsdFByZXZlbnRlZCkgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbn1cclxuXHJcbi8qIOaYr+WQpuWFgeiuuOS4i+aLieWbnuW8uSjmqaHnmq7nrYvmlYjmnpwpOyB0cnVl5oiWbnVsbOS4uuWFgeiuuDsgZmFsc2XnpoHmraJib3VuY2UgKi9cclxuTWVTY3JvbGwucHJvdG90eXBlLnNldEJvdW5jZSA9IGZ1bmN0aW9uKGlzQm91bmNlKSB7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///383\n");

/***/ }),

/***/ 384:
/*!**********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/video-APP/task/pages/components/mescroll-uni/mescroll-uni-option.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; // mescroll 全局配置\nvar GlobalOption = {\n  down: {\n    // 其他down的配置参数也可以写,这里只展示了常用的配置:\n    textInOffset: '下拉刷新', // 下拉的距离在offset范围内的提示文本\n    textOutOffset: '释放更新', // 下拉的距离大于offset范围的提示文本\n    textLoading: '加载中 ...', // 加载中的提示文本\n    offset: 80 // 在列表顶部,下拉大于80upx,松手即可触发下拉刷新的回调\n  },\n  up: {\n    // 其他up的配置参数也可以写,这里只展示了常用的配置:\n    textLoading: '加载中 ...', // 加载中的提示文本\n    textNoMore: '-- END --', // 没有更多数据的提示文本\n    offset: 80, // 距底部多远时,触发upCallback\n    isBounce: false, // 默认禁止橡皮筋的回弹效果, 必读事项: http://www.mescroll.com/qa.html?v=190725#q25\n    toTop: {\n      // 回到顶部按钮,需配置src才显示\n      src: \"http://www.mescroll.com/img/mescroll-totop.png?v=1\", // 图片路径 (建议放入static目录, 如 /static/img/mescroll-totop.png )\n      offset: 1000, // 列表滚动多少距离才显示回到顶部按钮,默认1000\n      duration: 300 // 回到顶部的动画时长,默认300ms\n    },\n    empty: {\n      use: true, // 是否显示空布局\n      icon: \"http://www.mescroll.com/img/mescroll-empty.png?v=1\", // 图标路径 (建议放入static目录, 如 /static/img/mescroll-empty.png )\n      tip: '~ 暂无相关数据 ~' // 提示\n    } } };var _default =\n\n\n\nGlobalOption;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vcGFnZXMvY29tcG9uZW50cy9tZXNjcm9sbC11bmkvbWVzY3JvbGwtdW5pLW9wdGlvbi5qcyJdLCJuYW1lcyI6WyJHbG9iYWxPcHRpb24iLCJkb3duIiwidGV4dEluT2Zmc2V0IiwidGV4dE91dE9mZnNldCIsInRleHRMb2FkaW5nIiwib2Zmc2V0IiwidXAiLCJ0ZXh0Tm9Nb3JlIiwiaXNCb3VuY2UiLCJ0b1RvcCIsInNyYyIsImR1cmF0aW9uIiwiZW1wdHkiLCJ1c2UiLCJpY29uIiwidGlwIl0sIm1hcHBpbmdzIjoid0ZBQUE7QUFDQSxJQUFNQSxZQUFZLEdBQUc7QUFDcEJDLE1BQUksRUFBRTtBQUNMO0FBQ0FDLGdCQUFZLEVBQUUsTUFGVCxFQUVpQjtBQUN0QkMsaUJBQWEsRUFBRSxNQUhWLEVBR2tCO0FBQ3ZCQyxlQUFXLEVBQUUsU0FKUixFQUltQjtBQUN4QkMsVUFBTSxFQUFFLEVBTEgsQ0FLTTtBQUxOLEdBRGM7QUFRcEJDLElBQUUsRUFBRTtBQUNIO0FBQ0FGLGVBQVcsRUFBRSxTQUZWLEVBRXFCO0FBQ3hCRyxjQUFVLEVBQUUsV0FIVCxFQUdzQjtBQUN6QkYsVUFBTSxFQUFFLEVBSkwsRUFJUztBQUNaRyxZQUFRLEVBQUUsS0FMUCxFQUtjO0FBQ2pCQyxTQUFLLEVBQUU7QUFDTjtBQUNBQyxTQUFHLEVBQUUsb0RBRkMsRUFFcUQ7QUFDM0RMLFlBQU0sRUFBRSxJQUhGLEVBR1E7QUFDZE0sY0FBUSxFQUFFLEdBSkosQ0FJUztBQUpULEtBTko7QUFZSEMsU0FBSyxFQUFFO0FBQ05DLFNBQUcsRUFBRSxJQURDLEVBQ0s7QUFDWEMsVUFBSSxFQUFFLG9EQUZBLEVBRXNEO0FBQzVEQyxTQUFHLEVBQUUsWUFIQyxDQUdZO0FBSFosS0FaSixFQVJnQixFQUFyQixDOzs7O0FBNEJlZixZIiwiZmlsZSI6IjM4NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIG1lc2Nyb2xsIOWFqOWxgOmFjee9rlxyXG5jb25zdCBHbG9iYWxPcHRpb24gPSB7XHJcblx0ZG93bjoge1xyXG5cdFx0Ly8g5YW25LuWZG93bueahOmFjee9ruWPguaVsOS5n+WPr+S7peWGmSzov5nph4zlj6rlsZXnpLrkuobluLjnlKjnmoTphY3nva46XHJcblx0XHR0ZXh0SW5PZmZzZXQ6ICfkuIvmi4nliLfmlrAnLCAvLyDkuIvmi4nnmoTot53nprvlnKhvZmZzZXTojIPlm7TlhoXnmoTmj5DnpLrmlofmnKxcclxuXHRcdHRleHRPdXRPZmZzZXQ6ICfph4rmlL7mm7TmlrAnLCAvLyDkuIvmi4nnmoTot53nprvlpKfkuo5vZmZzZXTojIPlm7TnmoTmj5DnpLrmlofmnKxcclxuXHRcdHRleHRMb2FkaW5nOiAn5Yqg6L295LitIC4uLicsIC8vIOWKoOi9veS4reeahOaPkOekuuaWh+acrFxyXG5cdFx0b2Zmc2V0OiA4MCAvLyDlnKjliJfooajpobbpg6gs5LiL5ouJ5aSn5LqOODB1cHgs5p2+5omL5Y2z5Y+v6Kem5Y+R5LiL5ouJ5Yi35paw55qE5Zue6LCDXHJcblx0fSxcclxuXHR1cDoge1xyXG5cdFx0Ly8g5YW25LuWdXDnmoTphY3nva7lj4LmlbDkuZ/lj6/ku6Xlhpks6L+Z6YeM5Y+q5bGV56S65LqG5bi455So55qE6YWN572uOlxyXG5cdFx0dGV4dExvYWRpbmc6ICfliqDovb3kuK0gLi4uJywgLy8g5Yqg6L295Lit55qE5o+Q56S65paH5pysXHJcblx0XHR0ZXh0Tm9Nb3JlOiAnLS0gRU5EIC0tJywgLy8g5rKh5pyJ5pu05aSa5pWw5o2u55qE5o+Q56S65paH5pysXHJcblx0XHRvZmZzZXQ6IDgwLCAvLyDot53lupXpg6jlpJrov5zml7Ys6Kem5Y+RdXBDYWxsYmFja1xyXG5cdFx0aXNCb3VuY2U6IGZhbHNlLCAvLyDpu5jorqTnpoHmraLmqaHnmq7nrYvnmoTlm57lvLnmlYjmnpwsIOW/heivu+S6i+mhuTogaHR0cDovL3d3dy5tZXNjcm9sbC5jb20vcWEuaHRtbD92PTE5MDcyNSNxMjVcclxuXHRcdHRvVG9wOiB7XHJcblx0XHRcdC8vIOWbnuWIsOmhtumDqOaMiemSrizpnIDphY3nva5zcmPmiY3mmL7npLpcclxuXHRcdFx0c3JjOiBcImh0dHA6Ly93d3cubWVzY3JvbGwuY29tL2ltZy9tZXNjcm9sbC10b3RvcC5wbmc/dj0xXCIsIC8vIOWbvueJh+i3r+W+hCAo5bu66K6u5pS+5YWlc3RhdGlj55uu5b2VLCDlpoIgL3N0YXRpYy9pbWcvbWVzY3JvbGwtdG90b3AucG5nIClcclxuXHRcdFx0b2Zmc2V0OiAxMDAwLCAvLyDliJfooajmu5rliqjlpJrlsJHot53nprvmiY3mmL7npLrlm57liLDpobbpg6jmjInpkq4s6buY6K6kMTAwMFxyXG5cdFx0XHRkdXJhdGlvbjogMzAwLCAvLyDlm57liLDpobbpg6jnmoTliqjnlLvml7bplb8s6buY6K6kMzAwbXNcclxuXHRcdH0sXHJcblx0XHRlbXB0eToge1xyXG5cdFx0XHR1c2U6IHRydWUsIC8vIOaYr+WQpuaYvuekuuepuuW4g+WxgFxyXG5cdFx0XHRpY29uOiBcImh0dHA6Ly93d3cubWVzY3JvbGwuY29tL2ltZy9tZXNjcm9sbC1lbXB0eS5wbmc/dj0xXCIsIC8vIOWbvuagh+i3r+W+hCAo5bu66K6u5pS+5YWlc3RhdGlj55uu5b2VLCDlpoIgL3N0YXRpYy9pbWcvbWVzY3JvbGwtZW1wdHkucG5nIClcclxuXHRcdFx0dGlwOiAnfiDmmoLml6Dnm7jlhbPmlbDmja4gficgLy8g5o+Q56S6XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBHbG9iYWxPcHRpb25cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///384\n");

/***/ }),

/***/ 4:
/*!****************************************************************!*\
  !*** C:/Users/Administrator/Desktop/video-APP/task/pages.json ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 455:
/*!***********************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/video-APP/task/components/uni-icons/icons.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  'contact': \"\\uE100\",\n  'person': \"\\uE101\",\n  'personadd': \"\\uE102\",\n  'contact-filled': \"\\uE130\",\n  'person-filled': \"\\uE131\",\n  'personadd-filled': \"\\uE132\",\n  'phone': \"\\uE200\",\n  'email': \"\\uE201\",\n  'chatbubble': \"\\uE202\",\n  'chatboxes': \"\\uE203\",\n  'phone-filled': \"\\uE230\",\n  'email-filled': \"\\uE231\",\n  'chatbubble-filled': \"\\uE232\",\n  'chatboxes-filled': \"\\uE233\",\n  'weibo': \"\\uE260\",\n  'weixin': \"\\uE261\",\n  'pengyouquan': \"\\uE262\",\n  'chat': \"\\uE263\",\n  'qq': \"\\uE264\",\n  'videocam': \"\\uE300\",\n  'camera': \"\\uE301\",\n  'mic': \"\\uE302\",\n  'location': \"\\uE303\",\n  'mic-filled': \"\\uE332\",\n  'speech': \"\\uE332\",\n  'location-filled': \"\\uE333\",\n  'micoff': \"\\uE360\",\n  'image': \"\\uE363\",\n  'map': \"\\uE364\",\n  'compose': \"\\uE400\",\n  'trash': \"\\uE401\",\n  'upload': \"\\uE402\",\n  'download': \"\\uE403\",\n  'close': \"\\uE404\",\n  'redo': \"\\uE405\",\n  'undo': \"\\uE406\",\n  'refresh': \"\\uE407\",\n  'star': \"\\uE408\",\n  'plus': \"\\uE409\",\n  'minus': \"\\uE410\",\n  'circle': \"\\uE411\",\n  'checkbox': \"\\uE411\",\n  'close-filled': \"\\uE434\",\n  'clear': \"\\uE434\",\n  'refresh-filled': \"\\uE437\",\n  'star-filled': \"\\uE438\",\n  'plus-filled': \"\\uE439\",\n  'minus-filled': \"\\uE440\",\n  'circle-filled': \"\\uE441\",\n  'checkbox-filled': \"\\uE442\",\n  'closeempty': \"\\uE460\",\n  'refreshempty': \"\\uE461\",\n  'reload': \"\\uE462\",\n  'starhalf': \"\\uE463\",\n  'spinner': \"\\uE464\",\n  'spinner-cycle': \"\\uE465\",\n  'search': \"\\uE466\",\n  'plusempty': \"\\uE468\",\n  'forward': \"\\uE470\",\n  'back': \"\\uE471\",\n  'left-nav': \"\\uE471\",\n  'checkmarkempty': \"\\uE472\",\n  'home': \"\\uE500\",\n  'navigate': \"\\uE501\",\n  'gear': \"\\uE502\",\n  'paperplane': \"\\uE503\",\n  'info': \"\\uE504\",\n  'help': \"\\uE505\",\n  'locked': \"\\uE506\",\n  'more': \"\\uE507\",\n  'flag': \"\\uE508\",\n  'home-filled': \"\\uE530\",\n  'gear-filled': \"\\uE532\",\n  'info-filled': \"\\uE534\",\n  'help-filled': \"\\uE535\",\n  'more-filled': \"\\uE537\",\n  'settings': \"\\uE560\",\n  'list': \"\\uE562\",\n  'bars': \"\\uE563\",\n  'loop': \"\\uE565\",\n  'paperclip': \"\\uE567\",\n  'eye': \"\\uE568\",\n  'arrowup': \"\\uE580\",\n  'arrowdown': \"\\uE581\",\n  'arrowleft': \"\\uE582\",\n  'arrowright': \"\\uE583\",\n  'arrowthinup': \"\\uE584\",\n  'arrowthindown': \"\\uE585\",\n  'arrowthinleft': \"\\uE586\",\n  'arrowthinright': \"\\uE587\",\n  'pulldown': \"\\uE588\",\n  'closefill': \"\\uE589\",\n  'sound': \"\\uE590\",\n  'scan': \"\\uE612\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy91bmktaWNvbnMvaWNvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6InNHQUFlO0FBQ2QsYUFBVyxRQURHO0FBRWQsWUFBVSxRQUZJO0FBR2QsZUFBYSxRQUhDO0FBSWQsb0JBQWtCLFFBSko7QUFLZCxtQkFBaUIsUUFMSDtBQU1kLHNCQUFvQixRQU5OO0FBT2QsV0FBUyxRQVBLO0FBUWQsV0FBUyxRQVJLO0FBU2QsZ0JBQWMsUUFUQTtBQVVkLGVBQWEsUUFWQztBQVdkLGtCQUFnQixRQVhGO0FBWWQsa0JBQWdCLFFBWkY7QUFhZCx1QkFBcUIsUUFiUDtBQWNkLHNCQUFvQixRQWROO0FBZWQsV0FBUyxRQWZLO0FBZ0JkLFlBQVUsUUFoQkk7QUFpQmQsaUJBQWUsUUFqQkQ7QUFrQmQsVUFBUSxRQWxCTTtBQW1CZCxRQUFNLFFBbkJRO0FBb0JkLGNBQVksUUFwQkU7QUFxQmQsWUFBVSxRQXJCSTtBQXNCZCxTQUFPLFFBdEJPO0FBdUJkLGNBQVksUUF2QkU7QUF3QmQsZ0JBQWMsUUF4QkE7QUF5QmQsWUFBVSxRQXpCSTtBQTBCZCxxQkFBbUIsUUExQkw7QUEyQmQsWUFBVSxRQTNCSTtBQTRCZCxXQUFTLFFBNUJLO0FBNkJkLFNBQU8sUUE3Qk87QUE4QmQsYUFBVyxRQTlCRztBQStCZCxXQUFTLFFBL0JLO0FBZ0NkLFlBQVUsUUFoQ0k7QUFpQ2QsY0FBWSxRQWpDRTtBQWtDZCxXQUFTLFFBbENLO0FBbUNkLFVBQVEsUUFuQ007QUFvQ2QsVUFBUSxRQXBDTTtBQXFDZCxhQUFXLFFBckNHO0FBc0NkLFVBQVEsUUF0Q007QUF1Q2QsVUFBUSxRQXZDTTtBQXdDZCxXQUFTLFFBeENLO0FBeUNkLFlBQVUsUUF6Q0k7QUEwQ2QsY0FBWSxRQTFDRTtBQTJDZCxrQkFBZ0IsUUEzQ0Y7QUE0Q2QsV0FBUyxRQTVDSztBQTZDZCxvQkFBa0IsUUE3Q0o7QUE4Q2QsaUJBQWUsUUE5Q0Q7QUErQ2QsaUJBQWUsUUEvQ0Q7QUFnRGQsa0JBQWdCLFFBaERGO0FBaURkLG1CQUFpQixRQWpESDtBQWtEZCxxQkFBbUIsUUFsREw7QUFtRGQsZ0JBQWMsUUFuREE7QUFvRGQsa0JBQWdCLFFBcERGO0FBcURkLFlBQVUsUUFyREk7QUFzRGQsY0FBWSxRQXRERTtBQXVEZCxhQUFXLFFBdkRHO0FBd0RkLG1CQUFpQixRQXhESDtBQXlEZCxZQUFVLFFBekRJO0FBMERkLGVBQWEsUUExREM7QUEyRGQsYUFBVyxRQTNERztBQTREZCxVQUFRLFFBNURNO0FBNkRkLGNBQVksUUE3REU7QUE4RGQsb0JBQWtCLFFBOURKO0FBK0RkLFVBQVEsUUEvRE07QUFnRWQsY0FBWSxRQWhFRTtBQWlFZCxVQUFRLFFBakVNO0FBa0VkLGdCQUFjLFFBbEVBO0FBbUVkLFVBQVEsUUFuRU07QUFvRWQsVUFBUSxRQXBFTTtBQXFFZCxZQUFVLFFBckVJO0FBc0VkLFVBQVEsUUF0RU07QUF1RWQsVUFBUSxRQXZFTTtBQXdFZCxpQkFBZSxRQXhFRDtBQXlFZCxpQkFBZSxRQXpFRDtBQTBFZCxpQkFBZSxRQTFFRDtBQTJFZCxpQkFBZSxRQTNFRDtBQTRFZCxpQkFBZSxRQTVFRDtBQTZFZCxjQUFZLFFBN0VFO0FBOEVkLFVBQVEsUUE5RU07QUErRWQsVUFBUSxRQS9FTTtBQWdGZCxVQUFRLFFBaEZNO0FBaUZkLGVBQWEsUUFqRkM7QUFrRmQsU0FBTyxRQWxGTztBQW1GZCxhQUFXLFFBbkZHO0FBb0ZkLGVBQWEsUUFwRkM7QUFxRmQsZUFBYSxRQXJGQztBQXNGZCxnQkFBYyxRQXRGQTtBQXVGZCxpQkFBZSxRQXZGRDtBQXdGZCxtQkFBaUIsUUF4Rkg7QUF5RmQsbUJBQWlCLFFBekZIO0FBMEZkLG9CQUFrQixRQTFGSjtBQTJGZCxjQUFZLFFBM0ZFO0FBNEZkLGVBQWEsUUE1RkM7QUE2RmQsV0FBUyxRQTdGSztBQThGZCxVQUFRLFFBOUZNLEUiLCJmaWxlIjoiNDU1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xyXG5cdCdjb250YWN0JzogJ1xcdWUxMDAnLFxyXG5cdCdwZXJzb24nOiAnXFx1ZTEwMScsXHJcblx0J3BlcnNvbmFkZCc6ICdcXHVlMTAyJyxcclxuXHQnY29udGFjdC1maWxsZWQnOiAnXFx1ZTEzMCcsXHJcblx0J3BlcnNvbi1maWxsZWQnOiAnXFx1ZTEzMScsXHJcblx0J3BlcnNvbmFkZC1maWxsZWQnOiAnXFx1ZTEzMicsXHJcblx0J3Bob25lJzogJ1xcdWUyMDAnLFxyXG5cdCdlbWFpbCc6ICdcXHVlMjAxJyxcclxuXHQnY2hhdGJ1YmJsZSc6ICdcXHVlMjAyJyxcclxuXHQnY2hhdGJveGVzJzogJ1xcdWUyMDMnLFxyXG5cdCdwaG9uZS1maWxsZWQnOiAnXFx1ZTIzMCcsXHJcblx0J2VtYWlsLWZpbGxlZCc6ICdcXHVlMjMxJyxcclxuXHQnY2hhdGJ1YmJsZS1maWxsZWQnOiAnXFx1ZTIzMicsXHJcblx0J2NoYXRib3hlcy1maWxsZWQnOiAnXFx1ZTIzMycsXHJcblx0J3dlaWJvJzogJ1xcdWUyNjAnLFxyXG5cdCd3ZWl4aW4nOiAnXFx1ZTI2MScsXHJcblx0J3Blbmd5b3VxdWFuJzogJ1xcdWUyNjInLFxyXG5cdCdjaGF0JzogJ1xcdWUyNjMnLFxyXG5cdCdxcSc6ICdcXHVlMjY0JyxcclxuXHQndmlkZW9jYW0nOiAnXFx1ZTMwMCcsXHJcblx0J2NhbWVyYSc6ICdcXHVlMzAxJyxcclxuXHQnbWljJzogJ1xcdWUzMDInLFxyXG5cdCdsb2NhdGlvbic6ICdcXHVlMzAzJyxcclxuXHQnbWljLWZpbGxlZCc6ICdcXHVlMzMyJyxcclxuXHQnc3BlZWNoJzogJ1xcdWUzMzInLFxyXG5cdCdsb2NhdGlvbi1maWxsZWQnOiAnXFx1ZTMzMycsXHJcblx0J21pY29mZic6ICdcXHVlMzYwJyxcclxuXHQnaW1hZ2UnOiAnXFx1ZTM2MycsXHJcblx0J21hcCc6ICdcXHVlMzY0JyxcclxuXHQnY29tcG9zZSc6ICdcXHVlNDAwJyxcclxuXHQndHJhc2gnOiAnXFx1ZTQwMScsXHJcblx0J3VwbG9hZCc6ICdcXHVlNDAyJyxcclxuXHQnZG93bmxvYWQnOiAnXFx1ZTQwMycsXHJcblx0J2Nsb3NlJzogJ1xcdWU0MDQnLFxyXG5cdCdyZWRvJzogJ1xcdWU0MDUnLFxyXG5cdCd1bmRvJzogJ1xcdWU0MDYnLFxyXG5cdCdyZWZyZXNoJzogJ1xcdWU0MDcnLFxyXG5cdCdzdGFyJzogJ1xcdWU0MDgnLFxyXG5cdCdwbHVzJzogJ1xcdWU0MDknLFxyXG5cdCdtaW51cyc6ICdcXHVlNDEwJyxcclxuXHQnY2lyY2xlJzogJ1xcdWU0MTEnLFxyXG5cdCdjaGVja2JveCc6ICdcXHVlNDExJyxcclxuXHQnY2xvc2UtZmlsbGVkJzogJ1xcdWU0MzQnLFxyXG5cdCdjbGVhcic6ICdcXHVlNDM0JyxcclxuXHQncmVmcmVzaC1maWxsZWQnOiAnXFx1ZTQzNycsXHJcblx0J3N0YXItZmlsbGVkJzogJ1xcdWU0MzgnLFxyXG5cdCdwbHVzLWZpbGxlZCc6ICdcXHVlNDM5JyxcclxuXHQnbWludXMtZmlsbGVkJzogJ1xcdWU0NDAnLFxyXG5cdCdjaXJjbGUtZmlsbGVkJzogJ1xcdWU0NDEnLFxyXG5cdCdjaGVja2JveC1maWxsZWQnOiAnXFx1ZTQ0MicsXHJcblx0J2Nsb3NlZW1wdHknOiAnXFx1ZTQ2MCcsXHJcblx0J3JlZnJlc2hlbXB0eSc6ICdcXHVlNDYxJyxcclxuXHQncmVsb2FkJzogJ1xcdWU0NjInLFxyXG5cdCdzdGFyaGFsZic6ICdcXHVlNDYzJyxcclxuXHQnc3Bpbm5lcic6ICdcXHVlNDY0JyxcclxuXHQnc3Bpbm5lci1jeWNsZSc6ICdcXHVlNDY1JyxcclxuXHQnc2VhcmNoJzogJ1xcdWU0NjYnLFxyXG5cdCdwbHVzZW1wdHknOiAnXFx1ZTQ2OCcsXHJcblx0J2ZvcndhcmQnOiAnXFx1ZTQ3MCcsXHJcblx0J2JhY2snOiAnXFx1ZTQ3MScsXHJcblx0J2xlZnQtbmF2JzogJ1xcdWU0NzEnLFxyXG5cdCdjaGVja21hcmtlbXB0eSc6ICdcXHVlNDcyJyxcclxuXHQnaG9tZSc6ICdcXHVlNTAwJyxcclxuXHQnbmF2aWdhdGUnOiAnXFx1ZTUwMScsXHJcblx0J2dlYXInOiAnXFx1ZTUwMicsXHJcblx0J3BhcGVycGxhbmUnOiAnXFx1ZTUwMycsXHJcblx0J2luZm8nOiAnXFx1ZTUwNCcsXHJcblx0J2hlbHAnOiAnXFx1ZTUwNScsXHJcblx0J2xvY2tlZCc6ICdcXHVlNTA2JyxcclxuXHQnbW9yZSc6ICdcXHVlNTA3JyxcclxuXHQnZmxhZyc6ICdcXHVlNTA4JyxcclxuXHQnaG9tZS1maWxsZWQnOiAnXFx1ZTUzMCcsXHJcblx0J2dlYXItZmlsbGVkJzogJ1xcdWU1MzInLFxyXG5cdCdpbmZvLWZpbGxlZCc6ICdcXHVlNTM0JyxcclxuXHQnaGVscC1maWxsZWQnOiAnXFx1ZTUzNScsXHJcblx0J21vcmUtZmlsbGVkJzogJ1xcdWU1MzcnLFxyXG5cdCdzZXR0aW5ncyc6ICdcXHVlNTYwJyxcclxuXHQnbGlzdCc6ICdcXHVlNTYyJyxcclxuXHQnYmFycyc6ICdcXHVlNTYzJyxcclxuXHQnbG9vcCc6ICdcXHVlNTY1JyxcclxuXHQncGFwZXJjbGlwJzogJ1xcdWU1NjcnLFxyXG5cdCdleWUnOiAnXFx1ZTU2OCcsXHJcblx0J2Fycm93dXAnOiAnXFx1ZTU4MCcsXHJcblx0J2Fycm93ZG93bic6ICdcXHVlNTgxJyxcclxuXHQnYXJyb3dsZWZ0JzogJ1xcdWU1ODInLFxyXG5cdCdhcnJvd3JpZ2h0JzogJ1xcdWU1ODMnLFxyXG5cdCdhcnJvd3RoaW51cCc6ICdcXHVlNTg0JyxcclxuXHQnYXJyb3d0aGluZG93bic6ICdcXHVlNTg1JyxcclxuXHQnYXJyb3d0aGlubGVmdCc6ICdcXHVlNTg2JyxcclxuXHQnYXJyb3d0aGlucmlnaHQnOiAnXFx1ZTU4NycsXHJcblx0J3B1bGxkb3duJzogJ1xcdWU1ODgnLFxyXG5cdCdjbG9zZWZpbGwnOiAnXFx1ZTU4OScsXHJcblx0J3NvdW5kJzogJ1xcdWU1OTAnLFxyXG5cdCdzY2FuJzogJ1xcdWU2MTInXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///455\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\r\n       * h5 请求\r\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@^2.0.0-alpha-24420191128001\",\"_id\":\"@dcloudio/uni-stat@2.0.0-v3-24020191018001\",\"_inBundle\":false,\"_integrity\":\"sha512-nYBm5pRrYzrj2dKMqucWSF2PwInUMnn3MLHM/ik3gnLUEKSW61rzcY1RPlUwaH7c+Snm6N+bAJzmj3GvlrlVXA==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"range\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@^2.0.0-alpha-24420191128001\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"^2.0.0-alpha-24420191128001\",\"saveSpec\":null,\"fetchSpec\":\"^2.0.0-alpha-24420191128001\"},\"_requiredBy\":[\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-v3-24020191018001.tgz\",\"_shasum\":\"6ef04326cc0b945726413eebe442ab8f47c7536c\",\"_spec\":\"@dcloudio/uni-stat@^2.0.0-alpha-24420191128001\",\"_where\":\"/Users/guoshengqiang/Documents/dcloud-plugins/alpha/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"197e8df53cc9d4c3f6eb722b918ccf51672b5cfe\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-v3-24020191018001\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 7:
/*!*********************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/video-APP/task/pages.json?{"type":"style"} ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/home\": {}, \"pages/index/index\": {}, \"pages/login/login\": {}, \"pages/login/forgetpwd\": {}, \"pages/login/register\": {}, \"pages/user/user\": {}, \"pages/create/cate\": {}, \"pages/create/create\": {}, \"pages/vip/vip\": { \"navigationBarTextStyle\": \"white\" }, \"pages/level/level\": { \"navigationBarTextStyle\": \"white\" }, \"pages/detail/detail\": {}, \"pages/wallet/wallet\": {}, \"pages/wallet/withdrawal\": {}, \"pages/wallet/withdrawal_list\": {}, \"pages/wallet/detail\": {}, \"pages/order/all\": {}, \"pages/order/detail\": {}, \"pages/user/help\": {}, \"pages/release/all\": {}, \"pages/user/children\": {}, \"pages/message/message\": {}, \"pages/message/create\": {}, \"pages/message/detail\": {}, \"pages/user/set\": {}, \"pages/user/info\": {}, \"pages/user/about\": {}, \"pages/user/edit_phone\": {}, \"pages/user/edit_access\": {}, \"pages/user/edit_account\": {}, \"pages/user/edit_pwd\": {}, \"pages/guild/guild\": {}, \"pages/guild/home\": {}, \"pages/guild/join\": {}, \"pages/guild/create\": {}, \"pages/guild/wallet\": {}, \"pages/guild/withdrawal\": {}, \"pages/guild/withdrawal_list\": {}, \"pages/guild/wallet_detail\": {}, \"pages/user/invite\": {}, \"pages/h5/h5\": {}, \"pages/h5/browse\": {}, \"pages/user/suggest\": {}, \"pages/user/privacy\": {}, \"pages/video/video\": {}, \"pages/personal/personal\": {}, \"pages/recommend/recommend\": {} }, \"globalStyle\": { \"navigationBarTitleText\": \"任务\", \"backgroundColor\": \"#F8F8F8\", \"navigationBarBackgroundColor\": \"#0081ff\", \"navigationStyle\": \"custom\", \"navigationBarTextStyle\": \"black\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsRUFBQyxjQUFhLEVBQWQsRUFBaUIscUJBQW9CLEVBQXJDLEVBQXdDLHFCQUFvQixFQUE1RCxFQUErRCx5QkFBd0IsRUFBdkYsRUFBMEYsd0JBQXVCLEVBQWpILEVBQW9ILG1CQUFrQixFQUF0SSxFQUF5SSxxQkFBb0IsRUFBN0osRUFBZ0ssdUJBQXNCLEVBQXRMLEVBQXlMLGlCQUFnQixFQUFDLDBCQUF5QixPQUExQixFQUF6TSxFQUE0TyxxQkFBb0IsRUFBQywwQkFBeUIsT0FBMUIsRUFBaFEsRUFBbVMsdUJBQXNCLEVBQXpULEVBQTRULHVCQUFzQixFQUFsVixFQUFxViwyQkFBMEIsRUFBL1csRUFBa1gsZ0NBQStCLEVBQWpaLEVBQW9aLHVCQUFzQixFQUExYSxFQUE2YSxtQkFBa0IsRUFBL2IsRUFBa2Msc0JBQXFCLEVBQXZkLEVBQTBkLG1CQUFrQixFQUE1ZSxFQUErZSxxQkFBb0IsRUFBbmdCLEVBQXNnQix1QkFBc0IsRUFBNWhCLEVBQStoQix5QkFBd0IsRUFBdmpCLEVBQTBqQix3QkFBdUIsRUFBamxCLEVBQW9sQix3QkFBdUIsRUFBM21CLEVBQThtQixrQkFBaUIsRUFBL25CLEVBQWtvQixtQkFBa0IsRUFBcHBCLEVBQXVwQixvQkFBbUIsRUFBMXFCLEVBQTZxQix5QkFBd0IsRUFBcnNCLEVBQXdzQiwwQkFBeUIsRUFBanVCLEVBQW91QiwyQkFBMEIsRUFBOXZCLEVBQWl3Qix1QkFBc0IsRUFBdnhCLEVBQTB4QixxQkFBb0IsRUFBOXlCLEVBQWl6QixvQkFBbUIsRUFBcDBCLEVBQXUwQixvQkFBbUIsRUFBMTFCLEVBQTYxQixzQkFBcUIsRUFBbDNCLEVBQXEzQixzQkFBcUIsRUFBMTRCLEVBQTY0QiwwQkFBeUIsRUFBdDZCLEVBQXk2QiwrQkFBOEIsRUFBdjhCLEVBQTA4Qiw2QkFBNEIsRUFBdCtCLEVBQXkrQixxQkFBb0IsRUFBNy9CLEVBQWdnQyxlQUFjLEVBQTlnQyxFQUFpaEMsbUJBQWtCLEVBQW5pQyxFQUFzaUMsc0JBQXFCLEVBQTNqQyxFQUE4akMsc0JBQXFCLEVBQW5sQyxFQUFzbEMscUJBQW9CLEVBQTFtQyxFQUE2bUMsMkJBQTBCLEVBQXZvQyxFQUEwb0MsNkJBQTRCLEVBQXRxQyxFQUFULEVBQW1yQyxlQUFjLEVBQUMsMEJBQXlCLElBQTFCLEVBQStCLG1CQUFrQixTQUFqRCxFQUEyRCxnQ0FBK0IsU0FBMUYsRUFBb0csbUJBQWtCLFFBQXRILEVBQStILDBCQUF5QixPQUF4SixFQUFqc0MsRSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wicGFnZXNcIjp7XCJwYWdlcy9ob21lXCI6e30sXCJwYWdlcy9pbmRleC9pbmRleFwiOnt9LFwicGFnZXMvbG9naW4vbG9naW5cIjp7fSxcInBhZ2VzL2xvZ2luL2ZvcmdldHB3ZFwiOnt9LFwicGFnZXMvbG9naW4vcmVnaXN0ZXJcIjp7fSxcInBhZ2VzL3VzZXIvdXNlclwiOnt9LFwicGFnZXMvY3JlYXRlL2NhdGVcIjp7fSxcInBhZ2VzL2NyZWF0ZS9jcmVhdGVcIjp7fSxcInBhZ2VzL3ZpcC92aXBcIjp7XCJuYXZpZ2F0aW9uQmFyVGV4dFN0eWxlXCI6XCJ3aGl0ZVwifSxcInBhZ2VzL2xldmVsL2xldmVsXCI6e1wibmF2aWdhdGlvbkJhclRleHRTdHlsZVwiOlwid2hpdGVcIn0sXCJwYWdlcy9kZXRhaWwvZGV0YWlsXCI6e30sXCJwYWdlcy93YWxsZXQvd2FsbGV0XCI6e30sXCJwYWdlcy93YWxsZXQvd2l0aGRyYXdhbFwiOnt9LFwicGFnZXMvd2FsbGV0L3dpdGhkcmF3YWxfbGlzdFwiOnt9LFwicGFnZXMvd2FsbGV0L2RldGFpbFwiOnt9LFwicGFnZXMvb3JkZXIvYWxsXCI6e30sXCJwYWdlcy9vcmRlci9kZXRhaWxcIjp7fSxcInBhZ2VzL3VzZXIvaGVscFwiOnt9LFwicGFnZXMvcmVsZWFzZS9hbGxcIjp7fSxcInBhZ2VzL3VzZXIvY2hpbGRyZW5cIjp7fSxcInBhZ2VzL21lc3NhZ2UvbWVzc2FnZVwiOnt9LFwicGFnZXMvbWVzc2FnZS9jcmVhdGVcIjp7fSxcInBhZ2VzL21lc3NhZ2UvZGV0YWlsXCI6e30sXCJwYWdlcy91c2VyL3NldFwiOnt9LFwicGFnZXMvdXNlci9pbmZvXCI6e30sXCJwYWdlcy91c2VyL2Fib3V0XCI6e30sXCJwYWdlcy91c2VyL2VkaXRfcGhvbmVcIjp7fSxcInBhZ2VzL3VzZXIvZWRpdF9hY2Nlc3NcIjp7fSxcInBhZ2VzL3VzZXIvZWRpdF9hY2NvdW50XCI6e30sXCJwYWdlcy91c2VyL2VkaXRfcHdkXCI6e30sXCJwYWdlcy9ndWlsZC9ndWlsZFwiOnt9LFwicGFnZXMvZ3VpbGQvaG9tZVwiOnt9LFwicGFnZXMvZ3VpbGQvam9pblwiOnt9LFwicGFnZXMvZ3VpbGQvY3JlYXRlXCI6e30sXCJwYWdlcy9ndWlsZC93YWxsZXRcIjp7fSxcInBhZ2VzL2d1aWxkL3dpdGhkcmF3YWxcIjp7fSxcInBhZ2VzL2d1aWxkL3dpdGhkcmF3YWxfbGlzdFwiOnt9LFwicGFnZXMvZ3VpbGQvd2FsbGV0X2RldGFpbFwiOnt9LFwicGFnZXMvdXNlci9pbnZpdGVcIjp7fSxcInBhZ2VzL2g1L2g1XCI6e30sXCJwYWdlcy9oNS9icm93c2VcIjp7fSxcInBhZ2VzL3VzZXIvc3VnZ2VzdFwiOnt9LFwicGFnZXMvdXNlci9wcml2YWN5XCI6e30sXCJwYWdlcy92aWRlby92aWRlb1wiOnt9LFwicGFnZXMvcGVyc29uYWwvcGVyc29uYWxcIjp7fSxcInBhZ2VzL3JlY29tbWVuZC9yZWNvbW1lbmRcIjp7fX0sXCJnbG9iYWxTdHlsZVwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuS7u+WKoVwiLFwiYmFja2dyb3VuZENvbG9yXCI6XCIjRjhGOEY4XCIsXCJuYXZpZ2F0aW9uQmFyQmFja2dyb3VuZENvbG9yXCI6XCIjMDA4MWZmXCIsXCJuYXZpZ2F0aW9uU3R5bGVcIjpcImN1c3RvbVwiLFwibmF2aWdhdGlvbkJhclRleHRTdHlsZVwiOlwiYmxhY2tcIn19Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 8:
/*!********************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/video-APP/task/pages.json?{"type":"stat"} ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__BDD20CE\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX19CREQyMENFXCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ })

}]);